
proyecto_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cfe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  00000d72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ffc  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b47  00000000  00000000  0000277a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000565  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000497  00000000  00000000  00003999  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 77 00 	call	0xee	; 0xee <main>
  88:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
uint8_t switch_pot=0;
uint8_t mem_flag=0;

//CONFIGURACIONES
void setup(void){
	cli();
  90:	f8 94       	cli
	DDRC=0b00000000;
  92:	17 b8       	out	0x07, r1	; 7
	EICRA=0;
  94:	e9 e6       	ldi	r30, 0x69	; 105
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	10 82       	st	Z, r1
	EICRA|=(1<<ISC01);
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
	EIMSK=0,
  a0:	1d ba       	out	0x1d, r1	; 29
	EIMSK|=(1<<INT0);
  a2:	8d b3       	in	r24, 0x1d	; 29
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8d bb       	out	0x1d, r24	; 29
	PCICR=0;
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	PCICR |=(1<<PCIE1);
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);
  b4:	ec e6       	ldi	r30, 0x6C	; 108
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8f 60       	ori	r24, 0x0F	; 15
  bc:	80 83       	st	Z, r24
	sei();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <init_adc>:
}

void init_adc(void){
	ADMUX = 0;
  c2:	ac e7       	ldi	r26, 0x7C	; 124
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	1c 92       	st	X, r1
	ADCSRA=0;
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	10 82       	st	Z, r1
	
	// VCC=5V
	ADMUX |=(1<<REFS0);
  ce:	8c 91       	ld	r24, X
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	8c 93       	st	X, r24
	
	// Entrada 0 de MUX ADC0 para el prelab entonces no se cambian los bits de mux
	ADMUX |=(1<<ADLAR);
  d4:	8c 91       	ld	r24, X
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	8c 93       	st	X, r24
	
	//Encender ADC y  habilitar isr adc
	ADCSRA=0;
  da:	10 82       	st	Z, r1
	ADCSRA|=(1<<ADEN)|(1<<ADIE);
  dc:	80 81       	ld	r24, Z
  de:	88 68       	ori	r24, 0x88	; 136
  e0:	80 83       	st	Z, r24
	
	// preescaler = 16M/128=125k
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  e2:	80 81       	ld	r24, Z
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	80 83       	st	Z, r24
	
	//no se utilizara el estado B
	ADCSRB=0;
  e8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  ec:	08 95       	ret

000000ee <main>:
}*/

//MAIN LOOP

int main(void){	
	CLKPR=(1<<CLKPCE);
  ee:	e1 e6       	ldi	r30, 0x61	; 97
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
	CLKPR=(1<<CLKPS0);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
	cli();
  fa:	f8 94       	cli
	//initUART9600();
	initPWM0(0,1024);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	74 e0       	ldi	r23, 0x04	; 4
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 bc 03 	call	0x778	; 0x778 <initPWM0>
	initPWM1(0,1024);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	74 e0       	ldi	r23, 0x04	; 4
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 2f 04 	call	0x85e	; 0x85e <initPWM1>
	//initPWM2(0,1024);
	init_adc();
 110:	0e 94 61 00 	call	0xc2	; 0xc2 <init_adc>
	setup();
 114:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	sei();
 118:	78 94       	sei
	EECR=0;
 11a:	1f ba       	out	0x1f, r1	; 31
    /* Replace with your application code */
    while (1) 
    {	
		ADCSRA|=(1<<ADSC);
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
		//int servos[4]={valor_pot1,valor_pot2,valor_pot3,valor_pot4};
		if (modo==0){
 126:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <modo>
 12a:	81 11       	cpse	r24, r1
 12c:	19 c0       	rjmp	.+50     	; 0x160 <main+0x72>
			//aquí se pueden mover los pots libremente
			PORTD&=~(1<<PORTD3);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	87 7f       	andi	r24, 0xF7	; 247
 132:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD4);
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7e       	andi	r24, 0xEF	; 239
 138:	8b b9       	out	0x0b, r24	; 11
			updateDC1(valor_pot1,valor_pot2);
 13a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 13e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <valor_pot1>
 142:	0e 94 90 04 	call	0x920	; 0x920 <updateDC1>
			updateDC0(valor_pot3,valor_pot4);
 146:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 14a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <valor_pot3>
 14e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <updateDC0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f e3       	ldi	r24, 0x3F	; 63
 154:	9c e9       	ldi	r25, 0x9C	; 156
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x68>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x6e>
 15c:	00 00       	nop
 15e:	de cf       	rjmp	.-68     	; 0x11c <main+0x2e>
			_delay_ms(10);
		}else if (modo==1){
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	39 f4       	brne	.+14     	; 0x172 <main+0x84>
			//se guardan los valores de los pots a la eeprom (escribir)
			PORTD|=(1<<PORTD4);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 61       	ori	r24, 0x10	; 16
 168:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD3);
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	87 7f       	andi	r24, 0xF7	; 247
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	d5 cf       	rjmp	.-86     	; 0x11c <main+0x2e>
		}else if(modo==2){
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	69 f4       	brne	.+26     	; 0x190 <main+0xa2>
			//modo leer eeprom
			PORTD|=(1<<PORTD3);
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD4);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8f 7e       	andi	r24, 0xEF	; 239
 180:	8b b9       	out	0x0b, r24	; 11
 182:	8f e3       	ldi	r24, 0x3F	; 63
 184:	9c e9       	ldi	r25, 0x9C	; 156
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x98>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x9e>
 18c:	00 00       	nop
 18e:	c6 cf       	rjmp	.-116    	; 0x11c <main+0x2e>
			_delay_ms(10);
		}else if (modo==3){
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	21 f6       	brne	.-120    	; 0x11c <main+0x2e>
			//modo=2, aquí se conecta con adafruit
			PORTD|=(1<<PORTD3)|(1<<PORTD4);	
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	88 61       	ori	r24, 0x18	; 24
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	c0 cf       	rjmp	.-128    	; 0x11c <main+0x2e>

0000019c <__vector_1>:
   }



//INTERRUPCIONES
ISR(INT0_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	8f 93       	push	r24
	modo++;
 1a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <modo>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <modo>
	if (modo>=4){
 1b2:	84 30       	cpi	r24, 0x04	; 4
 1b4:	10 f0       	brcs	.+4      	; 0x1ba <__vector_1+0x1e>
		modo=0;
 1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <modo>
	}
}
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_4>:

ISR(PCINT1_vect){
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	//revisa si es la primera o segunda interrupción
	valor_pc=PINC;
 1ec:	86 b1       	in	r24, 0x06	; 6
	valor_pc=(valor_pc&0b00001111);
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <valor_pc>
	if (pulsador==0){
 1f4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <pulsador>
 1f8:	91 11       	cpse	r25, r1
 1fa:	5e c2       	rjmp	.+1212   	; 0x6b8 <__EEPROM_REGION_LENGTH__+0x2b8>
		if ((modo==1)|(modo==2)){
 1fc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <modo>
 200:	91 50       	subi	r25, 0x01	; 1
 202:	92 30       	cpi	r25, 0x02	; 2
 204:	b8 f5       	brcc	.+110    	; 0x274 <__vector_4+0xae>
			if (valor_pc==0b00001110){
 206:	8e 30       	cpi	r24, 0x0E	; 14
 208:	61 f4       	brne	.+24     	; 0x222 <__vector_4+0x5c>
				PORTD|=(1<<PORTD7);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	8b b9       	out	0x0b, r24	; 11
				posicion=1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 216:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsador>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pulsador>
 220:	29 c0       	rjmp	.+82     	; 0x274 <__vector_4+0xae>
			}else if(valor_pc==0b00001101){
 222:	8d 30       	cpi	r24, 0x0D	; 13
 224:	61 f4       	brne	.+24     	; 0x23e <__vector_4+0x78>
				PORTD&=~(1<<PORTD7);
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	8f 77       	andi	r24, 0x7F	; 127
 22a:	8b b9       	out	0x0b, r24	; 11
				posicion=2;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 232:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsador>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pulsador>
 23c:	1b c0       	rjmp	.+54     	; 0x274 <__vector_4+0xae>
			}else if(valor_pc==0b00001011){
 23e:	8b 30       	cpi	r24, 0x0B	; 11
 240:	61 f4       	brne	.+24     	; 0x25a <__vector_4+0x94>
				PORTB|=(1<<PORTB0);
 242:	85 b1       	in	r24, 0x05	; 5
 244:	81 60       	ori	r24, 0x01	; 1
 246:	85 b9       	out	0x05, r24	; 5
				posicion=3;
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 24e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsador>
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pulsador>
 258:	0d c0       	rjmp	.+26     	; 0x274 <__vector_4+0xae>
			}else if(valor_pc==0b00000111){
 25a:	87 30       	cpi	r24, 0x07	; 7
 25c:	59 f4       	brne	.+22     	; 0x274 <__vector_4+0xae>
				PORTB&=~(1<<PORTB0);
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	8e 7f       	andi	r24, 0xFE	; 254
 262:	85 b9       	out	0x05, r24	; 5
				posicion=4;
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 26a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsador>
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pulsador>
			}
		}
		if (modo==1){
 274:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <modo>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	09 f0       	breq	.+2      	; 0x27e <__vector_4+0xb8>
 27c:	16 c1       	rjmp	.+556    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			cli();
 27e:	f8 94       	cli
			switch(posicion){
 280:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <posicion>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	09 f4       	brne	.+2      	; 0x28a <__vector_4+0xc4>
 288:	4d c0       	rjmp	.+154    	; 0x324 <__vector_4+0x15e>
 28a:	18 f4       	brcc	.+6      	; 0x292 <__vector_4+0xcc>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	41 f0       	breq	.+16     	; 0x2a0 <__vector_4+0xda>
 290:	15 c2       	rjmp	.+1066   	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	09 f4       	brne	.+2      	; 0x298 <__vector_4+0xd2>
 296:	8b c0       	rjmp	.+278    	; 0x3ae <__vector_4+0x1e8>
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	09 f4       	brne	.+2      	; 0x29e <__vector_4+0xd8>
 29c:	cd c0       	rjmp	.+410    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 29e:	0e c2       	rjmp	.+1052   	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
				case 1:
					adr=0;
 2a0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 2a4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot1);
 2a8:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot1>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 2b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 2b8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 2c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot2);
 2c6:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 2ca:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 2ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 2d2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 2dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot3);
 2e0:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot3>
 2e4:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 2e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 2ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 2f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
 2fa:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 2fe:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr=0;
 302:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 306:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					//writetxtUART("Se guardo la posicion 1\n");
					break;
 30a:	d8 c1       	rjmp	.+944    	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
				case 2:
					for (int i=0;i<5;i++){
						adr++;
 30c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 310:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 31a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 31e:	2f 5f       	subi	r18, 0xFF	; 255
 320:	3f 4f       	sbci	r19, 0xFF	; 255
 322:	02 c0       	rjmp	.+4      	; 0x328 <__vector_4+0x162>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 328:	25 30       	cpi	r18, 0x05	; 5
 32a:	31 05       	cpc	r19, r1
 32c:	7c f3       	brlt	.-34     	; 0x30c <__vector_4+0x146>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 32e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot1>
 332:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 336:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 33a:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 33e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 342:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 34c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot2);
 350:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 354:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 358:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 35c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 366:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot3);
 36a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot3>
 36e:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 372:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 376:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 380:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
 384:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 388:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr=0;
 38c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 390:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					//writetxtUART("Se guardo la posicion 2\n");
					break;
 394:	93 c1       	rjmp	.+806    	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
				case 3:
					for (int i=0;i<9;i++){
						adr++;
 396:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 39a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 3a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 3a8:	2f 5f       	subi	r18, 0xFF	; 255
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__vector_4+0x1ec>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 3b2:	29 30       	cpi	r18, 0x09	; 9
 3b4:	31 05       	cpc	r19, r1
 3b6:	7c f3       	brlt	.-34     	; 0x396 <__vector_4+0x1d0>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 3b8:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot1>
 3bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 3c0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 3c4:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 3c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 3cc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 3d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot2);
 3da:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 3de:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 3e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 3e6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 3f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot3);
 3f4:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot3>
 3f8:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 3fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 400:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 40a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
 40e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 412:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr=0;
 416:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 41a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					//writetxtUART("Se guardo la posicion 3\n");
					break;
 41e:	4e c1       	rjmp	.+668    	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
				case 4:
					for (int i=0;i<13;i++){
						adr++;
 420:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 424:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 42e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	3f 4f       	sbci	r19, 0xFF	; 255
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 43c:	2d 30       	cpi	r18, 0x0D	; 13
 43e:	31 05       	cpc	r19, r1
 440:	7c f3       	brlt	.-34     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 442:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot1>
 446:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 44a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 44e:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 452:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 456:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 460:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot2);
 464:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 468:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 46c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 470:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 47a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot3);
 47e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot3>
 482:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr++;
 486:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 48a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 494:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
 498:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 49c:	0e 94 6f 06 	call	0xcde	; 0xcde <eeprom_write_byte>
					adr=0;
 4a0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 4a4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					//writetxtUART("Se guardo la posicion 4\n");
					break;
 4a8:	09 c1       	rjmp	.+530    	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
				sei();
			posicion=0;
			}
		}else if(modo==2){
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ae:	06 c1       	rjmp	.+524    	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
			cli();
 4b0:	f8 94       	cli
			switch(posicion){
 4b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <posicion>
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	09 f4       	brne	.+2      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4ba:	44 c0       	rjmp	.+136    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 4bc:	18 f4       	brcc	.+6      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	41 f0       	breq	.+16     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4c2:	ea c0       	rjmp	.+468    	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	09 f4       	brne	.+2      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c8:	7a c0       	rjmp	.+244    	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
 4ca:	84 30       	cpi	r24, 0x04	; 4
 4cc:	09 f4       	brne	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ce:	b4 c0       	rjmp	.+360    	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
 4d0:	e3 c0       	rjmp	.+454    	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
				case 1:
					adr=0;
 4d2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 4d6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					valor_pot1_esc=eeprom_read_byte(adr);
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 4e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot1_esc>
					adr++;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 4ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 4f2:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 4f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot2_esc>
					adr++;
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 502:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 506:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 50a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot3_esc>
					adr++;
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 516:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 51a:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 51e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_pot4_esc>
					adr=0;
 522:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 526:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					//writetxtUART("Mostrando la posicion 1\n");
					break;
 52a:	b6 c0       	rjmp	.+364    	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
				case 2:
					for (int i=0;i<5;i++){
						adr++;
 52c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 530:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 53a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 53e:	2f 5f       	subi	r18, 0xFF	; 255
 540:	3f 4f       	sbci	r19, 0xFF	; 255
 542:	02 c0       	rjmp	.+4      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 548:	25 30       	cpi	r18, 0x05	; 5
 54a:	31 05       	cpc	r19, r1
 54c:	7c f3       	brlt	.-34     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 54e:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <adr>
 552:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <adr+0x1>
 556:	ce 01       	movw	r24, r28
 558:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 55c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot1_esc>
					adr++;
 560:	21 96       	adiw	r28, 0x01	; 1
 562:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 566:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 56a:	ce 01       	movw	r24, r28
 56c:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 570:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot2_esc>
					adr++;
 574:	21 96       	adiw	r28, 0x01	; 1
 576:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 57a:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 57e:	ce 01       	movw	r24, r28
 580:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 584:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot3_esc>
					adr++;
 588:	ce 01       	movw	r24, r28
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 590:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 594:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 598:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_pot4_esc>
					adr=0;
 59c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 5a0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					//writetxtUART("Mostrando la posicion 2\n");
					break;
 5a4:	79 c0       	rjmp	.+242    	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
				case 3:
					for (int i=0;i<9;i++){
						adr++;
 5a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 5aa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 5b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 5b8:	2f 5f       	subi	r18, 0xFF	; 255
 5ba:	3f 4f       	sbci	r19, 0xFF	; 255
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 5be:	20 e0       	ldi	r18, 0x00	; 0
 5c0:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 5c2:	29 30       	cpi	r18, 0x09	; 9
 5c4:	31 05       	cpc	r19, r1
 5c6:	7c f3       	brlt	.-34     	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 5c8:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <adr>
 5cc:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <adr+0x1>
 5d0:	ce 01       	movw	r24, r28
 5d2:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 5d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot1_esc>
					adr++;
 5da:	21 96       	adiw	r28, 0x01	; 1
 5dc:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 5e0:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 5e4:	ce 01       	movw	r24, r28
 5e6:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 5ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot2_esc>
					adr++;
 5ee:	21 96       	adiw	r28, 0x01	; 1
 5f0:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 5f4:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 5f8:	ce 01       	movw	r24, r28
 5fa:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 5fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot3_esc>
					adr++;
 602:	ce 01       	movw	r24, r28
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 60a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 60e:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 612:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_pot4_esc>
					adr=0;
 616:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 61a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					//writetxtUART("Mostrando la posicion 3\n");
					break;
 61e:	3c c0       	rjmp	.+120    	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
				case 4:
					for (int i=0;i<13;i++){
						adr++;
 620:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 624:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 62e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 632:	2f 5f       	subi	r18, 0xFF	; 255
 634:	3f 4f       	sbci	r19, 0xFF	; 255
 636:	02 c0       	rjmp	.+4      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 63c:	2d 30       	cpi	r18, 0x0D	; 13
 63e:	31 05       	cpc	r19, r1
 640:	7c f3       	brlt	.-34     	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 642:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <adr>
 646:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <adr+0x1>
 64a:	ce 01       	movw	r24, r28
 64c:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 650:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot1_esc>
					adr++;
 654:	21 96       	adiw	r28, 0x01	; 1
 656:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 65a:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 65e:	ce 01       	movw	r24, r28
 660:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 664:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot2_esc>
					adr++;
 668:	21 96       	adiw	r28, 0x01	; 1
 66a:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 66e:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 672:	ce 01       	movw	r24, r28
 674:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 678:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot3_esc>
					adr++;
 67c:	ce 01       	movw	r24, r28
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 684:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 688:	0e 94 67 06 	call	0xcce	; 0xcce <eeprom_read_byte>
 68c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_pot4_esc>
					adr=0;
 690:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 694:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					//writetxtUART("Mostrando la posicion 4\n");
					break;
			}
			sei();
 698:	78 94       	sei
			updateDC1(valor_pot1_esc,valor_pot2_esc);
 69a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <valor_pot2_esc>
 69e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <valor_pot1_esc>
 6a2:	0e 94 90 04 	call	0x920	; 0x920 <updateDC1>
			updateDC0(valor_pot3_esc,valor_pot4_esc);
 6a6:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <valor_pot4_esc>
 6aa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <valor_pot3_esc>
 6ae:	0e 94 fe 03 	call	0x7fc	; 0x7fc <updateDC0>
			posicion=0;
 6b2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <posicion>
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
		}
		//terminan if de modos	
	}else{
	pulsador=0;}
 6b8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsador>
}
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <__vector_21>:

ISR(ADC_vect){
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	8f 93       	push	r24
 6ee:	ef 93       	push	r30
 6f0:	ff 93       	push	r31
		switch_pot=(ADMUX&0x0F);
 6f2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 6f6:	8f 70       	andi	r24, 0x0F	; 15
 6f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//char mensaje[16];
		if(switch_pot==7){
 6fc:	87 30       	cpi	r24, 0x07	; 7
 6fe:	59 f4       	brne	.+22     	; 0x716 <__vector_21+0x34>
				valor_pot1=ADCH;
 700:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 704:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <valor_pot1>
				ADMUX=((ADMUX&0xF0)|6);
 708:	ec e7       	ldi	r30, 0x7C	; 124
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	80 7f       	andi	r24, 0xF0	; 240
 710:	86 60       	ori	r24, 0x06	; 6
 712:	80 83       	st	Z, r24
 714:	24 c0       	rjmp	.+72     	; 0x75e <__vector_21+0x7c>
			} else if(switch_pot==6){
 716:	86 30       	cpi	r24, 0x06	; 6
 718:	59 f4       	brne	.+22     	; 0x730 <__vector_21+0x4e>
				valor_pot2=ADCH;
 71a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 71e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valor_pot2>
				ADMUX=((ADMUX&0xF0)|5);
 722:	ec e7       	ldi	r30, 0x7C	; 124
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	80 7f       	andi	r24, 0xF0	; 240
 72a:	85 60       	ori	r24, 0x05	; 5
 72c:	80 83       	st	Z, r24
 72e:	17 c0       	rjmp	.+46     	; 0x75e <__vector_21+0x7c>
			}else if(switch_pot==5){
 730:	85 30       	cpi	r24, 0x05	; 5
 732:	59 f4       	brne	.+22     	; 0x74a <__vector_21+0x68>
				valor_pot3=ADCH;
 734:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 738:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <valor_pot3>
				ADMUX=((ADMUX&0xF0)|4);
 73c:	ec e7       	ldi	r30, 0x7C	; 124
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	80 7f       	andi	r24, 0xF0	; 240
 744:	84 60       	ori	r24, 0x04	; 4
 746:	80 83       	st	Z, r24
 748:	0a c0       	rjmp	.+20     	; 0x75e <__vector_21+0x7c>
			}else{
				valor_pot4=ADCH;
 74a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 74e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <valor_pot4>
				ADMUX=((ADMUX&0xF0)|7);
 752:	ec e7       	ldi	r30, 0x7C	; 124
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	80 7f       	andi	r24, 0xF0	; 240
 75a:	87 60       	ori	r24, 0x07	; 7
 75c:	80 83       	st	Z, r24
			}
		
		ADCSRA|=(1<<ADIF);//apagar bandera
 75e:	ea e7       	ldi	r30, 0x7A	; 122
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	80 61       	ori	r24, 0x10	; 16
 766:	80 83       	st	Z, r24
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	8f 91       	pop	r24
 76e:	0f 90       	pop	r0
 770:	0f be       	out	0x3f, r0	; 63
 772:	0f 90       	pop	r0
 774:	1f 90       	pop	r1
 776:	18 95       	reti

00000778 <initPWM0>:
#include "pwm_0.h"
#include <avr/io.h>
#include <stdint.h>

void initPWM0(uint8_t invertido, uint16_t preescaler){
	DDRD|=(1<<DDD6)|(1<<DDD5);
 778:	9a b1       	in	r25, 0x0a	; 10
 77a:	90 66       	ori	r25, 0x60	; 96
 77c:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0A=0;
 77e:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0;
 780:	15 bc       	out	0x25, r1	; 37
	
	if (invertido==1){
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	39 f4       	brne	.+14     	; 0x794 <initPWM0+0x1c>
		TCCR0A|=(1<<COM0A1)|(1<<COM0A0);
 786:	84 b5       	in	r24, 0x24	; 36
 788:	80 6c       	ori	r24, 0xC0	; 192
 78a:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<COM0B1)|(1<<COM0B0);
 78c:	84 b5       	in	r24, 0x24	; 36
 78e:	80 63       	ori	r24, 0x30	; 48
 790:	84 bd       	out	0x24, r24	; 36
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <initPWM0+0x28>
		}else{
		TCCR0A|=(1<<COM0A1);
 794:	84 b5       	in	r24, 0x24	; 36
 796:	80 68       	ori	r24, 0x80	; 128
 798:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<COM0B1);
 79a:	84 b5       	in	r24, 0x24	; 36
 79c:	80 62       	ori	r24, 0x20	; 32
 79e:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |=(1<<WGM00)|(1<<WGM01);
 7a0:	84 b5       	in	r24, 0x24	; 36
 7a2:	83 60       	ori	r24, 0x03	; 3
 7a4:	84 bd       	out	0x24, r24	; 36
	//TCCR0B|=(1<<WGM02);
	
	switch (preescaler){
 7a6:	60 34       	cpi	r22, 0x40	; 64
 7a8:	71 05       	cpc	r23, r1
 7aa:	c1 f0       	breq	.+48     	; 0x7dc <initPWM0+0x64>
 7ac:	38 f4       	brcc	.+14     	; 0x7bc <initPWM0+0x44>
 7ae:	61 15       	cp	r22, r1
 7b0:	71 05       	cpc	r23, r1
 7b2:	61 f0       	breq	.+24     	; 0x7cc <initPWM0+0x54>
 7b4:	68 30       	cpi	r22, 0x08	; 8
 7b6:	71 05       	cpc	r23, r1
 7b8:	69 f0       	breq	.+26     	; 0x7d4 <initPWM0+0x5c>
 7ba:	1c c0       	rjmp	.+56     	; 0x7f4 <initPWM0+0x7c>
 7bc:	61 15       	cp	r22, r1
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	78 07       	cpc	r23, r24
 7c2:	81 f0       	breq	.+32     	; 0x7e4 <initPWM0+0x6c>
 7c4:	61 15       	cp	r22, r1
 7c6:	74 40       	sbci	r23, 0x04	; 4
 7c8:	89 f0       	breq	.+34     	; 0x7ec <initPWM0+0x74>
 7ca:	14 c0       	rjmp	.+40     	; 0x7f4 <initPWM0+0x7c>
		case 0:
		TCCR0B |=(1<<CS00);
 7cc:	85 b5       	in	r24, 0x25	; 37
 7ce:	81 60       	ori	r24, 0x01	; 1
 7d0:	85 bd       	out	0x25, r24	; 37
		break;
 7d2:	08 95       	ret
		case 8:
		TCCR0B |=(1<<CS01);
 7d4:	85 b5       	in	r24, 0x25	; 37
 7d6:	82 60       	ori	r24, 0x02	; 2
 7d8:	85 bd       	out	0x25, r24	; 37
		break;
 7da:	08 95       	ret
		case 64:
		TCCR0B |=(1<<CS00)|(1<<CS01);
 7dc:	85 b5       	in	r24, 0x25	; 37
 7de:	83 60       	ori	r24, 0x03	; 3
 7e0:	85 bd       	out	0x25, r24	; 37
		break;
 7e2:	08 95       	ret
		case 256:
		TCCR0B |=(1<<CS02);
 7e4:	85 b5       	in	r24, 0x25	; 37
 7e6:	84 60       	ori	r24, 0x04	; 4
 7e8:	85 bd       	out	0x25, r24	; 37
		break;
 7ea:	08 95       	ret
		case 1024:
		TCCR0B |=(1<<CS00)|(1<<CS02); //preescaler de 1024 para un periodo máximo de 4 segundos
 7ec:	85 b5       	in	r24, 0x25	; 37
 7ee:	85 60       	ori	r24, 0x05	; 5
 7f0:	85 bd       	out	0x25, r24	; 37
		break;
 7f2:	08 95       	ret
		default:
		TCCR0B|=(1<<CS00);
 7f4:	85 b5       	in	r24, 0x25	; 37
 7f6:	81 60       	ori	r24, 0x01	; 1
 7f8:	85 bd       	out	0x25, r24	; 37
 7fa:	08 95       	ret

000007fc <updateDC0>:
	}
	
}

void updateDC0(uint8_t duty_cycle,uint8_t duty_cycle2){
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	c6 2f       	mov	r28, r22
	uint8_t a;
	uint8_t a2;
	a=((0.035*duty_cycle)+4.67);
 802:	68 2f       	mov	r22, r24
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatsisf>
 80e:	29 e2       	ldi	r18, 0x29	; 41
 810:	3c e5       	ldi	r19, 0x5C	; 92
 812:	4f e0       	ldi	r20, 0x0F	; 15
 814:	5d e3       	ldi	r21, 0x3D	; 61
 816:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulsf3>
 81a:	24 ea       	ldi	r18, 0xA4	; 164
 81c:	30 e7       	ldi	r19, 0x70	; 112
 81e:	45 e9       	ldi	r20, 0x95	; 149
 820:	50 e4       	ldi	r21, 0x40	; 64
 822:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3>
 826:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 82a:	d6 2f       	mov	r29, r22
	a2=((0.02*duty_cycle2)+4.67);
 82c:	6c 2f       	mov	r22, r28
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatsisf>
 838:	2a e0       	ldi	r18, 0x0A	; 10
 83a:	37 ed       	ldi	r19, 0xD7	; 215
 83c:	43 ea       	ldi	r20, 0xA3	; 163
 83e:	5c e3       	ldi	r21, 0x3C	; 60
 840:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulsf3>
 844:	24 ea       	ldi	r18, 0xA4	; 164
 846:	30 e7       	ldi	r19, 0x70	; 112
 848:	45 e9       	ldi	r20, 0x95	; 149
 84a:	50 e4       	ldi	r21, 0x40	; 64
 84c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3>
 850:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
	//pot2--> eyeballs-->135°
	OCR0A=a;
 854:	d7 bd       	out	0x27, r29	; 39
	//pot1--> boca-->45°
	OCR0B=a2;
 856:	68 bd       	out	0x28, r22	; 40
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	08 95       	ret

0000085e <initPWM1>:

#include "pwm_1.h"
uint8_t y=0;
uint8_t y2=0;
void initPWM1(uint8_t invertido, uint16_t preescaler){
	DDRB |=(1<<DDB1)|(1<<DDB2);
 85e:	94 b1       	in	r25, 0x04	; 4
 860:	96 60       	ori	r25, 0x06	; 6
 862:	94 b9       	out	0x04, r25	; 4
	TCCR1A=0;
 864:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0;
 868:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	if (invertido==1){
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	49 f4       	brne	.+18     	; 0x882 <initPWM1+0x24>
		TCCR1A |=(1<<COM1A1)|(1<<COM1A0);//high
 870:	e0 e8       	ldi	r30, 0x80	; 128
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	80 6c       	ori	r24, 0xC0	; 192
 878:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1B1)|(1<<COM1B0);
 87a:	80 81       	ld	r24, Z
 87c:	80 63       	ori	r24, 0x30	; 48
 87e:	80 83       	st	Z, r24
 880:	08 c0       	rjmp	.+16     	; 0x892 <initPWM1+0x34>
		} else{
		TCCR1A |=(1<<COM1A1); //low
 882:	e0 e8       	ldi	r30, 0x80	; 128
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	80 68       	ori	r24, 0x80	; 128
 88a:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1B1);
 88c:	80 81       	ld	r24, Z
 88e:	80 62       	ori	r24, 0x20	; 32
 890:	80 83       	st	Z, r24
	}
	
	switch(preescaler){
 892:	60 34       	cpi	r22, 0x40	; 64
 894:	71 05       	cpc	r23, r1
 896:	e1 f0       	breq	.+56     	; 0x8d0 <initPWM1+0x72>
 898:	38 f4       	brcc	.+14     	; 0x8a8 <initPWM1+0x4a>
 89a:	61 15       	cp	r22, r1
 89c:	71 05       	cpc	r23, r1
 89e:	61 f0       	breq	.+24     	; 0x8b8 <initPWM1+0x5a>
 8a0:	68 30       	cpi	r22, 0x08	; 8
 8a2:	71 05       	cpc	r23, r1
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <initPWM1+0x66>
 8a6:	26 c0       	rjmp	.+76     	; 0x8f4 <initPWM1+0x96>
 8a8:	61 15       	cp	r22, r1
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	78 07       	cpc	r23, r24
 8ae:	b1 f0       	breq	.+44     	; 0x8dc <initPWM1+0x7e>
 8b0:	61 15       	cp	r22, r1
 8b2:	74 40       	sbci	r23, 0x04	; 4
 8b4:	c9 f0       	breq	.+50     	; 0x8e8 <initPWM1+0x8a>
 8b6:	1e c0       	rjmp	.+60     	; 0x8f4 <initPWM1+0x96>
		case 0:
		TCCR1B |=(1<<CS10);
 8b8:	e1 e8       	ldi	r30, 0x81	; 129
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	81 60       	ori	r24, 0x01	; 1
 8c0:	80 83       	st	Z, r24
		break;
 8c2:	1d c0       	rjmp	.+58     	; 0x8fe <initPWM1+0xa0>
		case 8:
		TCCR1B |=(1<<CS11);
 8c4:	e1 e8       	ldi	r30, 0x81	; 129
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	82 60       	ori	r24, 0x02	; 2
 8cc:	80 83       	st	Z, r24
		break;
 8ce:	17 c0       	rjmp	.+46     	; 0x8fe <initPWM1+0xa0>
		case 64:
		TCCR1B |=(1<<CS10)|(1<<CS11);
 8d0:	e1 e8       	ldi	r30, 0x81	; 129
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	83 60       	ori	r24, 0x03	; 3
 8d8:	80 83       	st	Z, r24
		break;
 8da:	11 c0       	rjmp	.+34     	; 0x8fe <initPWM1+0xa0>
		case 256:
		TCCR1B |=(1<<CS12);
 8dc:	e1 e8       	ldi	r30, 0x81	; 129
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	80 81       	ld	r24, Z
 8e2:	84 60       	ori	r24, 0x04	; 4
 8e4:	80 83       	st	Z, r24
		break;
 8e6:	0b c0       	rjmp	.+22     	; 0x8fe <initPWM1+0xa0>
		case 1024:
		TCCR1B |=(1<<CS12)|(1<<CS10); //preescaler de 1024 para un periodo máximo de 4 segundos
 8e8:	e1 e8       	ldi	r30, 0x81	; 129
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	85 60       	ori	r24, 0x05	; 5
 8f0:	80 83       	st	Z, r24
		break;
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <initPWM1+0xa0>
		default:
		TCCR1B|=(1<<CS10);
 8f4:	e1 e8       	ldi	r30, 0x81	; 129
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	81 60       	ori	r24, 0x01	; 1
 8fc:	80 83       	st	Z, r24
	}
	
	//FAST PWM 8 bits
	TCCR1A |=(1<<WGM11);
 8fe:	e0 e8       	ldi	r30, 0x80	; 128
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 81       	ld	r24, Z
 904:	82 60       	ori	r24, 0x02	; 2
 906:	80 83       	st	Z, r24
	TCCR1B |=(1<<WGM12)|(1<<WGM12);
 908:	e1 e8       	ldi	r30, 0x81	; 129
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	88 60       	ori	r24, 0x08	; 8
 910:	80 83       	st	Z, r24
	
	ICR1=160;
 912:	80 ea       	ldi	r24, 0xA0	; 160
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 91a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 91e:	08 95       	ret

00000920 <updateDC1>:
	
	
}


void updateDC1(uint8_t prc_duty, uint8_t prc_duty2){
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	d6 2f       	mov	r29, r22
	y=((0.027*prc_duty)+4.66);
 926:	68 2f       	mov	r22, r24
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatsisf>
 932:	2b e1       	ldi	r18, 0x1B	; 27
 934:	3f e2       	ldi	r19, 0x2F	; 47
 936:	4d ed       	ldi	r20, 0xDD	; 221
 938:	5c e3       	ldi	r21, 0x3C	; 60
 93a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulsf3>
 93e:	28 eb       	ldi	r18, 0xB8	; 184
 940:	3e e1       	ldi	r19, 0x1E	; 30
 942:	45 e9       	ldi	r20, 0x95	; 149
 944:	50 e4       	ldi	r21, 0x40	; 64
 946:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3>
 94a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 94e:	c6 2f       	mov	r28, r22
 950:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <y>
	y2=((0.027*prc_duty2)+4.66);
 954:	6d 2f       	mov	r22, r29
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatsisf>
 960:	2b e1       	ldi	r18, 0x1B	; 27
 962:	3f e2       	ldi	r19, 0x2F	; 47
 964:	4d ed       	ldi	r20, 0xDD	; 221
 966:	5c e3       	ldi	r21, 0x3C	; 60
 968:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulsf3>
 96c:	28 eb       	ldi	r18, 0xB8	; 184
 96e:	3e e1       	ldi	r19, 0x1E	; 30
 970:	45 e9       	ldi	r20, 0x95	; 149
 972:	50 e4       	ldi	r21, 0x40	; 64
 974:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3>
 978:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 97c:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <y2>
	//ambos eyelids van de 0 a 90°
	//OCR1A-->pot4 eyelid derecha
	OCR1A=y;
 980:	6c 2f       	mov	r22, r28
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 988:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	//OCR1B-->pot3 eyelid izquierda
	OCR1B=y2;
 98c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <y2>
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 996:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	08 95       	ret

000009a0 <__subsf3>:
 9a0:	50 58       	subi	r21, 0x80	; 128

000009a2 <__addsf3>:
 9a2:	bb 27       	eor	r27, r27
 9a4:	aa 27       	eor	r26, r26
 9a6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__addsf3x>
 9aa:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_round>
 9ae:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_pscA>
 9b2:	38 f0       	brcs	.+14     	; 0x9c2 <__addsf3+0x20>
 9b4:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_pscB>
 9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__addsf3+0x20>
 9ba:	39 f4       	brne	.+14     	; 0x9ca <__addsf3+0x28>
 9bc:	9f 3f       	cpi	r25, 0xFF	; 255
 9be:	19 f4       	brne	.+6      	; 0x9c6 <__addsf3+0x24>
 9c0:	26 f4       	brtc	.+8      	; 0x9ca <__addsf3+0x28>
 9c2:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_nan>
 9c6:	0e f4       	brtc	.+2      	; 0x9ca <__addsf3+0x28>
 9c8:	e0 95       	com	r30
 9ca:	e7 fb       	bst	r30, 7
 9cc:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_inf>

000009d0 <__addsf3x>:
 9d0:	e9 2f       	mov	r30, r25
 9d2:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fp_split3>
 9d6:	58 f3       	brcs	.-42     	; 0x9ae <__addsf3+0xc>
 9d8:	ba 17       	cp	r27, r26
 9da:	62 07       	cpc	r22, r18
 9dc:	73 07       	cpc	r23, r19
 9de:	84 07       	cpc	r24, r20
 9e0:	95 07       	cpc	r25, r21
 9e2:	20 f0       	brcs	.+8      	; 0x9ec <__addsf3x+0x1c>
 9e4:	79 f4       	brne	.+30     	; 0xa04 <__addsf3x+0x34>
 9e6:	a6 f5       	brtc	.+104    	; 0xa50 <__addsf3x+0x80>
 9e8:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_zero>
 9ec:	0e f4       	brtc	.+2      	; 0x9f0 <__addsf3x+0x20>
 9ee:	e0 95       	com	r30
 9f0:	0b 2e       	mov	r0, r27
 9f2:	ba 2f       	mov	r27, r26
 9f4:	a0 2d       	mov	r26, r0
 9f6:	0b 01       	movw	r0, r22
 9f8:	b9 01       	movw	r22, r18
 9fa:	90 01       	movw	r18, r0
 9fc:	0c 01       	movw	r0, r24
 9fe:	ca 01       	movw	r24, r20
 a00:	a0 01       	movw	r20, r0
 a02:	11 24       	eor	r1, r1
 a04:	ff 27       	eor	r31, r31
 a06:	59 1b       	sub	r21, r25
 a08:	99 f0       	breq	.+38     	; 0xa30 <__addsf3x+0x60>
 a0a:	59 3f       	cpi	r21, 0xF9	; 249
 a0c:	50 f4       	brcc	.+20     	; 0xa22 <__addsf3x+0x52>
 a0e:	50 3e       	cpi	r21, 0xE0	; 224
 a10:	68 f1       	brcs	.+90     	; 0xa6c <__addsf3x+0x9c>
 a12:	1a 16       	cp	r1, r26
 a14:	f0 40       	sbci	r31, 0x00	; 0
 a16:	a2 2f       	mov	r26, r18
 a18:	23 2f       	mov	r18, r19
 a1a:	34 2f       	mov	r19, r20
 a1c:	44 27       	eor	r20, r20
 a1e:	58 5f       	subi	r21, 0xF8	; 248
 a20:	f3 cf       	rjmp	.-26     	; 0xa08 <__addsf3x+0x38>
 a22:	46 95       	lsr	r20
 a24:	37 95       	ror	r19
 a26:	27 95       	ror	r18
 a28:	a7 95       	ror	r26
 a2a:	f0 40       	sbci	r31, 0x00	; 0
 a2c:	53 95       	inc	r21
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__addsf3x+0x52>
 a30:	7e f4       	brtc	.+30     	; 0xa50 <__addsf3x+0x80>
 a32:	1f 16       	cp	r1, r31
 a34:	ba 0b       	sbc	r27, r26
 a36:	62 0b       	sbc	r22, r18
 a38:	73 0b       	sbc	r23, r19
 a3a:	84 0b       	sbc	r24, r20
 a3c:	ba f0       	brmi	.+46     	; 0xa6c <__addsf3x+0x9c>
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	a1 f0       	breq	.+40     	; 0xa6a <__addsf3x+0x9a>
 a42:	ff 0f       	add	r31, r31
 a44:	bb 1f       	adc	r27, r27
 a46:	66 1f       	adc	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	c2 f7       	brpl	.-16     	; 0xa3e <__addsf3x+0x6e>
 a4e:	0e c0       	rjmp	.+28     	; 0xa6c <__addsf3x+0x9c>
 a50:	ba 0f       	add	r27, r26
 a52:	62 1f       	adc	r22, r18
 a54:	73 1f       	adc	r23, r19
 a56:	84 1f       	adc	r24, r20
 a58:	48 f4       	brcc	.+18     	; 0xa6c <__addsf3x+0x9c>
 a5a:	87 95       	ror	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	b7 95       	ror	r27
 a62:	f7 95       	ror	r31
 a64:	9e 3f       	cpi	r25, 0xFE	; 254
 a66:	08 f0       	brcs	.+2      	; 0xa6a <__addsf3x+0x9a>
 a68:	b0 cf       	rjmp	.-160    	; 0x9ca <__addsf3+0x28>
 a6a:	93 95       	inc	r25
 a6c:	88 0f       	add	r24, r24
 a6e:	08 f0       	brcs	.+2      	; 0xa72 <__addsf3x+0xa2>
 a70:	99 27       	eor	r25, r25
 a72:	ee 0f       	add	r30, r30
 a74:	97 95       	ror	r25
 a76:	87 95       	ror	r24
 a78:	08 95       	ret

00000a7a <__fixunssfsi>:
 a7a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_splitA>
 a7e:	88 f0       	brcs	.+34     	; 0xaa2 <__fixunssfsi+0x28>
 a80:	9f 57       	subi	r25, 0x7F	; 127
 a82:	98 f0       	brcs	.+38     	; 0xaaa <__fixunssfsi+0x30>
 a84:	b9 2f       	mov	r27, r25
 a86:	99 27       	eor	r25, r25
 a88:	b7 51       	subi	r27, 0x17	; 23
 a8a:	b0 f0       	brcs	.+44     	; 0xab8 <__fixunssfsi+0x3e>
 a8c:	e1 f0       	breq	.+56     	; 0xac6 <__fixunssfsi+0x4c>
 a8e:	66 0f       	add	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	1a f0       	brmi	.+6      	; 0xa9e <__fixunssfsi+0x24>
 a98:	ba 95       	dec	r27
 a9a:	c9 f7       	brne	.-14     	; 0xa8e <__fixunssfsi+0x14>
 a9c:	14 c0       	rjmp	.+40     	; 0xac6 <__fixunssfsi+0x4c>
 a9e:	b1 30       	cpi	r27, 0x01	; 1
 aa0:	91 f0       	breq	.+36     	; 0xac6 <__fixunssfsi+0x4c>
 aa2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_zero>
 aa6:	b1 e0       	ldi	r27, 0x01	; 1
 aa8:	08 95       	ret
 aaa:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_zero>
 aae:	67 2f       	mov	r22, r23
 ab0:	78 2f       	mov	r23, r24
 ab2:	88 27       	eor	r24, r24
 ab4:	b8 5f       	subi	r27, 0xF8	; 248
 ab6:	39 f0       	breq	.+14     	; 0xac6 <__fixunssfsi+0x4c>
 ab8:	b9 3f       	cpi	r27, 0xF9	; 249
 aba:	cc f3       	brlt	.-14     	; 0xaae <__fixunssfsi+0x34>
 abc:	86 95       	lsr	r24
 abe:	77 95       	ror	r23
 ac0:	67 95       	ror	r22
 ac2:	b3 95       	inc	r27
 ac4:	d9 f7       	brne	.-10     	; 0xabc <__fixunssfsi+0x42>
 ac6:	3e f4       	brtc	.+14     	; 0xad6 <__fixunssfsi+0x5c>
 ac8:	90 95       	com	r25
 aca:	80 95       	com	r24
 acc:	70 95       	com	r23
 ace:	61 95       	neg	r22
 ad0:	7f 4f       	sbci	r23, 0xFF	; 255
 ad2:	8f 4f       	sbci	r24, 0xFF	; 255
 ad4:	9f 4f       	sbci	r25, 0xFF	; 255
 ad6:	08 95       	ret

00000ad8 <__floatunsisf>:
 ad8:	e8 94       	clt
 ada:	09 c0       	rjmp	.+18     	; 0xaee <__floatsisf+0x12>

00000adc <__floatsisf>:
 adc:	97 fb       	bst	r25, 7
 ade:	3e f4       	brtc	.+14     	; 0xaee <__floatsisf+0x12>
 ae0:	90 95       	com	r25
 ae2:	80 95       	com	r24
 ae4:	70 95       	com	r23
 ae6:	61 95       	neg	r22
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	99 23       	and	r25, r25
 af0:	a9 f0       	breq	.+42     	; 0xb1c <__floatsisf+0x40>
 af2:	f9 2f       	mov	r31, r25
 af4:	96 e9       	ldi	r25, 0x96	; 150
 af6:	bb 27       	eor	r27, r27
 af8:	93 95       	inc	r25
 afa:	f6 95       	lsr	r31
 afc:	87 95       	ror	r24
 afe:	77 95       	ror	r23
 b00:	67 95       	ror	r22
 b02:	b7 95       	ror	r27
 b04:	f1 11       	cpse	r31, r1
 b06:	f8 cf       	rjmp	.-16     	; 0xaf8 <__floatsisf+0x1c>
 b08:	fa f4       	brpl	.+62     	; 0xb48 <__floatsisf+0x6c>
 b0a:	bb 0f       	add	r27, r27
 b0c:	11 f4       	brne	.+4      	; 0xb12 <__floatsisf+0x36>
 b0e:	60 ff       	sbrs	r22, 0
 b10:	1b c0       	rjmp	.+54     	; 0xb48 <__floatsisf+0x6c>
 b12:	6f 5f       	subi	r22, 0xFF	; 255
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	16 c0       	rjmp	.+44     	; 0xb48 <__floatsisf+0x6c>
 b1c:	88 23       	and	r24, r24
 b1e:	11 f0       	breq	.+4      	; 0xb24 <__floatsisf+0x48>
 b20:	96 e9       	ldi	r25, 0x96	; 150
 b22:	11 c0       	rjmp	.+34     	; 0xb46 <__floatsisf+0x6a>
 b24:	77 23       	and	r23, r23
 b26:	21 f0       	breq	.+8      	; 0xb30 <__floatsisf+0x54>
 b28:	9e e8       	ldi	r25, 0x8E	; 142
 b2a:	87 2f       	mov	r24, r23
 b2c:	76 2f       	mov	r23, r22
 b2e:	05 c0       	rjmp	.+10     	; 0xb3a <__floatsisf+0x5e>
 b30:	66 23       	and	r22, r22
 b32:	71 f0       	breq	.+28     	; 0xb50 <__floatsisf+0x74>
 b34:	96 e8       	ldi	r25, 0x86	; 134
 b36:	86 2f       	mov	r24, r22
 b38:	70 e0       	ldi	r23, 0x00	; 0
 b3a:	60 e0       	ldi	r22, 0x00	; 0
 b3c:	2a f0       	brmi	.+10     	; 0xb48 <__floatsisf+0x6c>
 b3e:	9a 95       	dec	r25
 b40:	66 0f       	add	r22, r22
 b42:	77 1f       	adc	r23, r23
 b44:	88 1f       	adc	r24, r24
 b46:	da f7       	brpl	.-10     	; 0xb3e <__floatsisf+0x62>
 b48:	88 0f       	add	r24, r24
 b4a:	96 95       	lsr	r25
 b4c:	87 95       	ror	r24
 b4e:	97 f9       	bld	r25, 7
 b50:	08 95       	ret

00000b52 <__fp_inf>:
 b52:	97 f9       	bld	r25, 7
 b54:	9f 67       	ori	r25, 0x7F	; 127
 b56:	80 e8       	ldi	r24, 0x80	; 128
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	60 e0       	ldi	r22, 0x00	; 0
 b5c:	08 95       	ret

00000b5e <__fp_nan>:
 b5e:	9f ef       	ldi	r25, 0xFF	; 255
 b60:	80 ec       	ldi	r24, 0xC0	; 192
 b62:	08 95       	ret

00000b64 <__fp_pscA>:
 b64:	00 24       	eor	r0, r0
 b66:	0a 94       	dec	r0
 b68:	16 16       	cp	r1, r22
 b6a:	17 06       	cpc	r1, r23
 b6c:	18 06       	cpc	r1, r24
 b6e:	09 06       	cpc	r0, r25
 b70:	08 95       	ret

00000b72 <__fp_pscB>:
 b72:	00 24       	eor	r0, r0
 b74:	0a 94       	dec	r0
 b76:	12 16       	cp	r1, r18
 b78:	13 06       	cpc	r1, r19
 b7a:	14 06       	cpc	r1, r20
 b7c:	05 06       	cpc	r0, r21
 b7e:	08 95       	ret

00000b80 <__fp_round>:
 b80:	09 2e       	mov	r0, r25
 b82:	03 94       	inc	r0
 b84:	00 0c       	add	r0, r0
 b86:	11 f4       	brne	.+4      	; 0xb8c <__fp_round+0xc>
 b88:	88 23       	and	r24, r24
 b8a:	52 f0       	brmi	.+20     	; 0xba0 <__fp_round+0x20>
 b8c:	bb 0f       	add	r27, r27
 b8e:	40 f4       	brcc	.+16     	; 0xba0 <__fp_round+0x20>
 b90:	bf 2b       	or	r27, r31
 b92:	11 f4       	brne	.+4      	; 0xb98 <__fp_round+0x18>
 b94:	60 ff       	sbrs	r22, 0
 b96:	04 c0       	rjmp	.+8      	; 0xba0 <__fp_round+0x20>
 b98:	6f 5f       	subi	r22, 0xFF	; 255
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255
 b9c:	8f 4f       	sbci	r24, 0xFF	; 255
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ba0:	08 95       	ret

00000ba2 <__fp_split3>:
 ba2:	57 fd       	sbrc	r21, 7
 ba4:	90 58       	subi	r25, 0x80	; 128
 ba6:	44 0f       	add	r20, r20
 ba8:	55 1f       	adc	r21, r21
 baa:	59 f0       	breq	.+22     	; 0xbc2 <__fp_splitA+0x10>
 bac:	5f 3f       	cpi	r21, 0xFF	; 255
 bae:	71 f0       	breq	.+28     	; 0xbcc <__fp_splitA+0x1a>
 bb0:	47 95       	ror	r20

00000bb2 <__fp_splitA>:
 bb2:	88 0f       	add	r24, r24
 bb4:	97 fb       	bst	r25, 7
 bb6:	99 1f       	adc	r25, r25
 bb8:	61 f0       	breq	.+24     	; 0xbd2 <__fp_splitA+0x20>
 bba:	9f 3f       	cpi	r25, 0xFF	; 255
 bbc:	79 f0       	breq	.+30     	; 0xbdc <__fp_splitA+0x2a>
 bbe:	87 95       	ror	r24
 bc0:	08 95       	ret
 bc2:	12 16       	cp	r1, r18
 bc4:	13 06       	cpc	r1, r19
 bc6:	14 06       	cpc	r1, r20
 bc8:	55 1f       	adc	r21, r21
 bca:	f2 cf       	rjmp	.-28     	; 0xbb0 <__fp_split3+0xe>
 bcc:	46 95       	lsr	r20
 bce:	f1 df       	rcall	.-30     	; 0xbb2 <__fp_splitA>
 bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <__fp_splitA+0x30>
 bd2:	16 16       	cp	r1, r22
 bd4:	17 06       	cpc	r1, r23
 bd6:	18 06       	cpc	r1, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	f1 cf       	rjmp	.-30     	; 0xbbe <__fp_splitA+0xc>
 bdc:	86 95       	lsr	r24
 bde:	71 05       	cpc	r23, r1
 be0:	61 05       	cpc	r22, r1
 be2:	08 94       	sec
 be4:	08 95       	ret

00000be6 <__fp_zero>:
 be6:	e8 94       	clt

00000be8 <__fp_szero>:
 be8:	bb 27       	eor	r27, r27
 bea:	66 27       	eor	r22, r22
 bec:	77 27       	eor	r23, r23
 bee:	cb 01       	movw	r24, r22
 bf0:	97 f9       	bld	r25, 7
 bf2:	08 95       	ret

00000bf4 <__mulsf3>:
 bf4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3x>
 bf8:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_round>
 bfc:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_pscA>
 c00:	38 f0       	brcs	.+14     	; 0xc10 <__mulsf3+0x1c>
 c02:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_pscB>
 c06:	20 f0       	brcs	.+8      	; 0xc10 <__mulsf3+0x1c>
 c08:	95 23       	and	r25, r21
 c0a:	11 f0       	breq	.+4      	; 0xc10 <__mulsf3+0x1c>
 c0c:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_inf>
 c10:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_nan>
 c14:	11 24       	eor	r1, r1
 c16:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_szero>

00000c1a <__mulsf3x>:
 c1a:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fp_split3>
 c1e:	70 f3       	brcs	.-36     	; 0xbfc <__mulsf3+0x8>

00000c20 <__mulsf3_pse>:
 c20:	95 9f       	mul	r25, r21
 c22:	c1 f3       	breq	.-16     	; 0xc14 <__mulsf3+0x20>
 c24:	95 0f       	add	r25, r21
 c26:	50 e0       	ldi	r21, 0x00	; 0
 c28:	55 1f       	adc	r21, r21
 c2a:	62 9f       	mul	r22, r18
 c2c:	f0 01       	movw	r30, r0
 c2e:	72 9f       	mul	r23, r18
 c30:	bb 27       	eor	r27, r27
 c32:	f0 0d       	add	r31, r0
 c34:	b1 1d       	adc	r27, r1
 c36:	63 9f       	mul	r22, r19
 c38:	aa 27       	eor	r26, r26
 c3a:	f0 0d       	add	r31, r0
 c3c:	b1 1d       	adc	r27, r1
 c3e:	aa 1f       	adc	r26, r26
 c40:	64 9f       	mul	r22, r20
 c42:	66 27       	eor	r22, r22
 c44:	b0 0d       	add	r27, r0
 c46:	a1 1d       	adc	r26, r1
 c48:	66 1f       	adc	r22, r22
 c4a:	82 9f       	mul	r24, r18
 c4c:	22 27       	eor	r18, r18
 c4e:	b0 0d       	add	r27, r0
 c50:	a1 1d       	adc	r26, r1
 c52:	62 1f       	adc	r22, r18
 c54:	73 9f       	mul	r23, r19
 c56:	b0 0d       	add	r27, r0
 c58:	a1 1d       	adc	r26, r1
 c5a:	62 1f       	adc	r22, r18
 c5c:	83 9f       	mul	r24, r19
 c5e:	a0 0d       	add	r26, r0
 c60:	61 1d       	adc	r22, r1
 c62:	22 1f       	adc	r18, r18
 c64:	74 9f       	mul	r23, r20
 c66:	33 27       	eor	r19, r19
 c68:	a0 0d       	add	r26, r0
 c6a:	61 1d       	adc	r22, r1
 c6c:	23 1f       	adc	r18, r19
 c6e:	84 9f       	mul	r24, r20
 c70:	60 0d       	add	r22, r0
 c72:	21 1d       	adc	r18, r1
 c74:	82 2f       	mov	r24, r18
 c76:	76 2f       	mov	r23, r22
 c78:	6a 2f       	mov	r22, r26
 c7a:	11 24       	eor	r1, r1
 c7c:	9f 57       	subi	r25, 0x7F	; 127
 c7e:	50 40       	sbci	r21, 0x00	; 0
 c80:	9a f0       	brmi	.+38     	; 0xca8 <__mulsf3_pse+0x88>
 c82:	f1 f0       	breq	.+60     	; 0xcc0 <__mulsf3_pse+0xa0>
 c84:	88 23       	and	r24, r24
 c86:	4a f0       	brmi	.+18     	; 0xc9a <__mulsf3_pse+0x7a>
 c88:	ee 0f       	add	r30, r30
 c8a:	ff 1f       	adc	r31, r31
 c8c:	bb 1f       	adc	r27, r27
 c8e:	66 1f       	adc	r22, r22
 c90:	77 1f       	adc	r23, r23
 c92:	88 1f       	adc	r24, r24
 c94:	91 50       	subi	r25, 0x01	; 1
 c96:	50 40       	sbci	r21, 0x00	; 0
 c98:	a9 f7       	brne	.-22     	; 0xc84 <__mulsf3_pse+0x64>
 c9a:	9e 3f       	cpi	r25, 0xFE	; 254
 c9c:	51 05       	cpc	r21, r1
 c9e:	80 f0       	brcs	.+32     	; 0xcc0 <__mulsf3_pse+0xa0>
 ca0:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_inf>
 ca4:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_szero>
 ca8:	5f 3f       	cpi	r21, 0xFF	; 255
 caa:	e4 f3       	brlt	.-8      	; 0xca4 <__mulsf3_pse+0x84>
 cac:	98 3e       	cpi	r25, 0xE8	; 232
 cae:	d4 f3       	brlt	.-12     	; 0xca4 <__mulsf3_pse+0x84>
 cb0:	86 95       	lsr	r24
 cb2:	77 95       	ror	r23
 cb4:	67 95       	ror	r22
 cb6:	b7 95       	ror	r27
 cb8:	f7 95       	ror	r31
 cba:	e7 95       	ror	r30
 cbc:	9f 5f       	subi	r25, 0xFF	; 255
 cbe:	c1 f7       	brne	.-16     	; 0xcb0 <__mulsf3_pse+0x90>
 cc0:	fe 2b       	or	r31, r30
 cc2:	88 0f       	add	r24, r24
 cc4:	91 1d       	adc	r25, r1
 cc6:	96 95       	lsr	r25
 cc8:	87 95       	ror	r24
 cca:	97 f9       	bld	r25, 7
 ccc:	08 95       	ret

00000cce <eeprom_read_byte>:
 cce:	f9 99       	sbic	0x1f, 1	; 31
 cd0:	fe cf       	rjmp	.-4      	; 0xcce <eeprom_read_byte>
 cd2:	92 bd       	out	0x22, r25	; 34
 cd4:	81 bd       	out	0x21, r24	; 33
 cd6:	f8 9a       	sbi	0x1f, 0	; 31
 cd8:	99 27       	eor	r25, r25
 cda:	80 b5       	in	r24, 0x20	; 32
 cdc:	08 95       	ret

00000cde <eeprom_write_byte>:
 cde:	26 2f       	mov	r18, r22

00000ce0 <eeprom_write_r18>:
 ce0:	f9 99       	sbic	0x1f, 1	; 31
 ce2:	fe cf       	rjmp	.-4      	; 0xce0 <eeprom_write_r18>
 ce4:	1f ba       	out	0x1f, r1	; 31
 ce6:	92 bd       	out	0x22, r25	; 34
 ce8:	81 bd       	out	0x21, r24	; 33
 cea:	20 bd       	out	0x20, r18	; 32
 cec:	0f b6       	in	r0, 0x3f	; 63
 cee:	f8 94       	cli
 cf0:	fa 9a       	sbi	0x1f, 2	; 31
 cf2:	f9 9a       	sbi	0x1f, 1	; 31
 cf4:	0f be       	out	0x3f, r0	; 63
 cf6:	01 96       	adiw	r24, 0x01	; 1
 cf8:	08 95       	ret

00000cfa <_exit>:
 cfa:	f8 94       	cli

00000cfc <__stop_program>:
 cfc:	ff cf       	rjmp	.-2      	; 0xcfc <__stop_program>
