
proyecto_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000dfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d86  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000dfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001006  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  00001f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd9  00000000  00000000  0000281c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000033f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  00003598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d3  00000000  00000000  00003ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 31       	cpi	r26, 0x13	; 19
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  88:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
uint8_t switch_pot=0;
uint8_t mem_flag=0;

//CONFIGURACIONES
void setup(void){
	cli();
  90:	f8 94       	cli
	DDRC=0b00000000;
  92:	17 b8       	out	0x07, r1	; 7
	EICRA=0;
  94:	e9 e6       	ldi	r30, 0x69	; 105
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	10 82       	st	Z, r1
	EICRA|=(1<<ISC01);
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
	EIMSK=0,
  a0:	1d ba       	out	0x1d, r1	; 29
	EIMSK|=(1<<INT0);
  a2:	8d b3       	in	r24, 0x1d	; 29
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8d bb       	out	0x1d, r24	; 29
	PCICR=0;
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	PCICR |=(1<<PCIE1);
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);
  b4:	ec e6       	ldi	r30, 0x6C	; 108
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8f 60       	ori	r24, 0x0F	; 15
  bc:	80 83       	st	Z, r24
	sei();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <init_adc>:
}

void init_adc(void){
	ADMUX = 0;
  c2:	ac e7       	ldi	r26, 0x7C	; 124
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	1c 92       	st	X, r1
	ADCSRA=0;
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	10 82       	st	Z, r1
	
	// VCC=5V
	ADMUX |=(1<<REFS0);
  ce:	8c 91       	ld	r24, X
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	8c 93       	st	X, r24
	
	// Entrada 0 de MUX ADC0 para el prelab entonces no se cambian los bits de mux
	ADMUX |=(1<<ADLAR);
  d4:	8c 91       	ld	r24, X
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	8c 93       	st	X, r24
	
	//Encender ADC y  habilitar isr adc
	ADCSRA=0;
  da:	10 82       	st	Z, r1
	ADCSRA|=(1<<ADEN)|(1<<ADIE);
  dc:	80 81       	ld	r24, Z
  de:	88 68       	ori	r24, 0x88	; 136
  e0:	80 83       	st	Z, r24
	
	// preescaler = 16M/128=125k
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  e2:	80 81       	ld	r24, Z
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	80 83       	st	Z, r24
	
	//no se utilizara el estado B
	ADCSRB=0;
  e8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  ec:	08 95       	ret

000000ee <initUART9600>:
	//DIDRO=0;
}

void initUART9600(void){
	//configurar pines tx y rx
	DDRD &=~(1<<DDD0);//entrada
  ee:	8a b1       	in	r24, 0x0a	; 10
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD1);//salida Tx
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	8a b9       	out	0x0a, r24	; 10
	
	//configurar registro A modo fast u2x0 en 1
	UCSR0A=0;
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	UCSR0A|=(1<<U2X0);
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
	
	//configurar registro B, habilotar isr rx, bits para habilitar RX y TX
	UCSR0B=0;
 106:	e1 ec       	ldi	r30, 0xC1	; 193
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
	UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 10c:	80 81       	ld	r24, Z
 10e:	88 69       	ori	r24, 0x98	; 152
 110:	80 83       	st	Z, r24
	
	//Configurar registro C<Frame asincrono 8 bits de datos sin pariedad, 1 bit de stop
	UCSR0C=0;
 112:	e2 ec       	ldi	r30, 0xC2	; 194
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	10 82       	st	Z, r1
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 118:	80 81       	ld	r24, Z
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	80 83       	st	Z, r24
	
	//baudrate = 207 con % de error igual a 0.16% con 9600
	UBRR0=207;
 11e:	8f ec       	ldi	r24, 0xCF	; 207
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 126:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 12a:	08 95       	ret

0000012c <__vector_18>:
	
}

ISR(USART_RX_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
	buffRX=UDR0;
 138:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 13c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <buffRX>
	while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
 140:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 144:	85 ff       	sbrs	r24, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <__vector_18+0x14>
	valor_buff=buffRX;
 148:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <buffRX>
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_buff>
	if (valor_buff==48){
 150:	80 33       	cpi	r24, 0x30	; 48
 152:	49 f4       	brne	.+18     	; 0x166 <__vector_18+0x3a>
		modo++;
 154:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <modo>
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <modo>
		if (modo>=4){
 15e:	84 30       	cpi	r24, 0x04	; 4
 160:	10 f0       	brcs	.+4      	; 0x166 <__vector_18+0x3a>
			modo=0;
 162:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <modo>
		}
	}
	
	
}
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <main>:


//MAIN LOOP

int main(void){	
	CLKPR=(1<<CLKPCE);
 172:	e1 e6       	ldi	r30, 0x61	; 97
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	80 83       	st	Z, r24
	CLKPR=(1<<CLKPS0);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
	cli();
 17e:	f8 94       	cli
	initUART9600();
 180:	0e 94 77 00 	call	0xee	; 0xee <initUART9600>
	initPWM0(0,1024);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	74 e0       	ldi	r23, 0x04	; 4
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 00 04 	call	0x800	; 0x800 <initPWM0>
	initPWM1(0,1024);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	74 e0       	ldi	r23, 0x04	; 4
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 73 04 	call	0x8e6	; 0x8e6 <initPWM1>
	//initPWM2(0,1024);
	init_adc();
 198:	0e 94 61 00 	call	0xc2	; 0xc2 <init_adc>
	setup();
 19c:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	sei();
 1a0:	78 94       	sei
	EECR=0;
 1a2:	1f ba       	out	0x1f, r1	; 31
    /* Replace with your application code */
    while (1) 
    {	
		ADCSRA|=(1<<ADSC);
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 83       	st	Z, r24
		//int servos[4]={valor_pot1,valor_pot2,valor_pot3,valor_pot4};
		if (modo==0){
 1ae:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <modo>
 1b2:	81 11       	cpse	r24, r1
 1b4:	19 c0       	rjmp	.+50     	; 0x1e8 <main+0x76>
			//aquí se pueden mover los pots libremente
			PORTD&=~(1<<PORTD3);
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	87 7f       	andi	r24, 0xF7	; 247
 1ba:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD4);
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	8f 7e       	andi	r24, 0xEF	; 239
 1c0:	8b b9       	out	0x0b, r24	; 11
			updateDC1(valor_pot1,valor_pot2);
 1c2:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot2>
 1c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <valor_pot1>
 1ca:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <updateDC1>
			updateDC0(valor_pot3,valor_pot4);
 1ce:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot4>
 1d2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <valor_pot3>
 1d6:	0e 94 42 04 	call	0x884	; 0x884 <updateDC0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	8f e3       	ldi	r24, 0x3F	; 63
 1dc:	9c e9       	ldi	r25, 0x9C	; 156
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x6c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x72>
 1e4:	00 00       	nop
 1e6:	de cf       	rjmp	.-68     	; 0x1a4 <main+0x32>
			_delay_ms(10);
		}else if (modo==1){
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	39 f4       	brne	.+14     	; 0x1fa <main+0x88>
			//se guardan los valores de los pots a la eeprom (escribir)
			PORTD|=(1<<PORTD4);
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	80 61       	ori	r24, 0x10	; 16
 1f0:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD3);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	87 7f       	andi	r24, 0xF7	; 247
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	d5 cf       	rjmp	.-86     	; 0x1a4 <main+0x32>
		}else if(modo==2){
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	69 f4       	brne	.+26     	; 0x218 <main+0xa6>
			//modo leer eeprom
			PORTD|=(1<<PORTD3);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	88 60       	ori	r24, 0x08	; 8
 202:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD4);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8f 7e       	andi	r24, 0xEF	; 239
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	8f e3       	ldi	r24, 0x3F	; 63
 20c:	9c e9       	ldi	r25, 0x9C	; 156
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0x9c>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0xa2>
 214:	00 00       	nop
 216:	c6 cf       	rjmp	.-116    	; 0x1a4 <main+0x32>
			_delay_ms(10);
		}else if (modo==3){
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	21 f6       	brne	.-120    	; 0x1a4 <main+0x32>
			//modo=2, aquí se conecta con adafruit
			PORTD|=(1<<PORTD3)|(1<<PORTD4);	
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	88 61       	ori	r24, 0x18	; 24
 220:	8b b9       	out	0x0b, r24	; 11
 222:	c0 cf       	rjmp	.-128    	; 0x1a4 <main+0x32>

00000224 <__vector_1>:
   }



//INTERRUPCIONES
ISR(INT0_vect){
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
	modo++;
 230:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <modo>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <modo>
	if (modo>=4){
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	10 f0       	brcs	.+4      	; 0x242 <__vector_1+0x1e>
		modo=0;
 23e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <modo>
	}
}
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_4>:

ISR(PCINT1_vect){
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	//revisa si es la primera o segunda interrupción
	valor_pc=PINC;
 274:	86 b1       	in	r24, 0x06	; 6
	valor_pc=(valor_pc&0b00001111);
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <valor_pc>
	if (pulsador==0){
 27c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <pulsador>
 280:	91 11       	cpse	r25, r1
 282:	5e c2       	rjmp	.+1212   	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
		if ((modo==1)|(modo==2)){
 284:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <modo>
 288:	91 50       	subi	r25, 0x01	; 1
 28a:	92 30       	cpi	r25, 0x02	; 2
 28c:	b8 f5       	brcc	.+110    	; 0x2fc <__vector_4+0xae>
			if (valor_pc==0b00001110){
 28e:	8e 30       	cpi	r24, 0x0E	; 14
 290:	61 f4       	brne	.+24     	; 0x2aa <__vector_4+0x5c>
				PORTD|=(1<<PORTD7);
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	80 68       	ori	r24, 0x80	; 128
 296:	8b b9       	out	0x0b, r24	; 11
				posicion=1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 29e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pulsador>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pulsador>
 2a8:	29 c0       	rjmp	.+82     	; 0x2fc <__vector_4+0xae>
			}else if(valor_pc==0b00001101){
 2aa:	8d 30       	cpi	r24, 0x0D	; 13
 2ac:	61 f4       	brne	.+24     	; 0x2c6 <__vector_4+0x78>
				PORTD&=~(1<<PORTD7);
 2ae:	8b b1       	in	r24, 0x0b	; 11
 2b0:	8f 77       	andi	r24, 0x7F	; 127
 2b2:	8b b9       	out	0x0b, r24	; 11
				posicion=2;
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 2ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pulsador>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pulsador>
 2c4:	1b c0       	rjmp	.+54     	; 0x2fc <__vector_4+0xae>
			}else if(valor_pc==0b00001011){
 2c6:	8b 30       	cpi	r24, 0x0B	; 11
 2c8:	61 f4       	brne	.+24     	; 0x2e2 <__vector_4+0x94>
				PORTB|=(1<<PORTB0);
 2ca:	85 b1       	in	r24, 0x05	; 5
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	85 b9       	out	0x05, r24	; 5
				posicion=3;
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 2d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pulsador>
 2da:	8f 5f       	subi	r24, 0xFF	; 255
 2dc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pulsador>
 2e0:	0d c0       	rjmp	.+26     	; 0x2fc <__vector_4+0xae>
			}else if(valor_pc==0b00000111){
 2e2:	87 30       	cpi	r24, 0x07	; 7
 2e4:	59 f4       	brne	.+22     	; 0x2fc <__vector_4+0xae>
				PORTB&=~(1<<PORTB0);
 2e6:	85 b1       	in	r24, 0x05	; 5
 2e8:	8e 7f       	andi	r24, 0xFE	; 254
 2ea:	85 b9       	out	0x05, r24	; 5
				posicion=4;
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 2f2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pulsador>
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pulsador>
			}
		}
		if (modo==1){
 2fc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <modo>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <__vector_4+0xb8>
 304:	16 c1       	rjmp	.+556    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
			cli();
 306:	f8 94       	cli
			switch(posicion){
 308:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <posicion>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	09 f4       	brne	.+2      	; 0x312 <__vector_4+0xc4>
 310:	4d c0       	rjmp	.+154    	; 0x3ac <__vector_4+0x15e>
 312:	18 f4       	brcc	.+6      	; 0x31a <__vector_4+0xcc>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	41 f0       	breq	.+16     	; 0x328 <__vector_4+0xda>
 318:	15 c2       	rjmp	.+1066   	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	09 f4       	brne	.+2      	; 0x320 <__vector_4+0xd2>
 31e:	8b c0       	rjmp	.+278    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 320:	84 30       	cpi	r24, 0x04	; 4
 322:	09 f4       	brne	.+2      	; 0x326 <__vector_4+0xd8>
 324:	cd c0       	rjmp	.+410    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 326:	0e c2       	rjmp	.+1052   	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
				case 1:
					adr=0;
 328:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 32c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot1);
 330:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <valor_pot1>
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 33c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 340:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 34a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot2);
 34e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot2>
 352:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 356:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 35a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 364:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot3);
 368:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot3>
 36c:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 370:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 374:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 37e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot4);
 382:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot4>
 386:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr=0;
 38a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 38e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					//writetxtUART("Se guardo la posicion 1\n");
					break;
 392:	d8 c1       	rjmp	.+944    	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
				case 2:
					for (int i=0;i<5;i++){
						adr++;
 394:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 398:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 3a2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 3a6:	2f 5f       	subi	r18, 0xFF	; 255
 3a8:	3f 4f       	sbci	r19, 0xFF	; 255
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <__vector_4+0x162>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 3b0:	25 30       	cpi	r18, 0x05	; 5
 3b2:	31 05       	cpc	r19, r1
 3b4:	7c f3       	brlt	.-34     	; 0x394 <__vector_4+0x146>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 3b6:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <valor_pot1>
 3ba:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 3be:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 3c2:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 3c6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 3ca:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 3d4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot2);
 3d8:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot2>
 3dc:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 3e0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 3e4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 3ee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot3);
 3f2:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot3>
 3f6:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 3fa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 3fe:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 408:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot4);
 40c:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot4>
 410:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr=0;
 414:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 418:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					//writetxtUART("Se guardo la posicion 2\n");
					break;
 41c:	93 c1       	rjmp	.+806    	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
				case 3:
					for (int i=0;i<9;i++){
						adr++;
 41e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 422:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 42c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 430:	2f 5f       	subi	r18, 0xFF	; 255
 432:	3f 4f       	sbci	r19, 0xFF	; 255
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 43a:	29 30       	cpi	r18, 0x09	; 9
 43c:	31 05       	cpc	r19, r1
 43e:	7c f3       	brlt	.-34     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 440:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <valor_pot1>
 444:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 448:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 44c:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 450:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 454:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 45e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot2);
 462:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot2>
 466:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 46a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 46e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 478:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot3);
 47c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot3>
 480:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 484:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 488:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 492:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot4);
 496:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot4>
 49a:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr=0;
 49e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 4a2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					//writetxtUART("Se guardo la posicion 3\n");
					break;
 4a6:	4e c1       	rjmp	.+668    	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
				case 4:
					for (int i=0;i<13;i++){
						adr++;
 4a8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 4ac:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 4b6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 4ba:	2f 5f       	subi	r18, 0xFF	; 255
 4bc:	3f 4f       	sbci	r19, 0xFF	; 255
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					//writetxtUART("Se guardo la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 4c4:	2d 30       	cpi	r18, 0x0D	; 13
 4c6:	31 05       	cpc	r19, r1
 4c8:	7c f3       	brlt	.-34     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 4ca:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <valor_pot1>
 4ce:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 4d2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 4d6:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 4da:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 4de:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 4e8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot2);
 4ec:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot2>
 4f0:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 4f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 4f8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 502:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot3);
 506:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot3>
 50a:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr++;
 50e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 512:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 51c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					eeprom_write_byte(adr,valor_pot4);
 520:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot4>
 524:	0e 94 b3 06 	call	0xd66	; 0xd66 <eeprom_write_byte>
					adr=0;
 528:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 52c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					//writetxtUART("Se guardo la posicion 4\n");
					break;
 530:	09 c1       	rjmp	.+530    	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
				sei();
			posicion=0;
			}
		}else if(modo==2){
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	09 f0       	breq	.+2      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 536:	06 c1       	rjmp	.+524    	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
			cli();
 538:	f8 94       	cli
			switch(posicion){
 53a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <posicion>
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	09 f4       	brne	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 542:	44 c0       	rjmp	.+136    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
 544:	18 f4       	brcc	.+6      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	41 f0       	breq	.+16     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 54a:	ea c0       	rjmp	.+468    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
 54c:	83 30       	cpi	r24, 0x03	; 3
 54e:	09 f4       	brne	.+2      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 550:	7a c0       	rjmp	.+244    	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
 552:	84 30       	cpi	r24, 0x04	; 4
 554:	09 f4       	brne	.+2      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 556:	b4 c0       	rjmp	.+360    	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
 558:	e3 c0       	rjmp	.+454    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
				case 1:
					adr=0;
 55a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 55e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					valor_pot1_esc=eeprom_read_byte(adr);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 56a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <valor_pot1_esc>
					adr++;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 576:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 57a:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 57e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot2_esc>
					adr++;
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 58a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 58e:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 592:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot3_esc>
					adr++;
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 59e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 5a2:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 5a6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot4_esc>
					adr=0;
 5aa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 5ae:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					//writetxtUART("Mostrando la posicion 1\n");
					break;
 5b2:	b6 c0       	rjmp	.+364    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
				case 2:
					for (int i=0;i<5;i++){
						adr++;
 5b4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 5b8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 5c2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 5c6:	2f 5f       	subi	r18, 0xFF	; 255
 5c8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 5d0:	25 30       	cpi	r18, 0x05	; 5
 5d2:	31 05       	cpc	r19, r1
 5d4:	7c f3       	brlt	.-34     	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 5d6:	c0 91 07 01 	lds	r28, 0x0107	; 0x800107 <adr>
 5da:	d0 91 08 01 	lds	r29, 0x0108	; 0x800108 <adr+0x1>
 5de:	ce 01       	movw	r24, r28
 5e0:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 5e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <valor_pot1_esc>
					adr++;
 5e8:	21 96       	adiw	r28, 0x01	; 1
 5ea:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <adr+0x1>
 5ee:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 5f2:	ce 01       	movw	r24, r28
 5f4:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 5f8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot2_esc>
					adr++;
 5fc:	21 96       	adiw	r28, 0x01	; 1
 5fe:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <adr+0x1>
 602:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 606:	ce 01       	movw	r24, r28
 608:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 60c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot3_esc>
					adr++;
 610:	ce 01       	movw	r24, r28
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 618:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 61c:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 620:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot4_esc>
					adr=0;
 624:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 628:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					//writetxtUART("Mostrando la posicion 2\n");
					break;
 62c:	79 c0       	rjmp	.+242    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
				case 3:
					for (int i=0;i<9;i++){
						adr++;
 62e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 632:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 636:	01 96       	adiw	r24, 0x01	; 1
 638:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 63c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 640:	2f 5f       	subi	r18, 0xFF	; 255
 642:	3f 4f       	sbci	r19, 0xFF	; 255
 644:	02 c0       	rjmp	.+4      	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 64a:	29 30       	cpi	r18, 0x09	; 9
 64c:	31 05       	cpc	r19, r1
 64e:	7c f3       	brlt	.-34     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 650:	c0 91 07 01 	lds	r28, 0x0107	; 0x800107 <adr>
 654:	d0 91 08 01 	lds	r29, 0x0108	; 0x800108 <adr+0x1>
 658:	ce 01       	movw	r24, r28
 65a:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 65e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <valor_pot1_esc>
					adr++;
 662:	21 96       	adiw	r28, 0x01	; 1
 664:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <adr+0x1>
 668:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 66c:	ce 01       	movw	r24, r28
 66e:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 672:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot2_esc>
					adr++;
 676:	21 96       	adiw	r28, 0x01	; 1
 678:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <adr+0x1>
 67c:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 680:	ce 01       	movw	r24, r28
 682:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 686:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot3_esc>
					adr++;
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 692:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 696:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 69a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot4_esc>
					adr=0;
 69e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 6a2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					//writetxtUART("Mostrando la posicion 3\n");
					break;
 6a6:	3c c0       	rjmp	.+120    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
				case 4:
					for (int i=0;i<13;i++){
						adr++;
 6a8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <adr>
 6ac:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <adr+0x1>
 6b0:	01 96       	adiw	r24, 0x01	; 1
 6b2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 6b6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 6ba:	2f 5f       	subi	r18, 0xFF	; 255
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					//writetxtUART("Mostrando la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 6c4:	2d 30       	cpi	r18, 0x0D	; 13
 6c6:	31 05       	cpc	r19, r1
 6c8:	7c f3       	brlt	.-34     	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 6ca:	c0 91 07 01 	lds	r28, 0x0107	; 0x800107 <adr>
 6ce:	d0 91 08 01 	lds	r29, 0x0108	; 0x800108 <adr+0x1>
 6d2:	ce 01       	movw	r24, r28
 6d4:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 6d8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <valor_pot1_esc>
					adr++;
 6dc:	21 96       	adiw	r28, 0x01	; 1
 6de:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <adr+0x1>
 6e2:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 6e6:	ce 01       	movw	r24, r28
 6e8:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 6ec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot2_esc>
					adr++;
 6f0:	21 96       	adiw	r28, 0x01	; 1
 6f2:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <adr+0x1>
 6f6:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 6fa:	ce 01       	movw	r24, r28
 6fc:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 700:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot3_esc>
					adr++;
 704:	ce 01       	movw	r24, r28
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <adr+0x1>
 70c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 710:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeprom_read_byte>
 714:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot4_esc>
					adr=0;
 718:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <adr+0x1>
 71c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr>
					//writetxtUART("Mostrando la posicion 4\n");
					break;
			}
			sei();
 720:	78 94       	sei
			updateDC1(valor_pot1_esc,valor_pot2_esc);
 722:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <valor_pot2_esc>
 726:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <valor_pot1_esc>
 72a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <updateDC1>
			updateDC0(valor_pot3_esc,valor_pot4_esc);
 72e:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <valor_pot4_esc>
 732:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <valor_pot3_esc>
 736:	0e 94 42 04 	call	0x884	; 0x884 <updateDC0>
			posicion=0;
 73a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <posicion>
 73e:	02 c0       	rjmp	.+4      	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
		}
		//terminan if de modos	
	}else{
	pulsador=0;}
 740:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pulsador>
}
 744:	ff 91       	pop	r31
 746:	ef 91       	pop	r30
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	bf 91       	pop	r27
 74e:	af 91       	pop	r26
 750:	9f 91       	pop	r25
 752:	8f 91       	pop	r24
 754:	7f 91       	pop	r23
 756:	6f 91       	pop	r22
 758:	5f 91       	pop	r21
 75a:	4f 91       	pop	r20
 75c:	3f 91       	pop	r19
 75e:	2f 91       	pop	r18
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	0f 90       	pop	r0
 766:	1f 90       	pop	r1
 768:	18 95       	reti

0000076a <__vector_21>:

ISR(ADC_vect){
 76a:	1f 92       	push	r1
 76c:	0f 92       	push	r0
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	0f 92       	push	r0
 772:	11 24       	eor	r1, r1
 774:	8f 93       	push	r24
 776:	ef 93       	push	r30
 778:	ff 93       	push	r31
		switch_pot=(ADMUX&0x0F);
 77a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 77e:	8f 70       	andi	r24, 0x0F	; 15
 780:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//char mensaje[16];
		if(switch_pot==7){
 784:	87 30       	cpi	r24, 0x07	; 7
 786:	59 f4       	brne	.+22     	; 0x79e <__vector_21+0x34>
				valor_pot1=ADCH;
 788:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 78c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <valor_pot1>
				ADMUX=((ADMUX&0xF0)|6);
 790:	ec e7       	ldi	r30, 0x7C	; 124
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	80 7f       	andi	r24, 0xF0	; 240
 798:	86 60       	ori	r24, 0x06	; 6
 79a:	80 83       	st	Z, r24
 79c:	24 c0       	rjmp	.+72     	; 0x7e6 <__vector_21+0x7c>
			} else if(switch_pot==6){
 79e:	86 30       	cpi	r24, 0x06	; 6
 7a0:	59 f4       	brne	.+22     	; 0x7b8 <__vector_21+0x4e>
				valor_pot2=ADCH;
 7a2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 7a6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <valor_pot2>
				ADMUX=((ADMUX&0xF0)|5);
 7aa:	ec e7       	ldi	r30, 0x7C	; 124
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	80 7f       	andi	r24, 0xF0	; 240
 7b2:	85 60       	ori	r24, 0x05	; 5
 7b4:	80 83       	st	Z, r24
 7b6:	17 c0       	rjmp	.+46     	; 0x7e6 <__vector_21+0x7c>
			}else if(switch_pot==5){
 7b8:	85 30       	cpi	r24, 0x05	; 5
 7ba:	59 f4       	brne	.+22     	; 0x7d2 <__vector_21+0x68>
				valor_pot3=ADCH;
 7bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 7c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valor_pot3>
				ADMUX=((ADMUX&0xF0)|4);
 7c4:	ec e7       	ldi	r30, 0x7C	; 124
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	80 7f       	andi	r24, 0xF0	; 240
 7cc:	84 60       	ori	r24, 0x04	; 4
 7ce:	80 83       	st	Z, r24
 7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <__vector_21+0x7c>
			}else{
				valor_pot4=ADCH;
 7d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 7d6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <valor_pot4>
				ADMUX=((ADMUX&0xF0)|7);
 7da:	ec e7       	ldi	r30, 0x7C	; 124
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	80 7f       	andi	r24, 0xF0	; 240
 7e2:	87 60       	ori	r24, 0x07	; 7
 7e4:	80 83       	st	Z, r24
			}
		
		ADCSRA|=(1<<ADIF);//apagar bandera
 7e6:	ea e7       	ldi	r30, 0x7A	; 122
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	80 61       	ori	r24, 0x10	; 16
 7ee:	80 83       	st	Z, r24
}
 7f0:	ff 91       	pop	r31
 7f2:	ef 91       	pop	r30
 7f4:	8f 91       	pop	r24
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

00000800 <initPWM0>:
#include "pwm_0.h"
#include <avr/io.h>
#include <stdint.h>

void initPWM0(uint8_t invertido, uint16_t preescaler){
	DDRD|=(1<<DDD6)|(1<<DDD5);
 800:	9a b1       	in	r25, 0x0a	; 10
 802:	90 66       	ori	r25, 0x60	; 96
 804:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0A=0;
 806:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0;
 808:	15 bc       	out	0x25, r1	; 37
	
	if (invertido==1){
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	39 f4       	brne	.+14     	; 0x81c <initPWM0+0x1c>
		TCCR0A|=(1<<COM0A1)|(1<<COM0A0);
 80e:	84 b5       	in	r24, 0x24	; 36
 810:	80 6c       	ori	r24, 0xC0	; 192
 812:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<COM0B1)|(1<<COM0B0);
 814:	84 b5       	in	r24, 0x24	; 36
 816:	80 63       	ori	r24, 0x30	; 48
 818:	84 bd       	out	0x24, r24	; 36
 81a:	06 c0       	rjmp	.+12     	; 0x828 <initPWM0+0x28>
		}else{
		TCCR0A|=(1<<COM0A1);
 81c:	84 b5       	in	r24, 0x24	; 36
 81e:	80 68       	ori	r24, 0x80	; 128
 820:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<COM0B1);
 822:	84 b5       	in	r24, 0x24	; 36
 824:	80 62       	ori	r24, 0x20	; 32
 826:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |=(1<<WGM00)|(1<<WGM01);
 828:	84 b5       	in	r24, 0x24	; 36
 82a:	83 60       	ori	r24, 0x03	; 3
 82c:	84 bd       	out	0x24, r24	; 36
	//TCCR0B|=(1<<WGM02);
	
	switch (preescaler){
 82e:	60 34       	cpi	r22, 0x40	; 64
 830:	71 05       	cpc	r23, r1
 832:	c1 f0       	breq	.+48     	; 0x864 <initPWM0+0x64>
 834:	38 f4       	brcc	.+14     	; 0x844 <initPWM0+0x44>
 836:	61 15       	cp	r22, r1
 838:	71 05       	cpc	r23, r1
 83a:	61 f0       	breq	.+24     	; 0x854 <initPWM0+0x54>
 83c:	68 30       	cpi	r22, 0x08	; 8
 83e:	71 05       	cpc	r23, r1
 840:	69 f0       	breq	.+26     	; 0x85c <initPWM0+0x5c>
 842:	1c c0       	rjmp	.+56     	; 0x87c <initPWM0+0x7c>
 844:	61 15       	cp	r22, r1
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	78 07       	cpc	r23, r24
 84a:	81 f0       	breq	.+32     	; 0x86c <initPWM0+0x6c>
 84c:	61 15       	cp	r22, r1
 84e:	74 40       	sbci	r23, 0x04	; 4
 850:	89 f0       	breq	.+34     	; 0x874 <initPWM0+0x74>
 852:	14 c0       	rjmp	.+40     	; 0x87c <initPWM0+0x7c>
		case 0:
		TCCR0B |=(1<<CS00);
 854:	85 b5       	in	r24, 0x25	; 37
 856:	81 60       	ori	r24, 0x01	; 1
 858:	85 bd       	out	0x25, r24	; 37
		break;
 85a:	08 95       	ret
		case 8:
		TCCR0B |=(1<<CS01);
 85c:	85 b5       	in	r24, 0x25	; 37
 85e:	82 60       	ori	r24, 0x02	; 2
 860:	85 bd       	out	0x25, r24	; 37
		break;
 862:	08 95       	ret
		case 64:
		TCCR0B |=(1<<CS00)|(1<<CS01);
 864:	85 b5       	in	r24, 0x25	; 37
 866:	83 60       	ori	r24, 0x03	; 3
 868:	85 bd       	out	0x25, r24	; 37
		break;
 86a:	08 95       	ret
		case 256:
		TCCR0B |=(1<<CS02);
 86c:	85 b5       	in	r24, 0x25	; 37
 86e:	84 60       	ori	r24, 0x04	; 4
 870:	85 bd       	out	0x25, r24	; 37
		break;
 872:	08 95       	ret
		case 1024:
		TCCR0B |=(1<<CS00)|(1<<CS02); //preescaler de 1024 para un periodo máximo de 4 segundos
 874:	85 b5       	in	r24, 0x25	; 37
 876:	85 60       	ori	r24, 0x05	; 5
 878:	85 bd       	out	0x25, r24	; 37
		break;
 87a:	08 95       	ret
		default:
		TCCR0B|=(1<<CS00);
 87c:	85 b5       	in	r24, 0x25	; 37
 87e:	81 60       	ori	r24, 0x01	; 1
 880:	85 bd       	out	0x25, r24	; 37
 882:	08 95       	ret

00000884 <updateDC0>:
	}
	
}

void updateDC0(uint8_t duty_cycle,uint8_t duty_cycle2){
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
 888:	c6 2f       	mov	r28, r22
	uint8_t a;
	uint8_t a2;
	a=((0.035*duty_cycle)+4.67);
 88a:	68 2f       	mov	r22, r24
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 896:	29 e2       	ldi	r18, 0x29	; 41
 898:	3c e5       	ldi	r19, 0x5C	; 92
 89a:	4f e0       	ldi	r20, 0x0F	; 15
 89c:	5d e3       	ldi	r21, 0x3D	; 61
 89e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 8a2:	24 ea       	ldi	r18, 0xA4	; 164
 8a4:	30 e7       	ldi	r19, 0x70	; 112
 8a6:	45 e9       	ldi	r20, 0x95	; 149
 8a8:	50 e4       	ldi	r21, 0x40	; 64
 8aa:	0e 94 15 05 	call	0xa2a	; 0xa2a <__addsf3>
 8ae:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
 8b2:	d6 2f       	mov	r29, r22
	a2=((0.02*duty_cycle2)+4.67);
 8b4:	6c 2f       	mov	r22, r28
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 8c0:	2a e0       	ldi	r18, 0x0A	; 10
 8c2:	37 ed       	ldi	r19, 0xD7	; 215
 8c4:	43 ea       	ldi	r20, 0xA3	; 163
 8c6:	5c e3       	ldi	r21, 0x3C	; 60
 8c8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 8cc:	24 ea       	ldi	r18, 0xA4	; 164
 8ce:	30 e7       	ldi	r19, 0x70	; 112
 8d0:	45 e9       	ldi	r20, 0x95	; 149
 8d2:	50 e4       	ldi	r21, 0x40	; 64
 8d4:	0e 94 15 05 	call	0xa2a	; 0xa2a <__addsf3>
 8d8:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
	//pot2--> eyeballs-->135°
	OCR0A=a;
 8dc:	d7 bd       	out	0x27, r29	; 39
	//pot1--> boca-->45°
	OCR0B=a2;
 8de:	68 bd       	out	0x28, r22	; 40
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	08 95       	ret

000008e6 <initPWM1>:

#include "pwm_1.h"
uint8_t y=0;
uint8_t y2=0;
void initPWM1(uint8_t invertido, uint16_t preescaler){
	DDRB |=(1<<DDB1)|(1<<DDB2);
 8e6:	94 b1       	in	r25, 0x04	; 4
 8e8:	96 60       	ori	r25, 0x06	; 6
 8ea:	94 b9       	out	0x04, r25	; 4
	TCCR1A=0;
 8ec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0;
 8f0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	if (invertido==1){
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	49 f4       	brne	.+18     	; 0x90a <__stack+0xb>
		TCCR1A |=(1<<COM1A1)|(1<<COM1A0);//high
 8f8:	e0 e8       	ldi	r30, 0x80	; 128
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	80 6c       	ori	r24, 0xC0	; 192
 900:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1B1)|(1<<COM1B0);
 902:	80 81       	ld	r24, Z
 904:	80 63       	ori	r24, 0x30	; 48
 906:	80 83       	st	Z, r24
 908:	08 c0       	rjmp	.+16     	; 0x91a <__stack+0x1b>
		} else{
		TCCR1A |=(1<<COM1A1); //low
 90a:	e0 e8       	ldi	r30, 0x80	; 128
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	80 68       	ori	r24, 0x80	; 128
 912:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1B1);
 914:	80 81       	ld	r24, Z
 916:	80 62       	ori	r24, 0x20	; 32
 918:	80 83       	st	Z, r24
	}
	
	switch(preescaler){
 91a:	60 34       	cpi	r22, 0x40	; 64
 91c:	71 05       	cpc	r23, r1
 91e:	e1 f0       	breq	.+56     	; 0x958 <__stack+0x59>
 920:	38 f4       	brcc	.+14     	; 0x930 <__stack+0x31>
 922:	61 15       	cp	r22, r1
 924:	71 05       	cpc	r23, r1
 926:	61 f0       	breq	.+24     	; 0x940 <__stack+0x41>
 928:	68 30       	cpi	r22, 0x08	; 8
 92a:	71 05       	cpc	r23, r1
 92c:	79 f0       	breq	.+30     	; 0x94c <__stack+0x4d>
 92e:	26 c0       	rjmp	.+76     	; 0x97c <__stack+0x7d>
 930:	61 15       	cp	r22, r1
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	78 07       	cpc	r23, r24
 936:	b1 f0       	breq	.+44     	; 0x964 <__stack+0x65>
 938:	61 15       	cp	r22, r1
 93a:	74 40       	sbci	r23, 0x04	; 4
 93c:	c9 f0       	breq	.+50     	; 0x970 <__stack+0x71>
 93e:	1e c0       	rjmp	.+60     	; 0x97c <__stack+0x7d>
		case 0:
		TCCR1B |=(1<<CS10);
 940:	e1 e8       	ldi	r30, 0x81	; 129
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	81 60       	ori	r24, 0x01	; 1
 948:	80 83       	st	Z, r24
		break;
 94a:	1d c0       	rjmp	.+58     	; 0x986 <__stack+0x87>
		case 8:
		TCCR1B |=(1<<CS11);
 94c:	e1 e8       	ldi	r30, 0x81	; 129
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	82 60       	ori	r24, 0x02	; 2
 954:	80 83       	st	Z, r24
		break;
 956:	17 c0       	rjmp	.+46     	; 0x986 <__stack+0x87>
		case 64:
		TCCR1B |=(1<<CS10)|(1<<CS11);
 958:	e1 e8       	ldi	r30, 0x81	; 129
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	83 60       	ori	r24, 0x03	; 3
 960:	80 83       	st	Z, r24
		break;
 962:	11 c0       	rjmp	.+34     	; 0x986 <__stack+0x87>
		case 256:
		TCCR1B |=(1<<CS12);
 964:	e1 e8       	ldi	r30, 0x81	; 129
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	84 60       	ori	r24, 0x04	; 4
 96c:	80 83       	st	Z, r24
		break;
 96e:	0b c0       	rjmp	.+22     	; 0x986 <__stack+0x87>
		case 1024:
		TCCR1B |=(1<<CS12)|(1<<CS10); //preescaler de 1024 para un periodo máximo de 4 segundos
 970:	e1 e8       	ldi	r30, 0x81	; 129
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	85 60       	ori	r24, 0x05	; 5
 978:	80 83       	st	Z, r24
		break;
 97a:	05 c0       	rjmp	.+10     	; 0x986 <__stack+0x87>
		default:
		TCCR1B|=(1<<CS10);
 97c:	e1 e8       	ldi	r30, 0x81	; 129
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 81       	ld	r24, Z
 982:	81 60       	ori	r24, 0x01	; 1
 984:	80 83       	st	Z, r24
	}
	
	//FAST PWM 8 bits
	TCCR1A |=(1<<WGM11);
 986:	e0 e8       	ldi	r30, 0x80	; 128
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	82 60       	ori	r24, 0x02	; 2
 98e:	80 83       	st	Z, r24
	TCCR1B |=(1<<WGM12)|(1<<WGM12);
 990:	e1 e8       	ldi	r30, 0x81	; 129
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	88 60       	ori	r24, 0x08	; 8
 998:	80 83       	st	Z, r24
	
	ICR1=160;
 99a:	80 ea       	ldi	r24, 0xA0	; 160
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 9a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 9a6:	08 95       	ret

000009a8 <updateDC1>:
	
	
}


void updateDC1(uint8_t prc_duty, uint8_t prc_duty2){
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	d6 2f       	mov	r29, r22
	y=((0.027*prc_duty)+4.66);
 9ae:	68 2f       	mov	r22, r24
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 9ba:	2b e1       	ldi	r18, 0x1B	; 27
 9bc:	3f e2       	ldi	r19, 0x2F	; 47
 9be:	4d ed       	ldi	r20, 0xDD	; 221
 9c0:	5c e3       	ldi	r21, 0x3C	; 60
 9c2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 9c6:	28 eb       	ldi	r18, 0xB8	; 184
 9c8:	3e e1       	ldi	r19, 0x1E	; 30
 9ca:	45 e9       	ldi	r20, 0x95	; 149
 9cc:	50 e4       	ldi	r21, 0x40	; 64
 9ce:	0e 94 15 05 	call	0xa2a	; 0xa2a <__addsf3>
 9d2:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
 9d6:	c6 2f       	mov	r28, r22
 9d8:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <y>
	y2=((0.027*prc_duty2)+4.66);
 9dc:	6d 2f       	mov	r22, r29
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 9e8:	2b e1       	ldi	r18, 0x1B	; 27
 9ea:	3f e2       	ldi	r19, 0x2F	; 47
 9ec:	4d ed       	ldi	r20, 0xDD	; 221
 9ee:	5c e3       	ldi	r21, 0x3C	; 60
 9f0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__mulsf3>
 9f4:	28 eb       	ldi	r18, 0xB8	; 184
 9f6:	3e e1       	ldi	r19, 0x1E	; 30
 9f8:	45 e9       	ldi	r20, 0x95	; 149
 9fa:	50 e4       	ldi	r21, 0x40	; 64
 9fc:	0e 94 15 05 	call	0xa2a	; 0xa2a <__addsf3>
 a00:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
 a04:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <y2>
	//ambos eyelids van de 0 a 90°
	//OCR1A-->pot4 eyelid derecha
	OCR1A=y;
 a08:	6c 2f       	mov	r22, r28
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 a10:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	//OCR1B-->pot3 eyelid izquierda
	OCR1B=y2;
 a14:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <y2>
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 a1e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

00000a28 <__subsf3>:
 a28:	50 58       	subi	r21, 0x80	; 128

00000a2a <__addsf3>:
 a2a:	bb 27       	eor	r27, r27
 a2c:	aa 27       	eor	r26, r26
 a2e:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3x>
 a32:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_round>
 a36:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_pscA>
 a3a:	38 f0       	brcs	.+14     	; 0xa4a <__addsf3+0x20>
 a3c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_pscB>
 a40:	20 f0       	brcs	.+8      	; 0xa4a <__addsf3+0x20>
 a42:	39 f4       	brne	.+14     	; 0xa52 <__addsf3+0x28>
 a44:	9f 3f       	cpi	r25, 0xFF	; 255
 a46:	19 f4       	brne	.+6      	; 0xa4e <__addsf3+0x24>
 a48:	26 f4       	brtc	.+8      	; 0xa52 <__addsf3+0x28>
 a4a:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_nan>
 a4e:	0e f4       	brtc	.+2      	; 0xa52 <__addsf3+0x28>
 a50:	e0 95       	com	r30
 a52:	e7 fb       	bst	r30, 7
 a54:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_inf>

00000a58 <__addsf3x>:
 a58:	e9 2f       	mov	r30, r25
 a5a:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_split3>
 a5e:	58 f3       	brcs	.-42     	; 0xa36 <__addsf3+0xc>
 a60:	ba 17       	cp	r27, r26
 a62:	62 07       	cpc	r22, r18
 a64:	73 07       	cpc	r23, r19
 a66:	84 07       	cpc	r24, r20
 a68:	95 07       	cpc	r25, r21
 a6a:	20 f0       	brcs	.+8      	; 0xa74 <__addsf3x+0x1c>
 a6c:	79 f4       	brne	.+30     	; 0xa8c <__addsf3x+0x34>
 a6e:	a6 f5       	brtc	.+104    	; 0xad8 <__addsf3x+0x80>
 a70:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_zero>
 a74:	0e f4       	brtc	.+2      	; 0xa78 <__addsf3x+0x20>
 a76:	e0 95       	com	r30
 a78:	0b 2e       	mov	r0, r27
 a7a:	ba 2f       	mov	r27, r26
 a7c:	a0 2d       	mov	r26, r0
 a7e:	0b 01       	movw	r0, r22
 a80:	b9 01       	movw	r22, r18
 a82:	90 01       	movw	r18, r0
 a84:	0c 01       	movw	r0, r24
 a86:	ca 01       	movw	r24, r20
 a88:	a0 01       	movw	r20, r0
 a8a:	11 24       	eor	r1, r1
 a8c:	ff 27       	eor	r31, r31
 a8e:	59 1b       	sub	r21, r25
 a90:	99 f0       	breq	.+38     	; 0xab8 <__addsf3x+0x60>
 a92:	59 3f       	cpi	r21, 0xF9	; 249
 a94:	50 f4       	brcc	.+20     	; 0xaaa <__addsf3x+0x52>
 a96:	50 3e       	cpi	r21, 0xE0	; 224
 a98:	68 f1       	brcs	.+90     	; 0xaf4 <__addsf3x+0x9c>
 a9a:	1a 16       	cp	r1, r26
 a9c:	f0 40       	sbci	r31, 0x00	; 0
 a9e:	a2 2f       	mov	r26, r18
 aa0:	23 2f       	mov	r18, r19
 aa2:	34 2f       	mov	r19, r20
 aa4:	44 27       	eor	r20, r20
 aa6:	58 5f       	subi	r21, 0xF8	; 248
 aa8:	f3 cf       	rjmp	.-26     	; 0xa90 <__addsf3x+0x38>
 aaa:	46 95       	lsr	r20
 aac:	37 95       	ror	r19
 aae:	27 95       	ror	r18
 ab0:	a7 95       	ror	r26
 ab2:	f0 40       	sbci	r31, 0x00	; 0
 ab4:	53 95       	inc	r21
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__addsf3x+0x52>
 ab8:	7e f4       	brtc	.+30     	; 0xad8 <__addsf3x+0x80>
 aba:	1f 16       	cp	r1, r31
 abc:	ba 0b       	sbc	r27, r26
 abe:	62 0b       	sbc	r22, r18
 ac0:	73 0b       	sbc	r23, r19
 ac2:	84 0b       	sbc	r24, r20
 ac4:	ba f0       	brmi	.+46     	; 0xaf4 <__addsf3x+0x9c>
 ac6:	91 50       	subi	r25, 0x01	; 1
 ac8:	a1 f0       	breq	.+40     	; 0xaf2 <__addsf3x+0x9a>
 aca:	ff 0f       	add	r31, r31
 acc:	bb 1f       	adc	r27, r27
 ace:	66 1f       	adc	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	c2 f7       	brpl	.-16     	; 0xac6 <__addsf3x+0x6e>
 ad6:	0e c0       	rjmp	.+28     	; 0xaf4 <__addsf3x+0x9c>
 ad8:	ba 0f       	add	r27, r26
 ada:	62 1f       	adc	r22, r18
 adc:	73 1f       	adc	r23, r19
 ade:	84 1f       	adc	r24, r20
 ae0:	48 f4       	brcc	.+18     	; 0xaf4 <__addsf3x+0x9c>
 ae2:	87 95       	ror	r24
 ae4:	77 95       	ror	r23
 ae6:	67 95       	ror	r22
 ae8:	b7 95       	ror	r27
 aea:	f7 95       	ror	r31
 aec:	9e 3f       	cpi	r25, 0xFE	; 254
 aee:	08 f0       	brcs	.+2      	; 0xaf2 <__addsf3x+0x9a>
 af0:	b0 cf       	rjmp	.-160    	; 0xa52 <__addsf3+0x28>
 af2:	93 95       	inc	r25
 af4:	88 0f       	add	r24, r24
 af6:	08 f0       	brcs	.+2      	; 0xafa <__addsf3x+0xa2>
 af8:	99 27       	eor	r25, r25
 afa:	ee 0f       	add	r30, r30
 afc:	97 95       	ror	r25
 afe:	87 95       	ror	r24
 b00:	08 95       	ret

00000b02 <__fixunssfsi>:
 b02:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_splitA>
 b06:	88 f0       	brcs	.+34     	; 0xb2a <__fixunssfsi+0x28>
 b08:	9f 57       	subi	r25, 0x7F	; 127
 b0a:	98 f0       	brcs	.+38     	; 0xb32 <__fixunssfsi+0x30>
 b0c:	b9 2f       	mov	r27, r25
 b0e:	99 27       	eor	r25, r25
 b10:	b7 51       	subi	r27, 0x17	; 23
 b12:	b0 f0       	brcs	.+44     	; 0xb40 <__fixunssfsi+0x3e>
 b14:	e1 f0       	breq	.+56     	; 0xb4e <__fixunssfsi+0x4c>
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	1a f0       	brmi	.+6      	; 0xb26 <__fixunssfsi+0x24>
 b20:	ba 95       	dec	r27
 b22:	c9 f7       	brne	.-14     	; 0xb16 <__fixunssfsi+0x14>
 b24:	14 c0       	rjmp	.+40     	; 0xb4e <__fixunssfsi+0x4c>
 b26:	b1 30       	cpi	r27, 0x01	; 1
 b28:	91 f0       	breq	.+36     	; 0xb4e <__fixunssfsi+0x4c>
 b2a:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_zero>
 b2e:	b1 e0       	ldi	r27, 0x01	; 1
 b30:	08 95       	ret
 b32:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_zero>
 b36:	67 2f       	mov	r22, r23
 b38:	78 2f       	mov	r23, r24
 b3a:	88 27       	eor	r24, r24
 b3c:	b8 5f       	subi	r27, 0xF8	; 248
 b3e:	39 f0       	breq	.+14     	; 0xb4e <__fixunssfsi+0x4c>
 b40:	b9 3f       	cpi	r27, 0xF9	; 249
 b42:	cc f3       	brlt	.-14     	; 0xb36 <__fixunssfsi+0x34>
 b44:	86 95       	lsr	r24
 b46:	77 95       	ror	r23
 b48:	67 95       	ror	r22
 b4a:	b3 95       	inc	r27
 b4c:	d9 f7       	brne	.-10     	; 0xb44 <__fixunssfsi+0x42>
 b4e:	3e f4       	brtc	.+14     	; 0xb5e <__fixunssfsi+0x5c>
 b50:	90 95       	com	r25
 b52:	80 95       	com	r24
 b54:	70 95       	com	r23
 b56:	61 95       	neg	r22
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	08 95       	ret

00000b60 <__floatunsisf>:
 b60:	e8 94       	clt
 b62:	09 c0       	rjmp	.+18     	; 0xb76 <__floatsisf+0x12>

00000b64 <__floatsisf>:
 b64:	97 fb       	bst	r25, 7
 b66:	3e f4       	brtc	.+14     	; 0xb76 <__floatsisf+0x12>
 b68:	90 95       	com	r25
 b6a:	80 95       	com	r24
 b6c:	70 95       	com	r23
 b6e:	61 95       	neg	r22
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	99 23       	and	r25, r25
 b78:	a9 f0       	breq	.+42     	; 0xba4 <__floatsisf+0x40>
 b7a:	f9 2f       	mov	r31, r25
 b7c:	96 e9       	ldi	r25, 0x96	; 150
 b7e:	bb 27       	eor	r27, r27
 b80:	93 95       	inc	r25
 b82:	f6 95       	lsr	r31
 b84:	87 95       	ror	r24
 b86:	77 95       	ror	r23
 b88:	67 95       	ror	r22
 b8a:	b7 95       	ror	r27
 b8c:	f1 11       	cpse	r31, r1
 b8e:	f8 cf       	rjmp	.-16     	; 0xb80 <__floatsisf+0x1c>
 b90:	fa f4       	brpl	.+62     	; 0xbd0 <__floatsisf+0x6c>
 b92:	bb 0f       	add	r27, r27
 b94:	11 f4       	brne	.+4      	; 0xb9a <__floatsisf+0x36>
 b96:	60 ff       	sbrs	r22, 0
 b98:	1b c0       	rjmp	.+54     	; 0xbd0 <__floatsisf+0x6c>
 b9a:	6f 5f       	subi	r22, 0xFF	; 255
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <__floatsisf+0x6c>
 ba4:	88 23       	and	r24, r24
 ba6:	11 f0       	breq	.+4      	; 0xbac <__floatsisf+0x48>
 ba8:	96 e9       	ldi	r25, 0x96	; 150
 baa:	11 c0       	rjmp	.+34     	; 0xbce <__floatsisf+0x6a>
 bac:	77 23       	and	r23, r23
 bae:	21 f0       	breq	.+8      	; 0xbb8 <__floatsisf+0x54>
 bb0:	9e e8       	ldi	r25, 0x8E	; 142
 bb2:	87 2f       	mov	r24, r23
 bb4:	76 2f       	mov	r23, r22
 bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__floatsisf+0x5e>
 bb8:	66 23       	and	r22, r22
 bba:	71 f0       	breq	.+28     	; 0xbd8 <__floatsisf+0x74>
 bbc:	96 e8       	ldi	r25, 0x86	; 134
 bbe:	86 2f       	mov	r24, r22
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	60 e0       	ldi	r22, 0x00	; 0
 bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__floatsisf+0x6c>
 bc6:	9a 95       	dec	r25
 bc8:	66 0f       	add	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	da f7       	brpl	.-10     	; 0xbc6 <__floatsisf+0x62>
 bd0:	88 0f       	add	r24, r24
 bd2:	96 95       	lsr	r25
 bd4:	87 95       	ror	r24
 bd6:	97 f9       	bld	r25, 7
 bd8:	08 95       	ret

00000bda <__fp_inf>:
 bda:	97 f9       	bld	r25, 7
 bdc:	9f 67       	ori	r25, 0x7F	; 127
 bde:	80 e8       	ldi	r24, 0x80	; 128
 be0:	70 e0       	ldi	r23, 0x00	; 0
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	08 95       	ret

00000be6 <__fp_nan>:
 be6:	9f ef       	ldi	r25, 0xFF	; 255
 be8:	80 ec       	ldi	r24, 0xC0	; 192
 bea:	08 95       	ret

00000bec <__fp_pscA>:
 bec:	00 24       	eor	r0, r0
 bee:	0a 94       	dec	r0
 bf0:	16 16       	cp	r1, r22
 bf2:	17 06       	cpc	r1, r23
 bf4:	18 06       	cpc	r1, r24
 bf6:	09 06       	cpc	r0, r25
 bf8:	08 95       	ret

00000bfa <__fp_pscB>:
 bfa:	00 24       	eor	r0, r0
 bfc:	0a 94       	dec	r0
 bfe:	12 16       	cp	r1, r18
 c00:	13 06       	cpc	r1, r19
 c02:	14 06       	cpc	r1, r20
 c04:	05 06       	cpc	r0, r21
 c06:	08 95       	ret

00000c08 <__fp_round>:
 c08:	09 2e       	mov	r0, r25
 c0a:	03 94       	inc	r0
 c0c:	00 0c       	add	r0, r0
 c0e:	11 f4       	brne	.+4      	; 0xc14 <__fp_round+0xc>
 c10:	88 23       	and	r24, r24
 c12:	52 f0       	brmi	.+20     	; 0xc28 <__fp_round+0x20>
 c14:	bb 0f       	add	r27, r27
 c16:	40 f4       	brcc	.+16     	; 0xc28 <__fp_round+0x20>
 c18:	bf 2b       	or	r27, r31
 c1a:	11 f4       	brne	.+4      	; 0xc20 <__fp_round+0x18>
 c1c:	60 ff       	sbrs	r22, 0
 c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__fp_round+0x20>
 c20:	6f 5f       	subi	r22, 0xFF	; 255
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	08 95       	ret

00000c2a <__fp_split3>:
 c2a:	57 fd       	sbrc	r21, 7
 c2c:	90 58       	subi	r25, 0x80	; 128
 c2e:	44 0f       	add	r20, r20
 c30:	55 1f       	adc	r21, r21
 c32:	59 f0       	breq	.+22     	; 0xc4a <__fp_splitA+0x10>
 c34:	5f 3f       	cpi	r21, 0xFF	; 255
 c36:	71 f0       	breq	.+28     	; 0xc54 <__fp_splitA+0x1a>
 c38:	47 95       	ror	r20

00000c3a <__fp_splitA>:
 c3a:	88 0f       	add	r24, r24
 c3c:	97 fb       	bst	r25, 7
 c3e:	99 1f       	adc	r25, r25
 c40:	61 f0       	breq	.+24     	; 0xc5a <__fp_splitA+0x20>
 c42:	9f 3f       	cpi	r25, 0xFF	; 255
 c44:	79 f0       	breq	.+30     	; 0xc64 <__fp_splitA+0x2a>
 c46:	87 95       	ror	r24
 c48:	08 95       	ret
 c4a:	12 16       	cp	r1, r18
 c4c:	13 06       	cpc	r1, r19
 c4e:	14 06       	cpc	r1, r20
 c50:	55 1f       	adc	r21, r21
 c52:	f2 cf       	rjmp	.-28     	; 0xc38 <__fp_split3+0xe>
 c54:	46 95       	lsr	r20
 c56:	f1 df       	rcall	.-30     	; 0xc3a <__fp_splitA>
 c58:	08 c0       	rjmp	.+16     	; 0xc6a <__fp_splitA+0x30>
 c5a:	16 16       	cp	r1, r22
 c5c:	17 06       	cpc	r1, r23
 c5e:	18 06       	cpc	r1, r24
 c60:	99 1f       	adc	r25, r25
 c62:	f1 cf       	rjmp	.-30     	; 0xc46 <__fp_splitA+0xc>
 c64:	86 95       	lsr	r24
 c66:	71 05       	cpc	r23, r1
 c68:	61 05       	cpc	r22, r1
 c6a:	08 94       	sec
 c6c:	08 95       	ret

00000c6e <__fp_zero>:
 c6e:	e8 94       	clt

00000c70 <__fp_szero>:
 c70:	bb 27       	eor	r27, r27
 c72:	66 27       	eor	r22, r22
 c74:	77 27       	eor	r23, r23
 c76:	cb 01       	movw	r24, r22
 c78:	97 f9       	bld	r25, 7
 c7a:	08 95       	ret

00000c7c <__mulsf3>:
 c7c:	0e 94 51 06 	call	0xca2	; 0xca2 <__mulsf3x>
 c80:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_round>
 c84:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_pscA>
 c88:	38 f0       	brcs	.+14     	; 0xc98 <__mulsf3+0x1c>
 c8a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_pscB>
 c8e:	20 f0       	brcs	.+8      	; 0xc98 <__mulsf3+0x1c>
 c90:	95 23       	and	r25, r21
 c92:	11 f0       	breq	.+4      	; 0xc98 <__mulsf3+0x1c>
 c94:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_inf>
 c98:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_nan>
 c9c:	11 24       	eor	r1, r1
 c9e:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_szero>

00000ca2 <__mulsf3x>:
 ca2:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_split3>
 ca6:	70 f3       	brcs	.-36     	; 0xc84 <__mulsf3+0x8>

00000ca8 <__mulsf3_pse>:
 ca8:	95 9f       	mul	r25, r21
 caa:	c1 f3       	breq	.-16     	; 0xc9c <__mulsf3+0x20>
 cac:	95 0f       	add	r25, r21
 cae:	50 e0       	ldi	r21, 0x00	; 0
 cb0:	55 1f       	adc	r21, r21
 cb2:	62 9f       	mul	r22, r18
 cb4:	f0 01       	movw	r30, r0
 cb6:	72 9f       	mul	r23, r18
 cb8:	bb 27       	eor	r27, r27
 cba:	f0 0d       	add	r31, r0
 cbc:	b1 1d       	adc	r27, r1
 cbe:	63 9f       	mul	r22, r19
 cc0:	aa 27       	eor	r26, r26
 cc2:	f0 0d       	add	r31, r0
 cc4:	b1 1d       	adc	r27, r1
 cc6:	aa 1f       	adc	r26, r26
 cc8:	64 9f       	mul	r22, r20
 cca:	66 27       	eor	r22, r22
 ccc:	b0 0d       	add	r27, r0
 cce:	a1 1d       	adc	r26, r1
 cd0:	66 1f       	adc	r22, r22
 cd2:	82 9f       	mul	r24, r18
 cd4:	22 27       	eor	r18, r18
 cd6:	b0 0d       	add	r27, r0
 cd8:	a1 1d       	adc	r26, r1
 cda:	62 1f       	adc	r22, r18
 cdc:	73 9f       	mul	r23, r19
 cde:	b0 0d       	add	r27, r0
 ce0:	a1 1d       	adc	r26, r1
 ce2:	62 1f       	adc	r22, r18
 ce4:	83 9f       	mul	r24, r19
 ce6:	a0 0d       	add	r26, r0
 ce8:	61 1d       	adc	r22, r1
 cea:	22 1f       	adc	r18, r18
 cec:	74 9f       	mul	r23, r20
 cee:	33 27       	eor	r19, r19
 cf0:	a0 0d       	add	r26, r0
 cf2:	61 1d       	adc	r22, r1
 cf4:	23 1f       	adc	r18, r19
 cf6:	84 9f       	mul	r24, r20
 cf8:	60 0d       	add	r22, r0
 cfa:	21 1d       	adc	r18, r1
 cfc:	82 2f       	mov	r24, r18
 cfe:	76 2f       	mov	r23, r22
 d00:	6a 2f       	mov	r22, r26
 d02:	11 24       	eor	r1, r1
 d04:	9f 57       	subi	r25, 0x7F	; 127
 d06:	50 40       	sbci	r21, 0x00	; 0
 d08:	9a f0       	brmi	.+38     	; 0xd30 <__mulsf3_pse+0x88>
 d0a:	f1 f0       	breq	.+60     	; 0xd48 <__mulsf3_pse+0xa0>
 d0c:	88 23       	and	r24, r24
 d0e:	4a f0       	brmi	.+18     	; 0xd22 <__mulsf3_pse+0x7a>
 d10:	ee 0f       	add	r30, r30
 d12:	ff 1f       	adc	r31, r31
 d14:	bb 1f       	adc	r27, r27
 d16:	66 1f       	adc	r22, r22
 d18:	77 1f       	adc	r23, r23
 d1a:	88 1f       	adc	r24, r24
 d1c:	91 50       	subi	r25, 0x01	; 1
 d1e:	50 40       	sbci	r21, 0x00	; 0
 d20:	a9 f7       	brne	.-22     	; 0xd0c <__mulsf3_pse+0x64>
 d22:	9e 3f       	cpi	r25, 0xFE	; 254
 d24:	51 05       	cpc	r21, r1
 d26:	80 f0       	brcs	.+32     	; 0xd48 <__mulsf3_pse+0xa0>
 d28:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_inf>
 d2c:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_szero>
 d30:	5f 3f       	cpi	r21, 0xFF	; 255
 d32:	e4 f3       	brlt	.-8      	; 0xd2c <__mulsf3_pse+0x84>
 d34:	98 3e       	cpi	r25, 0xE8	; 232
 d36:	d4 f3       	brlt	.-12     	; 0xd2c <__mulsf3_pse+0x84>
 d38:	86 95       	lsr	r24
 d3a:	77 95       	ror	r23
 d3c:	67 95       	ror	r22
 d3e:	b7 95       	ror	r27
 d40:	f7 95       	ror	r31
 d42:	e7 95       	ror	r30
 d44:	9f 5f       	subi	r25, 0xFF	; 255
 d46:	c1 f7       	brne	.-16     	; 0xd38 <__mulsf3_pse+0x90>
 d48:	fe 2b       	or	r31, r30
 d4a:	88 0f       	add	r24, r24
 d4c:	91 1d       	adc	r25, r1
 d4e:	96 95       	lsr	r25
 d50:	87 95       	ror	r24
 d52:	97 f9       	bld	r25, 7
 d54:	08 95       	ret

00000d56 <eeprom_read_byte>:
 d56:	f9 99       	sbic	0x1f, 1	; 31
 d58:	fe cf       	rjmp	.-4      	; 0xd56 <eeprom_read_byte>
 d5a:	92 bd       	out	0x22, r25	; 34
 d5c:	81 bd       	out	0x21, r24	; 33
 d5e:	f8 9a       	sbi	0x1f, 0	; 31
 d60:	99 27       	eor	r25, r25
 d62:	80 b5       	in	r24, 0x20	; 32
 d64:	08 95       	ret

00000d66 <eeprom_write_byte>:
 d66:	26 2f       	mov	r18, r22

00000d68 <eeprom_write_r18>:
 d68:	f9 99       	sbic	0x1f, 1	; 31
 d6a:	fe cf       	rjmp	.-4      	; 0xd68 <eeprom_write_r18>
 d6c:	1f ba       	out	0x1f, r1	; 31
 d6e:	92 bd       	out	0x22, r25	; 34
 d70:	81 bd       	out	0x21, r24	; 33
 d72:	20 bd       	out	0x20, r18	; 32
 d74:	0f b6       	in	r0, 0x3f	; 63
 d76:	f8 94       	cli
 d78:	fa 9a       	sbi	0x1f, 2	; 31
 d7a:	f9 9a       	sbi	0x1f, 1	; 31
 d7c:	0f be       	out	0x3f, r0	; 63
 d7e:	01 96       	adiw	r24, 0x01	; 1
 d80:	08 95       	ret

00000d82 <_exit>:
 d82:	f8 94       	cli

00000d84 <__stop_program>:
 d84:	ff cf       	rjmp	.-2      	; 0xd84 <__stop_program>
