
proyecto_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d42  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  00000db6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fff  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bdb  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000033d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004de  00000000  00000000  00003aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 93 03 	jmp	0x726	; 0x726 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  88:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
		UDR0=texto[i];//cuando i nulo se acaba
	}
}
  90:	f8 94       	cli
  92:	17 b8       	out	0x07, r1	; 7
  94:	e9 e6       	ldi	r30, 0x69	; 105
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	10 82       	st	Z, r1
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
  a0:	1d ba       	out	0x1d, r1	; 29
  a2:	8d b3       	in	r24, 0x1d	; 29
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8d bb       	out	0x1d, r24	; 29
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
  b4:	ec e6       	ldi	r30, 0x6C	; 108
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8f 60       	ori	r24, 0x0F	; 15
  bc:	80 83       	st	Z, r24
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <init_adc>:
  c2:	ac e7       	ldi	r26, 0x7C	; 124
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	1c 92       	st	X, r1
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	10 82       	st	Z, r1
  ce:	8c 91       	ld	r24, X
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	8c 93       	st	X, r24
  d4:	8c 91       	ld	r24, X
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	8c 93       	st	X, r24
  da:	10 82       	st	Z, r1
  dc:	80 81       	ld	r24, Z
  de:	88 68       	ori	r24, 0x88	; 136
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	80 83       	st	Z, r24
  e8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  ec:	08 95       	ret

000000ee <initUART9600>:
  ee:	8a b1       	in	r24, 0x0a	; 10
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	8a b9       	out	0x0a, r24	; 10
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	8a b9       	out	0x0a, r24	; 10
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	e1 ec       	ldi	r30, 0xC1	; 193
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
 10c:	80 81       	ld	r24, Z
 10e:	88 69       	ori	r24, 0x98	; 152
 110:	80 83       	st	Z, r24
 112:	e2 ec       	ldi	r30, 0xC2	; 194
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	10 82       	st	Z, r1
 118:	80 81       	ld	r24, Z
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	80 83       	st	Z, r24
 11e:	8f ec       	ldi	r24, 0xCF	; 207
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 126:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 12a:	08 95       	ret

0000012c <main>:

//MAIN LOOP

int main(void){	
	CLKPR=(1<<CLKPCE);
 12c:	e1 e6       	ldi	r30, 0x61	; 97
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	80 83       	st	Z, r24
	CLKPR=(1<<CLKPS0);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 83       	st	Z, r24
	cli();
 138:	f8 94       	cli
	initUART9600();
 13a:	0e 94 77 00 	call	0xee	; 0xee <initUART9600>
	initPWM0(0,1024);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	74 e0       	ldi	r23, 0x04	; 4
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 de 03 	call	0x7bc	; 0x7bc <initPWM0>
	initPWM1(0,1024);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	74 e0       	ldi	r23, 0x04	; 4
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <initPWM1>
	//initPWM2(0,1024);
	init_adc();
 152:	0e 94 61 00 	call	0xc2	; 0xc2 <init_adc>
	setup();
 156:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	sei();
 15a:	78 94       	sei
	EECR=0;
 15c:	1f ba       	out	0x1f, r1	; 31
    /* Replace with your application code */
    while (1) 
    {	
		ADCSRA|=(1<<ADSC);
 15e:	ea e7       	ldi	r30, 0x7A	; 122
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 64       	ori	r24, 0x40	; 64
 166:	80 83       	st	Z, r24
		//int servos[4]={valor_pot1,valor_pot2,valor_pot3,valor_pot4};
		if (modo==0){
 168:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <modo>
 16c:	81 11       	cpse	r24, r1
 16e:	19 c0       	rjmp	.+50     	; 0x1a2 <main+0x76>
			//aquí se pueden mover los pots libremente
			PORTD&=~(1<<PORTD3);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD4);
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	8f 7e       	andi	r24, 0xEF	; 239
 17a:	8b b9       	out	0x0b, r24	; 11
			updateDC1(valor_pot1,valor_pot2);
 17c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 180:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <valor_pot1>
 184:	0e 94 b2 04 	call	0x964	; 0x964 <updateDC1>
			updateDC0(valor_pot3,valor_pot4);
 188:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 18c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <valor_pot3>
 190:	0e 94 20 04 	call	0x840	; 0x840 <updateDC0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9c e9       	ldi	r25, 0x9C	; 156
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x6c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x72>
 19e:	00 00       	nop
 1a0:	de cf       	rjmp	.-68     	; 0x15e <main+0x32>
			_delay_ms(10);
		}else if (modo==1){
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	39 f4       	brne	.+14     	; 0x1b4 <main+0x88>
			//se guardan los valores de los pots a la eeprom (escribir)
			PORTD|=(1<<PORTD4);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD3);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	d5 cf       	rjmp	.-86     	; 0x15e <main+0x32>
		}else if(modo==2){
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	c9 f4       	brne	.+50     	; 0x1ea <main+0xbe>
			//modo leer eeprom
			PORTD|=(1<<PORTD3);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD4);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	8f 7e       	andi	r24, 0xEF	; 239
 1c2:	8b b9       	out	0x0b, r24	; 11
			updateDC1(valor_pot1_esc,valor_pot2_esc);
 1c4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <valor_pot2_esc>
 1c8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <valor_pot1_esc>
 1cc:	0e 94 b2 04 	call	0x964	; 0x964 <updateDC1>
			updateDC0(valor_pot3_esc,valor_pot4_esc);
 1d0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <valor_pot4_esc>
 1d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <valor_pot3_esc>
 1d8:	0e 94 20 04 	call	0x840	; 0x840 <updateDC0>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9c e9       	ldi	r25, 0x9C	; 156
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0xb4>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0xba>
 1e6:	00 00       	nop
 1e8:	ba cf       	rjmp	.-140    	; 0x15e <main+0x32>
			_delay_ms(10);
		}else if (modo==3){
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <main+0xc4>
 1ee:	b7 cf       	rjmp	.-146    	; 0x15e <main+0x32>
			//modo=2, aquí se conecta con adafruit
			PORTD|=(1<<PORTD3)|(1<<PORTD4);
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	88 61       	ori	r24, 0x18	; 24
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	b3 cf       	rjmp	.-154    	; 0x15e <main+0x32>

000001f8 <__vector_1>:
    }
}


//INTERRUPCIONES
ISR(INT0_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	8f 93       	push	r24
	modo++;
 204:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <modo>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <modo>
	if (modo>=4){
 20e:	84 30       	cpi	r24, 0x04	; 4
 210:	10 f0       	brcs	.+4      	; 0x216 <__vector_1+0x1e>
		modo=0;
 212:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <modo>
	}
}
 216:	8f 91       	pop	r24
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_4>:

ISR(PCINT1_vect){
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	6f 93       	push	r22
 236:	7f 93       	push	r23
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	//revisa si es la primera o segunda interrupción
	valor_pc=PINC;
 248:	86 b1       	in	r24, 0x06	; 6
	valor_pc=(valor_pc&0b00001111);
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <valor_pc>
	if (pulsador==0){
 250:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <pulsador>
 254:	91 11       	cpse	r25, r1
 256:	52 c2       	rjmp	.+1188   	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
		if ((modo==1)|(modo==2)){
 258:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <modo>
 25c:	91 50       	subi	r25, 0x01	; 1
 25e:	92 30       	cpi	r25, 0x02	; 2
 260:	b8 f5       	brcc	.+110    	; 0x2d0 <__vector_4+0xae>
			if (valor_pc==0b00001110){
 262:	8e 30       	cpi	r24, 0x0E	; 14
 264:	61 f4       	brne	.+24     	; 0x27e <__vector_4+0x5c>
				PORTD|=(1<<PORTD7);
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	8b b9       	out	0x0b, r24	; 11
				posicion=1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 272:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsador>
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pulsador>
 27c:	29 c0       	rjmp	.+82     	; 0x2d0 <__vector_4+0xae>
			}else if(valor_pc==0b00001101){
 27e:	8d 30       	cpi	r24, 0x0D	; 13
 280:	61 f4       	brne	.+24     	; 0x29a <__vector_4+0x78>
				PORTD&=~(1<<PORTD7);
 282:	8b b1       	in	r24, 0x0b	; 11
 284:	8f 77       	andi	r24, 0x7F	; 127
 286:	8b b9       	out	0x0b, r24	; 11
				posicion=2;
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 28e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsador>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pulsador>
 298:	1b c0       	rjmp	.+54     	; 0x2d0 <__vector_4+0xae>
			}else if(valor_pc==0b00001011){
 29a:	8b 30       	cpi	r24, 0x0B	; 11
 29c:	61 f4       	brne	.+24     	; 0x2b6 <__vector_4+0x94>
				PORTB|=(1<<PORTB0);
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	85 b9       	out	0x05, r24	; 5
				posicion=3;
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 2aa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsador>
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pulsador>
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <__vector_4+0xae>
			}else if(valor_pc==0b00000111){
 2b6:	87 30       	cpi	r24, 0x07	; 7
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <__vector_4+0xae>
				PORTB&=~(1<<PORTB0);
 2ba:	85 b1       	in	r24, 0x05	; 5
 2bc:	8e 7f       	andi	r24, 0xFE	; 254
 2be:	85 b9       	out	0x05, r24	; 5
				posicion=4;
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <posicion>
				pulsador++;
 2c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pulsador>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pulsador>
			}
		}
		if (modo==1){
 2d0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <modo>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	09 f0       	breq	.+2      	; 0x2da <__vector_4+0xb8>
 2d8:	16 c1       	rjmp	.+556    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
			cli();
 2da:	f8 94       	cli
			switch(posicion){
 2dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <posicion>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <__vector_4+0xc4>
 2e4:	4d c0       	rjmp	.+154    	; 0x380 <__vector_4+0x15e>
 2e6:	18 f4       	brcc	.+6      	; 0x2ee <__vector_4+0xcc>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	41 f0       	breq	.+16     	; 0x2fc <__vector_4+0xda>
 2ec:	09 c2       	rjmp	.+1042   	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <__vector_4+0xd2>
 2f2:	8b c0       	rjmp	.+278    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	09 f4       	brne	.+2      	; 0x2fa <__vector_4+0xd8>
 2f8:	cd c0       	rjmp	.+410    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 2fa:	02 c2       	rjmp	.+1028   	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
				case 1:
					adr=0;
 2fc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 300:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot1);
 304:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot1>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 310:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 314:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 31e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot2);
 322:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 326:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 32a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 32e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 338:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot3);
 33c:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot3>
 340:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 344:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 348:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 352:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
 356:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 35a:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr=0;
 35e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 362:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					break;
 366:	cc c1       	rjmp	.+920    	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
				case 2:
					for (int i=0;i<5;i++){
						adr++;
 368:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 36c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 376:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					adr++;
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					break;
				case 2:
					for (int i=0;i<5;i++){
 37a:	2f 5f       	subi	r18, 0xFF	; 255
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__vector_4+0x162>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
					adr++;
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					break;
				case 2:
					for (int i=0;i<5;i++){
 384:	25 30       	cpi	r18, 0x05	; 5
 386:	31 05       	cpc	r19, r1
 388:	7c f3       	brlt	.-34     	; 0x368 <__vector_4+0x146>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 38a:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot1>
 38e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 392:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 396:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 39a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 39e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 3a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot2);
 3ac:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 3b0:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 3b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 3b8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 3c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot3);
 3c6:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot3>
 3ca:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 3ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 3d2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 3dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
 3e0:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 3e4:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr=0;
 3e8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 3ec:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					break;
 3f0:	87 c1       	rjmp	.+782    	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
				case 3:
					for (int i=0;i<9;i++){
						adr++;
 3f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 3f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 400:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					adr++;
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					break;
				case 3:
					for (int i=0;i<9;i++){
 404:	2f 5f       	subi	r18, 0xFF	; 255
 406:	3f 4f       	sbci	r19, 0xFF	; 255
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
					adr++;
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					break;
				case 3:
					for (int i=0;i<9;i++){
 40e:	29 30       	cpi	r18, 0x09	; 9
 410:	31 05       	cpc	r19, r1
 412:	7c f3       	brlt	.-34     	; 0x3f2 <__vector_4+0x1d0>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 414:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot1>
 418:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 41c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 420:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 424:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 428:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 432:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot2);
 436:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 43a:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 43e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 442:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 44c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot3);
 450:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot3>
 454:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 458:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 45c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 466:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
 46a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 46e:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr=0;
 472:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 476:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					break;
 47a:	42 c1       	rjmp	.+644    	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
				case 4:
					for (int i=0;i<13;i++){
						adr++;
 47c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 480:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 48a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					adr++;
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					break;
				case 4:
					for (int i=0;i<13;i++){
 48e:	2f 5f       	subi	r18, 0xFF	; 255
 490:	3f 4f       	sbci	r19, 0xFF	; 255
 492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
					adr++;
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					break;
				case 4:
					for (int i=0;i<13;i++){
 498:	2d 30       	cpi	r18, 0x0D	; 13
 49a:	31 05       	cpc	r19, r1
 49c:	7c f3       	brlt	.-34     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 49e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <valor_pot1>
 4a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 4a6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 4aa:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 4ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 4b2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 4bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot2);
 4c0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <valor_pot2>
 4c4:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 4c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 4cc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 4d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot3);
 4da:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <valor_pot3>
 4de:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr++;
 4e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 4e6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 4f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					eeprom_write_byte(adr,valor_pot4);
 4f4:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <valor_pot4>
 4f8:	0e 94 91 06 	call	0xd22	; 0xd22 <eeprom_write_byte>
					adr=0;
 4fc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 500:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					break;
 504:	fd c0       	rjmp	.+506    	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
				sei();
			posicion=0;
			}
		}else if(modo==2){
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	09 f0       	breq	.+2      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 50a:	fa c0       	rjmp	.+500    	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
			cli();
 50c:	f8 94       	cli
			switch(posicion){
 50e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <posicion>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	09 f4       	brne	.+2      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 516:	44 c0       	rjmp	.+136    	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 518:	18 f4       	brcc	.+6      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	41 f0       	breq	.+16     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 51e:	ea c0       	rjmp	.+468    	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
 520:	83 30       	cpi	r24, 0x03	; 3
 522:	09 f4       	brne	.+2      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 524:	7a c0       	rjmp	.+244    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 526:	84 30       	cpi	r24, 0x04	; 4
 528:	09 f4       	brne	.+2      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 52a:	b4 c0       	rjmp	.+360    	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
 52c:	e3 c0       	rjmp	.+454    	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
				case 1:
					adr=0;
 52e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 532:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					valor_pot1_esc=eeprom_read_byte(adr);
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 53e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot1_esc>
					adr++;
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 54a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 54e:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 552:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot2_esc>
					adr++;
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 55e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 562:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 566:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot3_esc>
					adr++;
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 572:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 576:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 57a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_pot4_esc>
					adr=0;
 57e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 582:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					break;
 586:	b6 c0       	rjmp	.+364    	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
				case 2:
					for (int i=0;i<5;i++){
						adr++;
 588:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 58c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 596:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					adr++;
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					break;
				case 2:
					for (int i=0;i<5;i++){
 59a:	2f 5f       	subi	r18, 0xFF	; 255
 59c:	3f 4f       	sbci	r19, 0xFF	; 255
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	30 e0       	ldi	r19, 0x00	; 0
					adr++;
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					break;
				case 2:
					for (int i=0;i<5;i++){
 5a4:	25 30       	cpi	r18, 0x05	; 5
 5a6:	31 05       	cpc	r19, r1
 5a8:	7c f3       	brlt	.-34     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 5aa:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <adr>
 5ae:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <adr+0x1>
 5b2:	ce 01       	movw	r24, r28
 5b4:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 5b8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot1_esc>
					adr++;
 5bc:	21 96       	adiw	r28, 0x01	; 1
 5be:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 5c2:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 5c6:	ce 01       	movw	r24, r28
 5c8:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 5cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot2_esc>
					adr++;
 5d0:	21 96       	adiw	r28, 0x01	; 1
 5d2:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 5d6:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 5da:	ce 01       	movw	r24, r28
 5dc:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 5e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot3_esc>
					adr++;
 5e4:	ce 01       	movw	r24, r28
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 5ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 5f0:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 5f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_pot4_esc>
					adr=0;
 5f8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 5fc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					adr=0;
					break;
 600:	79 c0       	rjmp	.+242    	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
				case 3:
					for (int i=0;i<9;i++){
						adr++;
 602:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 606:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 610:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					adr=0;
					break;
				case 3:
					for (int i=0;i<9;i++){
 614:	2f 5f       	subi	r18, 0xFF	; 255
 616:	3f 4f       	sbci	r19, 0xFF	; 255
 618:	02 c0       	rjmp	.+4      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 61a:	20 e0       	ldi	r18, 0x00	; 0
 61c:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					adr=0;
					break;
				case 3:
					for (int i=0;i<9;i++){
 61e:	29 30       	cpi	r18, 0x09	; 9
 620:	31 05       	cpc	r19, r1
 622:	7c f3       	brlt	.-34     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 624:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <adr>
 628:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <adr+0x1>
 62c:	ce 01       	movw	r24, r28
 62e:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 632:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot1_esc>
					adr++;
 636:	21 96       	adiw	r28, 0x01	; 1
 638:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 63c:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 640:	ce 01       	movw	r24, r28
 642:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 646:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot2_esc>
					adr++;
 64a:	21 96       	adiw	r28, 0x01	; 1
 64c:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 650:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 654:	ce 01       	movw	r24, r28
 656:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 65a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot3_esc>
					adr++;
 65e:	ce 01       	movw	r24, r28
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 666:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 66a:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 66e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_pot4_esc>
					adr=0;
 672:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 676:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					adr=0;
					break;
 67a:	3c c0       	rjmp	.+120    	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
				case 4:
					for (int i=0;i<13;i++){
						adr++;
 67c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adr>
 680:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adr+0x1>
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 68a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					adr=0;
					break;
				case 4:
					for (int i=0;i<13;i++){
 68e:	2f 5f       	subi	r18, 0xFF	; 255
 690:	3f 4f       	sbci	r19, 0xFF	; 255
 692:	02 c0       	rjmp	.+4      	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 694:	20 e0       	ldi	r18, 0x00	; 0
 696:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					adr=0;
					break;
				case 4:
					for (int i=0;i<13;i++){
 698:	2d 30       	cpi	r18, 0x0D	; 13
 69a:	31 05       	cpc	r19, r1
 69c:	7c f3       	brlt	.-34     	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 69e:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <adr>
 6a2:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <adr+0x1>
 6a6:	ce 01       	movw	r24, r28
 6a8:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 6ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_pot1_esc>
					adr++;
 6b0:	21 96       	adiw	r28, 0x01	; 1
 6b2:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 6b6:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 6ba:	ce 01       	movw	r24, r28
 6bc:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 6c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_pot2_esc>
					adr++;
 6c4:	21 96       	adiw	r28, 0x01	; 1
 6c6:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <adr+0x1>
 6ca:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 6ce:	ce 01       	movw	r24, r28
 6d0:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 6d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_pot3_esc>
					adr++;
 6d8:	ce 01       	movw	r24, r28
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adr+0x1>
 6e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 6e4:	0e 94 89 06 	call	0xd12	; 0xd12 <eeprom_read_byte>
 6e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_pot4_esc>
					adr=0;
 6ec:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <adr+0x1>
 6f0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adr>
					break;
			}
			sei();
 6f4:	78 94       	sei
			posicion=0;
 6f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <posicion>
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
		}
		//terminan if de modos	
	}else{
	pulsador=0;}
 6fc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pulsador>
}
 700:	ff 91       	pop	r31
 702:	ef 91       	pop	r30
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	bf 91       	pop	r27
 70a:	af 91       	pop	r26
 70c:	9f 91       	pop	r25
 70e:	8f 91       	pop	r24
 710:	7f 91       	pop	r23
 712:	6f 91       	pop	r22
 714:	5f 91       	pop	r21
 716:	4f 91       	pop	r20
 718:	3f 91       	pop	r19
 71a:	2f 91       	pop	r18
 71c:	0f 90       	pop	r0
 71e:	0f be       	out	0x3f, r0	; 63
 720:	0f 90       	pop	r0
 722:	1f 90       	pop	r1
 724:	18 95       	reti

00000726 <__vector_21>:

ISR(ADC_vect){
 726:	1f 92       	push	r1
 728:	0f 92       	push	r0
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	0f 92       	push	r0
 72e:	11 24       	eor	r1, r1
 730:	8f 93       	push	r24
 732:	ef 93       	push	r30
 734:	ff 93       	push	r31
		switch_pot=(ADMUX&0x0F);
 736:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 73a:	8f 70       	andi	r24, 0x0F	; 15
 73c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if(switch_pot==7){
 740:	87 30       	cpi	r24, 0x07	; 7
 742:	59 f4       	brne	.+22     	; 0x75a <__vector_21+0x34>
			valor_pot1=ADCH;
 744:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 748:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <valor_pot1>
			ADMUX=((ADMUX&0xF0)|6);
 74c:	ec e7       	ldi	r30, 0x7C	; 124
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	80 7f       	andi	r24, 0xF0	; 240
 754:	86 60       	ori	r24, 0x06	; 6
 756:	80 83       	st	Z, r24
 758:	24 c0       	rjmp	.+72     	; 0x7a2 <__vector_21+0x7c>
			} else if(switch_pot==6){
 75a:	86 30       	cpi	r24, 0x06	; 6
 75c:	59 f4       	brne	.+22     	; 0x774 <__vector_21+0x4e>
			valor_pot2=ADCH;
 75e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 762:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valor_pot2>
			ADMUX=((ADMUX&0xF0)|5);
 766:	ec e7       	ldi	r30, 0x7C	; 124
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	80 7f       	andi	r24, 0xF0	; 240
 76e:	85 60       	ori	r24, 0x05	; 5
 770:	80 83       	st	Z, r24
 772:	17 c0       	rjmp	.+46     	; 0x7a2 <__vector_21+0x7c>
			}else if(switch_pot==5){
 774:	85 30       	cpi	r24, 0x05	; 5
 776:	59 f4       	brne	.+22     	; 0x78e <__vector_21+0x68>
			valor_pot3=ADCH;
 778:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 77c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <valor_pot3>
			ADMUX=((ADMUX&0xF0)|4);
 780:	ec e7       	ldi	r30, 0x7C	; 124
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	80 7f       	andi	r24, 0xF0	; 240
 788:	84 60       	ori	r24, 0x04	; 4
 78a:	80 83       	st	Z, r24
 78c:	0a c0       	rjmp	.+20     	; 0x7a2 <__vector_21+0x7c>
			}else{
			valor_pot4=ADCH;
 78e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 792:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <valor_pot4>
			ADMUX=((ADMUX&0xF0)|7);
 796:	ec e7       	ldi	r30, 0x7C	; 124
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	80 7f       	andi	r24, 0xF0	; 240
 79e:	87 60       	ori	r24, 0x07	; 7
 7a0:	80 83       	st	Z, r24
		}
		
		ADCSRA|=(1<<ADIF);//apagar bandera
 7a2:	ea e7       	ldi	r30, 0x7A	; 122
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	80 61       	ori	r24, 0x10	; 16
 7aa:	80 83       	st	Z, r24
}
 7ac:	ff 91       	pop	r31
 7ae:	ef 91       	pop	r30
 7b0:	8f 91       	pop	r24
 7b2:	0f 90       	pop	r0
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <initPWM0>:
#include "pwm_0.h"
#include <avr/io.h>
#include <stdint.h>

void initPWM0(uint8_t invertido, uint16_t preescaler){
	DDRD|=(1<<DDD6)|(1<<DDD5);
 7bc:	9a b1       	in	r25, 0x0a	; 10
 7be:	90 66       	ori	r25, 0x60	; 96
 7c0:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0A=0;
 7c2:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0;
 7c4:	15 bc       	out	0x25, r1	; 37
	
	if (invertido==1){
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	39 f4       	brne	.+14     	; 0x7d8 <initPWM0+0x1c>
		TCCR0A|=(1<<COM0A1)|(1<<COM0A0);
 7ca:	84 b5       	in	r24, 0x24	; 36
 7cc:	80 6c       	ori	r24, 0xC0	; 192
 7ce:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<COM0B1)|(1<<COM0B0);
 7d0:	84 b5       	in	r24, 0x24	; 36
 7d2:	80 63       	ori	r24, 0x30	; 48
 7d4:	84 bd       	out	0x24, r24	; 36
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <initPWM0+0x28>
		}else{
		TCCR0A|=(1<<COM0A1);
 7d8:	84 b5       	in	r24, 0x24	; 36
 7da:	80 68       	ori	r24, 0x80	; 128
 7dc:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<COM0B1);
 7de:	84 b5       	in	r24, 0x24	; 36
 7e0:	80 62       	ori	r24, 0x20	; 32
 7e2:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |=(1<<WGM00)|(1<<WGM01);
 7e4:	84 b5       	in	r24, 0x24	; 36
 7e6:	83 60       	ori	r24, 0x03	; 3
 7e8:	84 bd       	out	0x24, r24	; 36
	
	switch (preescaler){
 7ea:	60 34       	cpi	r22, 0x40	; 64
 7ec:	71 05       	cpc	r23, r1
 7ee:	c1 f0       	breq	.+48     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7f0:	38 f4       	brcc	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
 7f2:	61 15       	cp	r22, r1
 7f4:	71 05       	cpc	r23, r1
 7f6:	61 f0       	breq	.+24     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7f8:	68 30       	cpi	r22, 0x08	; 8
 7fa:	71 05       	cpc	r23, r1
 7fc:	69 f0       	breq	.+26     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7fe:	1c c0       	rjmp	.+56     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 800:	61 15       	cp	r22, r1
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	78 07       	cpc	r23, r24
 806:	81 f0       	breq	.+32     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 808:	61 15       	cp	r22, r1
 80a:	74 40       	sbci	r23, 0x04	; 4
 80c:	89 f0       	breq	.+34     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 80e:	14 c0       	rjmp	.+40     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		case 0:
		TCCR0B |=(1<<CS00);
 810:	85 b5       	in	r24, 0x25	; 37
 812:	81 60       	ori	r24, 0x01	; 1
 814:	85 bd       	out	0x25, r24	; 37
		break;
 816:	08 95       	ret
		case 8:
		TCCR0B |=(1<<CS01);
 818:	85 b5       	in	r24, 0x25	; 37
 81a:	82 60       	ori	r24, 0x02	; 2
 81c:	85 bd       	out	0x25, r24	; 37
		break;
 81e:	08 95       	ret
		case 64:
		TCCR0B |=(1<<CS00)|(1<<CS01);
 820:	85 b5       	in	r24, 0x25	; 37
 822:	83 60       	ori	r24, 0x03	; 3
 824:	85 bd       	out	0x25, r24	; 37
		break;
 826:	08 95       	ret
		case 256:
		TCCR0B |=(1<<CS02);
 828:	85 b5       	in	r24, 0x25	; 37
 82a:	84 60       	ori	r24, 0x04	; 4
 82c:	85 bd       	out	0x25, r24	; 37
		break;
 82e:	08 95       	ret
		case 1024:
		TCCR0B |=(1<<CS00)|(1<<CS02); //preescaler de 1024 para un periodo máximo de 4 segundos
 830:	85 b5       	in	r24, 0x25	; 37
 832:	85 60       	ori	r24, 0x05	; 5
 834:	85 bd       	out	0x25, r24	; 37
		break;
 836:	08 95       	ret
		default:
		TCCR0B|=(1<<CS00);
 838:	85 b5       	in	r24, 0x25	; 37
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	85 bd       	out	0x25, r24	; 37
 83e:	08 95       	ret

00000840 <updateDC0>:
	}
	
}

void updateDC0(uint8_t duty_cycle,uint8_t duty_cycle2){
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	c6 2f       	mov	r28, r22
	uint8_t a;
	uint8_t a2;
	a=((0.05*duty_cycle)+8);
 846:	68 2f       	mov	r22, r24
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 90 05 	call	0xb20	; 0xb20 <__floatsisf>
 852:	2d ec       	ldi	r18, 0xCD	; 205
 854:	3c ec       	ldi	r19, 0xCC	; 204
 856:	4c e4       	ldi	r20, 0x4C	; 76
 858:	5d e3       	ldi	r21, 0x3D	; 61
 85a:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 85e:	20 e0       	ldi	r18, 0x00	; 0
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	40 e0       	ldi	r20, 0x00	; 0
 864:	51 e4       	ldi	r21, 0x41	; 65
 866:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__addsf3>
 86a:	0e 94 5f 05 	call	0xabe	; 0xabe <__fixunssfsi>
 86e:	d6 2f       	mov	r29, r22
	a2=((0.05*duty_cycle2)+8);
 870:	6c 2f       	mov	r22, r28
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 90 05 	call	0xb20	; 0xb20 <__floatsisf>
 87c:	2d ec       	ldi	r18, 0xCD	; 205
 87e:	3c ec       	ldi	r19, 0xCC	; 204
 880:	4c e4       	ldi	r20, 0x4C	; 76
 882:	5d e3       	ldi	r21, 0x3D	; 61
 884:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 888:	20 e0       	ldi	r18, 0x00	; 0
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	40 e0       	ldi	r20, 0x00	; 0
 88e:	51 e4       	ldi	r21, 0x41	; 65
 890:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__addsf3>
 894:	0e 94 5f 05 	call	0xabe	; 0xabe <__fixunssfsi>
	OCR0A=a;
 898:	d7 bd       	out	0x27, r29	; 39
	OCR0B=a2;
 89a:	68 bd       	out	0x28, r22	; 40
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	08 95       	ret

000008a2 <initPWM1>:

#include "pwm_1.h"
uint8_t y=0;
uint8_t y2=0;
void initPWM1(uint8_t invertido, uint16_t preescaler){
	DDRB |=(1<<DDB1)|(1<<DDB2);
 8a2:	94 b1       	in	r25, 0x04	; 4
 8a4:	96 60       	ori	r25, 0x06	; 6
 8a6:	94 b9       	out	0x04, r25	; 4
	TCCR1A=0;
 8a8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0;
 8ac:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	if (invertido==1){
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	49 f4       	brne	.+18     	; 0x8c6 <initPWM1+0x24>
		TCCR1A |=(1<<COM1A1)|(1<<COM1A0);//high
 8b4:	e0 e8       	ldi	r30, 0x80	; 128
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	80 81       	ld	r24, Z
 8ba:	80 6c       	ori	r24, 0xC0	; 192
 8bc:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1B1)|(1<<COM1B0);
 8be:	80 81       	ld	r24, Z
 8c0:	80 63       	ori	r24, 0x30	; 48
 8c2:	80 83       	st	Z, r24
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <initPWM1+0x34>
		} else{
		TCCR1A |=(1<<COM1A1); //low
 8c6:	e0 e8       	ldi	r30, 0x80	; 128
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	80 68       	ori	r24, 0x80	; 128
 8ce:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1B1);
 8d0:	80 81       	ld	r24, Z
 8d2:	80 62       	ori	r24, 0x20	; 32
 8d4:	80 83       	st	Z, r24
	}
	
	switch(preescaler){
 8d6:	60 34       	cpi	r22, 0x40	; 64
 8d8:	71 05       	cpc	r23, r1
 8da:	e1 f0       	breq	.+56     	; 0x914 <__stack+0x15>
 8dc:	38 f4       	brcc	.+14     	; 0x8ec <initPWM1+0x4a>
 8de:	61 15       	cp	r22, r1
 8e0:	71 05       	cpc	r23, r1
 8e2:	61 f0       	breq	.+24     	; 0x8fc <initPWM1+0x5a>
 8e4:	68 30       	cpi	r22, 0x08	; 8
 8e6:	71 05       	cpc	r23, r1
 8e8:	79 f0       	breq	.+30     	; 0x908 <__stack+0x9>
 8ea:	26 c0       	rjmp	.+76     	; 0x938 <__stack+0x39>
 8ec:	61 15       	cp	r22, r1
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	78 07       	cpc	r23, r24
 8f2:	b1 f0       	breq	.+44     	; 0x920 <__stack+0x21>
 8f4:	61 15       	cp	r22, r1
 8f6:	74 40       	sbci	r23, 0x04	; 4
 8f8:	c9 f0       	breq	.+50     	; 0x92c <__stack+0x2d>
 8fa:	1e c0       	rjmp	.+60     	; 0x938 <__stack+0x39>
		case 0:
		TCCR1B |=(1<<CS10);
 8fc:	e1 e8       	ldi	r30, 0x81	; 129
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	81 60       	ori	r24, 0x01	; 1
 904:	80 83       	st	Z, r24
		break;
 906:	1d c0       	rjmp	.+58     	; 0x942 <__stack+0x43>
		case 8:
		TCCR1B |=(1<<CS11);
 908:	e1 e8       	ldi	r30, 0x81	; 129
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	82 60       	ori	r24, 0x02	; 2
 910:	80 83       	st	Z, r24
		break;
 912:	17 c0       	rjmp	.+46     	; 0x942 <__stack+0x43>
		case 64:
		TCCR1B |=(1<<CS10)|(1<<CS11);
 914:	e1 e8       	ldi	r30, 0x81	; 129
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	83 60       	ori	r24, 0x03	; 3
 91c:	80 83       	st	Z, r24
		break;
 91e:	11 c0       	rjmp	.+34     	; 0x942 <__stack+0x43>
		case 256:
		TCCR1B |=(1<<CS12);
 920:	e1 e8       	ldi	r30, 0x81	; 129
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	84 60       	ori	r24, 0x04	; 4
 928:	80 83       	st	Z, r24
		break;
 92a:	0b c0       	rjmp	.+22     	; 0x942 <__stack+0x43>
		case 1024:
		TCCR1B |=(1<<CS12)|(1<<CS10); //preescaler de 1024 para un periodo máximo de 4 segundos
 92c:	e1 e8       	ldi	r30, 0x81	; 129
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	85 60       	ori	r24, 0x05	; 5
 934:	80 83       	st	Z, r24
		break;
 936:	05 c0       	rjmp	.+10     	; 0x942 <__stack+0x43>
		default:
		TCCR1B|=(1<<CS10);
 938:	e1 e8       	ldi	r30, 0x81	; 129
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	81 60       	ori	r24, 0x01	; 1
 940:	80 83       	st	Z, r24
	}
	
	//FAST PWM 8 bits
	TCCR1A |=(1<<WGM11);
 942:	e0 e8       	ldi	r30, 0x80	; 128
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	80 81       	ld	r24, Z
 948:	82 60       	ori	r24, 0x02	; 2
 94a:	80 83       	st	Z, r24
	TCCR1B |=(1<<WGM12)|(1<<WGM12);
 94c:	e1 e8       	ldi	r30, 0x81	; 129
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	88 60       	ori	r24, 0x08	; 8
 954:	80 83       	st	Z, r24
	
	ICR1=160;
 956:	80 ea       	ldi	r24, 0xA0	; 160
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 95e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 962:	08 95       	ret

00000964 <updateDC1>:
	
	
}


void updateDC1(uint8_t prc_duty, uint8_t prc_duty2){
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	d6 2f       	mov	r29, r22
	y=((0.05*prc_duty)+4.66);
 96a:	68 2f       	mov	r22, r24
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 90 05 	call	0xb20	; 0xb20 <__floatsisf>
 976:	2d ec       	ldi	r18, 0xCD	; 205
 978:	3c ec       	ldi	r19, 0xCC	; 204
 97a:	4c e4       	ldi	r20, 0x4C	; 76
 97c:	5d e3       	ldi	r21, 0x3D	; 61
 97e:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 982:	28 eb       	ldi	r18, 0xB8	; 184
 984:	3e e1       	ldi	r19, 0x1E	; 30
 986:	45 e9       	ldi	r20, 0x95	; 149
 988:	50 e4       	ldi	r21, 0x40	; 64
 98a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__addsf3>
 98e:	0e 94 5f 05 	call	0xabe	; 0xabe <__fixunssfsi>
 992:	c6 2f       	mov	r28, r22
 994:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <y>
	y2=((0.05*prc_duty2)+4.66);
 998:	6d 2f       	mov	r22, r29
 99a:	70 e0       	ldi	r23, 0x00	; 0
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 90 05 	call	0xb20	; 0xb20 <__floatsisf>
 9a4:	2d ec       	ldi	r18, 0xCD	; 205
 9a6:	3c ec       	ldi	r19, 0xCC	; 204
 9a8:	4c e4       	ldi	r20, 0x4C	; 76
 9aa:	5d e3       	ldi	r21, 0x3D	; 61
 9ac:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 9b0:	28 eb       	ldi	r18, 0xB8	; 184
 9b2:	3e e1       	ldi	r19, 0x1E	; 30
 9b4:	45 e9       	ldi	r20, 0x95	; 149
 9b6:	50 e4       	ldi	r21, 0x40	; 64
 9b8:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__addsf3>
 9bc:	0e 94 5f 05 	call	0xabe	; 0xabe <__fixunssfsi>
 9c0:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <y2>
	OCR1A=y;
 9c4:	6c 2f       	mov	r22, r28
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 9cc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B=y2;
 9d0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <y2>
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 9da:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	08 95       	ret

000009e4 <__subsf3>:
 9e4:	50 58       	subi	r21, 0x80	; 128

000009e6 <__addsf3>:
 9e6:	bb 27       	eor	r27, r27
 9e8:	aa 27       	eor	r26, r26
 9ea:	0e 94 0a 05 	call	0xa14	; 0xa14 <__addsf3x>
 9ee:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_round>
 9f2:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_pscA>
 9f6:	38 f0       	brcs	.+14     	; 0xa06 <__addsf3+0x20>
 9f8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_pscB>
 9fc:	20 f0       	brcs	.+8      	; 0xa06 <__addsf3+0x20>
 9fe:	39 f4       	brne	.+14     	; 0xa0e <__addsf3+0x28>
 a00:	9f 3f       	cpi	r25, 0xFF	; 255
 a02:	19 f4       	brne	.+6      	; 0xa0a <__addsf3+0x24>
 a04:	26 f4       	brtc	.+8      	; 0xa0e <__addsf3+0x28>
 a06:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_nan>
 a0a:	0e f4       	brtc	.+2      	; 0xa0e <__addsf3+0x28>
 a0c:	e0 95       	com	r30
 a0e:	e7 fb       	bst	r30, 7
 a10:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_inf>

00000a14 <__addsf3x>:
 a14:	e9 2f       	mov	r30, r25
 a16:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_split3>
 a1a:	58 f3       	brcs	.-42     	; 0x9f2 <__addsf3+0xc>
 a1c:	ba 17       	cp	r27, r26
 a1e:	62 07       	cpc	r22, r18
 a20:	73 07       	cpc	r23, r19
 a22:	84 07       	cpc	r24, r20
 a24:	95 07       	cpc	r25, r21
 a26:	20 f0       	brcs	.+8      	; 0xa30 <__addsf3x+0x1c>
 a28:	79 f4       	brne	.+30     	; 0xa48 <__addsf3x+0x34>
 a2a:	a6 f5       	brtc	.+104    	; 0xa94 <__addsf3x+0x80>
 a2c:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_zero>
 a30:	0e f4       	brtc	.+2      	; 0xa34 <__addsf3x+0x20>
 a32:	e0 95       	com	r30
 a34:	0b 2e       	mov	r0, r27
 a36:	ba 2f       	mov	r27, r26
 a38:	a0 2d       	mov	r26, r0
 a3a:	0b 01       	movw	r0, r22
 a3c:	b9 01       	movw	r22, r18
 a3e:	90 01       	movw	r18, r0
 a40:	0c 01       	movw	r0, r24
 a42:	ca 01       	movw	r24, r20
 a44:	a0 01       	movw	r20, r0
 a46:	11 24       	eor	r1, r1
 a48:	ff 27       	eor	r31, r31
 a4a:	59 1b       	sub	r21, r25
 a4c:	99 f0       	breq	.+38     	; 0xa74 <__addsf3x+0x60>
 a4e:	59 3f       	cpi	r21, 0xF9	; 249
 a50:	50 f4       	brcc	.+20     	; 0xa66 <__addsf3x+0x52>
 a52:	50 3e       	cpi	r21, 0xE0	; 224
 a54:	68 f1       	brcs	.+90     	; 0xab0 <__addsf3x+0x9c>
 a56:	1a 16       	cp	r1, r26
 a58:	f0 40       	sbci	r31, 0x00	; 0
 a5a:	a2 2f       	mov	r26, r18
 a5c:	23 2f       	mov	r18, r19
 a5e:	34 2f       	mov	r19, r20
 a60:	44 27       	eor	r20, r20
 a62:	58 5f       	subi	r21, 0xF8	; 248
 a64:	f3 cf       	rjmp	.-26     	; 0xa4c <__addsf3x+0x38>
 a66:	46 95       	lsr	r20
 a68:	37 95       	ror	r19
 a6a:	27 95       	ror	r18
 a6c:	a7 95       	ror	r26
 a6e:	f0 40       	sbci	r31, 0x00	; 0
 a70:	53 95       	inc	r21
 a72:	c9 f7       	brne	.-14     	; 0xa66 <__addsf3x+0x52>
 a74:	7e f4       	brtc	.+30     	; 0xa94 <__addsf3x+0x80>
 a76:	1f 16       	cp	r1, r31
 a78:	ba 0b       	sbc	r27, r26
 a7a:	62 0b       	sbc	r22, r18
 a7c:	73 0b       	sbc	r23, r19
 a7e:	84 0b       	sbc	r24, r20
 a80:	ba f0       	brmi	.+46     	; 0xab0 <__addsf3x+0x9c>
 a82:	91 50       	subi	r25, 0x01	; 1
 a84:	a1 f0       	breq	.+40     	; 0xaae <__addsf3x+0x9a>
 a86:	ff 0f       	add	r31, r31
 a88:	bb 1f       	adc	r27, r27
 a8a:	66 1f       	adc	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	c2 f7       	brpl	.-16     	; 0xa82 <__addsf3x+0x6e>
 a92:	0e c0       	rjmp	.+28     	; 0xab0 <__addsf3x+0x9c>
 a94:	ba 0f       	add	r27, r26
 a96:	62 1f       	adc	r22, r18
 a98:	73 1f       	adc	r23, r19
 a9a:	84 1f       	adc	r24, r20
 a9c:	48 f4       	brcc	.+18     	; 0xab0 <__addsf3x+0x9c>
 a9e:	87 95       	ror	r24
 aa0:	77 95       	ror	r23
 aa2:	67 95       	ror	r22
 aa4:	b7 95       	ror	r27
 aa6:	f7 95       	ror	r31
 aa8:	9e 3f       	cpi	r25, 0xFE	; 254
 aaa:	08 f0       	brcs	.+2      	; 0xaae <__addsf3x+0x9a>
 aac:	b0 cf       	rjmp	.-160    	; 0xa0e <__addsf3+0x28>
 aae:	93 95       	inc	r25
 ab0:	88 0f       	add	r24, r24
 ab2:	08 f0       	brcs	.+2      	; 0xab6 <__addsf3x+0xa2>
 ab4:	99 27       	eor	r25, r25
 ab6:	ee 0f       	add	r30, r30
 ab8:	97 95       	ror	r25
 aba:	87 95       	ror	r24
 abc:	08 95       	ret

00000abe <__fixunssfsi>:
 abe:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fp_splitA>
 ac2:	88 f0       	brcs	.+34     	; 0xae6 <__fixunssfsi+0x28>
 ac4:	9f 57       	subi	r25, 0x7F	; 127
 ac6:	98 f0       	brcs	.+38     	; 0xaee <__fixunssfsi+0x30>
 ac8:	b9 2f       	mov	r27, r25
 aca:	99 27       	eor	r25, r25
 acc:	b7 51       	subi	r27, 0x17	; 23
 ace:	b0 f0       	brcs	.+44     	; 0xafc <__fixunssfsi+0x3e>
 ad0:	e1 f0       	breq	.+56     	; 0xb0a <__fixunssfsi+0x4c>
 ad2:	66 0f       	add	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	99 1f       	adc	r25, r25
 ada:	1a f0       	brmi	.+6      	; 0xae2 <__fixunssfsi+0x24>
 adc:	ba 95       	dec	r27
 ade:	c9 f7       	brne	.-14     	; 0xad2 <__fixunssfsi+0x14>
 ae0:	14 c0       	rjmp	.+40     	; 0xb0a <__fixunssfsi+0x4c>
 ae2:	b1 30       	cpi	r27, 0x01	; 1
 ae4:	91 f0       	breq	.+36     	; 0xb0a <__fixunssfsi+0x4c>
 ae6:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_zero>
 aea:	b1 e0       	ldi	r27, 0x01	; 1
 aec:	08 95       	ret
 aee:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_zero>
 af2:	67 2f       	mov	r22, r23
 af4:	78 2f       	mov	r23, r24
 af6:	88 27       	eor	r24, r24
 af8:	b8 5f       	subi	r27, 0xF8	; 248
 afa:	39 f0       	breq	.+14     	; 0xb0a <__fixunssfsi+0x4c>
 afc:	b9 3f       	cpi	r27, 0xF9	; 249
 afe:	cc f3       	brlt	.-14     	; 0xaf2 <__fixunssfsi+0x34>
 b00:	86 95       	lsr	r24
 b02:	77 95       	ror	r23
 b04:	67 95       	ror	r22
 b06:	b3 95       	inc	r27
 b08:	d9 f7       	brne	.-10     	; 0xb00 <__fixunssfsi+0x42>
 b0a:	3e f4       	brtc	.+14     	; 0xb1a <__fixunssfsi+0x5c>
 b0c:	90 95       	com	r25
 b0e:	80 95       	com	r24
 b10:	70 95       	com	r23
 b12:	61 95       	neg	r22
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	08 95       	ret

00000b1c <__floatunsisf>:
 b1c:	e8 94       	clt
 b1e:	09 c0       	rjmp	.+18     	; 0xb32 <__floatsisf+0x12>

00000b20 <__floatsisf>:
 b20:	97 fb       	bst	r25, 7
 b22:	3e f4       	brtc	.+14     	; 0xb32 <__floatsisf+0x12>
 b24:	90 95       	com	r25
 b26:	80 95       	com	r24
 b28:	70 95       	com	r23
 b2a:	61 95       	neg	r22
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	99 23       	and	r25, r25
 b34:	a9 f0       	breq	.+42     	; 0xb60 <__floatsisf+0x40>
 b36:	f9 2f       	mov	r31, r25
 b38:	96 e9       	ldi	r25, 0x96	; 150
 b3a:	bb 27       	eor	r27, r27
 b3c:	93 95       	inc	r25
 b3e:	f6 95       	lsr	r31
 b40:	87 95       	ror	r24
 b42:	77 95       	ror	r23
 b44:	67 95       	ror	r22
 b46:	b7 95       	ror	r27
 b48:	f1 11       	cpse	r31, r1
 b4a:	f8 cf       	rjmp	.-16     	; 0xb3c <__floatsisf+0x1c>
 b4c:	fa f4       	brpl	.+62     	; 0xb8c <__floatsisf+0x6c>
 b4e:	bb 0f       	add	r27, r27
 b50:	11 f4       	brne	.+4      	; 0xb56 <__floatsisf+0x36>
 b52:	60 ff       	sbrs	r22, 0
 b54:	1b c0       	rjmp	.+54     	; 0xb8c <__floatsisf+0x6c>
 b56:	6f 5f       	subi	r22, 0xFF	; 255
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	16 c0       	rjmp	.+44     	; 0xb8c <__floatsisf+0x6c>
 b60:	88 23       	and	r24, r24
 b62:	11 f0       	breq	.+4      	; 0xb68 <__floatsisf+0x48>
 b64:	96 e9       	ldi	r25, 0x96	; 150
 b66:	11 c0       	rjmp	.+34     	; 0xb8a <__floatsisf+0x6a>
 b68:	77 23       	and	r23, r23
 b6a:	21 f0       	breq	.+8      	; 0xb74 <__floatsisf+0x54>
 b6c:	9e e8       	ldi	r25, 0x8E	; 142
 b6e:	87 2f       	mov	r24, r23
 b70:	76 2f       	mov	r23, r22
 b72:	05 c0       	rjmp	.+10     	; 0xb7e <__floatsisf+0x5e>
 b74:	66 23       	and	r22, r22
 b76:	71 f0       	breq	.+28     	; 0xb94 <__floatsisf+0x74>
 b78:	96 e8       	ldi	r25, 0x86	; 134
 b7a:	86 2f       	mov	r24, r22
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	60 e0       	ldi	r22, 0x00	; 0
 b80:	2a f0       	brmi	.+10     	; 0xb8c <__floatsisf+0x6c>
 b82:	9a 95       	dec	r25
 b84:	66 0f       	add	r22, r22
 b86:	77 1f       	adc	r23, r23
 b88:	88 1f       	adc	r24, r24
 b8a:	da f7       	brpl	.-10     	; 0xb82 <__floatsisf+0x62>
 b8c:	88 0f       	add	r24, r24
 b8e:	96 95       	lsr	r25
 b90:	87 95       	ror	r24
 b92:	97 f9       	bld	r25, 7
 b94:	08 95       	ret

00000b96 <__fp_inf>:
 b96:	97 f9       	bld	r25, 7
 b98:	9f 67       	ori	r25, 0x7F	; 127
 b9a:	80 e8       	ldi	r24, 0x80	; 128
 b9c:	70 e0       	ldi	r23, 0x00	; 0
 b9e:	60 e0       	ldi	r22, 0x00	; 0
 ba0:	08 95       	ret

00000ba2 <__fp_nan>:
 ba2:	9f ef       	ldi	r25, 0xFF	; 255
 ba4:	80 ec       	ldi	r24, 0xC0	; 192
 ba6:	08 95       	ret

00000ba8 <__fp_pscA>:
 ba8:	00 24       	eor	r0, r0
 baa:	0a 94       	dec	r0
 bac:	16 16       	cp	r1, r22
 bae:	17 06       	cpc	r1, r23
 bb0:	18 06       	cpc	r1, r24
 bb2:	09 06       	cpc	r0, r25
 bb4:	08 95       	ret

00000bb6 <__fp_pscB>:
 bb6:	00 24       	eor	r0, r0
 bb8:	0a 94       	dec	r0
 bba:	12 16       	cp	r1, r18
 bbc:	13 06       	cpc	r1, r19
 bbe:	14 06       	cpc	r1, r20
 bc0:	05 06       	cpc	r0, r21
 bc2:	08 95       	ret

00000bc4 <__fp_round>:
 bc4:	09 2e       	mov	r0, r25
 bc6:	03 94       	inc	r0
 bc8:	00 0c       	add	r0, r0
 bca:	11 f4       	brne	.+4      	; 0xbd0 <__fp_round+0xc>
 bcc:	88 23       	and	r24, r24
 bce:	52 f0       	brmi	.+20     	; 0xbe4 <__fp_round+0x20>
 bd0:	bb 0f       	add	r27, r27
 bd2:	40 f4       	brcc	.+16     	; 0xbe4 <__fp_round+0x20>
 bd4:	bf 2b       	or	r27, r31
 bd6:	11 f4       	brne	.+4      	; 0xbdc <__fp_round+0x18>
 bd8:	60 ff       	sbrs	r22, 0
 bda:	04 c0       	rjmp	.+8      	; 0xbe4 <__fp_round+0x20>
 bdc:	6f 5f       	subi	r22, 0xFF	; 255
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	08 95       	ret

00000be6 <__fp_split3>:
 be6:	57 fd       	sbrc	r21, 7
 be8:	90 58       	subi	r25, 0x80	; 128
 bea:	44 0f       	add	r20, r20
 bec:	55 1f       	adc	r21, r21
 bee:	59 f0       	breq	.+22     	; 0xc06 <__fp_splitA+0x10>
 bf0:	5f 3f       	cpi	r21, 0xFF	; 255
 bf2:	71 f0       	breq	.+28     	; 0xc10 <__fp_splitA+0x1a>
 bf4:	47 95       	ror	r20

00000bf6 <__fp_splitA>:
 bf6:	88 0f       	add	r24, r24
 bf8:	97 fb       	bst	r25, 7
 bfa:	99 1f       	adc	r25, r25
 bfc:	61 f0       	breq	.+24     	; 0xc16 <__fp_splitA+0x20>
 bfe:	9f 3f       	cpi	r25, 0xFF	; 255
 c00:	79 f0       	breq	.+30     	; 0xc20 <__fp_splitA+0x2a>
 c02:	87 95       	ror	r24
 c04:	08 95       	ret
 c06:	12 16       	cp	r1, r18
 c08:	13 06       	cpc	r1, r19
 c0a:	14 06       	cpc	r1, r20
 c0c:	55 1f       	adc	r21, r21
 c0e:	f2 cf       	rjmp	.-28     	; 0xbf4 <__fp_split3+0xe>
 c10:	46 95       	lsr	r20
 c12:	f1 df       	rcall	.-30     	; 0xbf6 <__fp_splitA>
 c14:	08 c0       	rjmp	.+16     	; 0xc26 <__fp_splitA+0x30>
 c16:	16 16       	cp	r1, r22
 c18:	17 06       	cpc	r1, r23
 c1a:	18 06       	cpc	r1, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	f1 cf       	rjmp	.-30     	; 0xc02 <__fp_splitA+0xc>
 c20:	86 95       	lsr	r24
 c22:	71 05       	cpc	r23, r1
 c24:	61 05       	cpc	r22, r1
 c26:	08 94       	sec
 c28:	08 95       	ret

00000c2a <__fp_zero>:
 c2a:	e8 94       	clt

00000c2c <__fp_szero>:
 c2c:	bb 27       	eor	r27, r27
 c2e:	66 27       	eor	r22, r22
 c30:	77 27       	eor	r23, r23
 c32:	cb 01       	movw	r24, r22
 c34:	97 f9       	bld	r25, 7
 c36:	08 95       	ret

00000c38 <__mulsf3>:
 c38:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3x>
 c3c:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_round>
 c40:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_pscA>
 c44:	38 f0       	brcs	.+14     	; 0xc54 <__mulsf3+0x1c>
 c46:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_pscB>
 c4a:	20 f0       	brcs	.+8      	; 0xc54 <__mulsf3+0x1c>
 c4c:	95 23       	and	r25, r21
 c4e:	11 f0       	breq	.+4      	; 0xc54 <__mulsf3+0x1c>
 c50:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_inf>
 c54:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_nan>
 c58:	11 24       	eor	r1, r1
 c5a:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_szero>

00000c5e <__mulsf3x>:
 c5e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_split3>
 c62:	70 f3       	brcs	.-36     	; 0xc40 <__mulsf3+0x8>

00000c64 <__mulsf3_pse>:
 c64:	95 9f       	mul	r25, r21
 c66:	c1 f3       	breq	.-16     	; 0xc58 <__mulsf3+0x20>
 c68:	95 0f       	add	r25, r21
 c6a:	50 e0       	ldi	r21, 0x00	; 0
 c6c:	55 1f       	adc	r21, r21
 c6e:	62 9f       	mul	r22, r18
 c70:	f0 01       	movw	r30, r0
 c72:	72 9f       	mul	r23, r18
 c74:	bb 27       	eor	r27, r27
 c76:	f0 0d       	add	r31, r0
 c78:	b1 1d       	adc	r27, r1
 c7a:	63 9f       	mul	r22, r19
 c7c:	aa 27       	eor	r26, r26
 c7e:	f0 0d       	add	r31, r0
 c80:	b1 1d       	adc	r27, r1
 c82:	aa 1f       	adc	r26, r26
 c84:	64 9f       	mul	r22, r20
 c86:	66 27       	eor	r22, r22
 c88:	b0 0d       	add	r27, r0
 c8a:	a1 1d       	adc	r26, r1
 c8c:	66 1f       	adc	r22, r22
 c8e:	82 9f       	mul	r24, r18
 c90:	22 27       	eor	r18, r18
 c92:	b0 0d       	add	r27, r0
 c94:	a1 1d       	adc	r26, r1
 c96:	62 1f       	adc	r22, r18
 c98:	73 9f       	mul	r23, r19
 c9a:	b0 0d       	add	r27, r0
 c9c:	a1 1d       	adc	r26, r1
 c9e:	62 1f       	adc	r22, r18
 ca0:	83 9f       	mul	r24, r19
 ca2:	a0 0d       	add	r26, r0
 ca4:	61 1d       	adc	r22, r1
 ca6:	22 1f       	adc	r18, r18
 ca8:	74 9f       	mul	r23, r20
 caa:	33 27       	eor	r19, r19
 cac:	a0 0d       	add	r26, r0
 cae:	61 1d       	adc	r22, r1
 cb0:	23 1f       	adc	r18, r19
 cb2:	84 9f       	mul	r24, r20
 cb4:	60 0d       	add	r22, r0
 cb6:	21 1d       	adc	r18, r1
 cb8:	82 2f       	mov	r24, r18
 cba:	76 2f       	mov	r23, r22
 cbc:	6a 2f       	mov	r22, r26
 cbe:	11 24       	eor	r1, r1
 cc0:	9f 57       	subi	r25, 0x7F	; 127
 cc2:	50 40       	sbci	r21, 0x00	; 0
 cc4:	9a f0       	brmi	.+38     	; 0xcec <__mulsf3_pse+0x88>
 cc6:	f1 f0       	breq	.+60     	; 0xd04 <__mulsf3_pse+0xa0>
 cc8:	88 23       	and	r24, r24
 cca:	4a f0       	brmi	.+18     	; 0xcde <__mulsf3_pse+0x7a>
 ccc:	ee 0f       	add	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	bb 1f       	adc	r27, r27
 cd2:	66 1f       	adc	r22, r22
 cd4:	77 1f       	adc	r23, r23
 cd6:	88 1f       	adc	r24, r24
 cd8:	91 50       	subi	r25, 0x01	; 1
 cda:	50 40       	sbci	r21, 0x00	; 0
 cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__mulsf3_pse+0x64>
 cde:	9e 3f       	cpi	r25, 0xFE	; 254
 ce0:	51 05       	cpc	r21, r1
 ce2:	80 f0       	brcs	.+32     	; 0xd04 <__mulsf3_pse+0xa0>
 ce4:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_inf>
 ce8:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_szero>
 cec:	5f 3f       	cpi	r21, 0xFF	; 255
 cee:	e4 f3       	brlt	.-8      	; 0xce8 <__mulsf3_pse+0x84>
 cf0:	98 3e       	cpi	r25, 0xE8	; 232
 cf2:	d4 f3       	brlt	.-12     	; 0xce8 <__mulsf3_pse+0x84>
 cf4:	86 95       	lsr	r24
 cf6:	77 95       	ror	r23
 cf8:	67 95       	ror	r22
 cfa:	b7 95       	ror	r27
 cfc:	f7 95       	ror	r31
 cfe:	e7 95       	ror	r30
 d00:	9f 5f       	subi	r25, 0xFF	; 255
 d02:	c1 f7       	brne	.-16     	; 0xcf4 <__mulsf3_pse+0x90>
 d04:	fe 2b       	or	r31, r30
 d06:	88 0f       	add	r24, r24
 d08:	91 1d       	adc	r25, r1
 d0a:	96 95       	lsr	r25
 d0c:	87 95       	ror	r24
 d0e:	97 f9       	bld	r25, 7
 d10:	08 95       	ret

00000d12 <eeprom_read_byte>:
 d12:	f9 99       	sbic	0x1f, 1	; 31
 d14:	fe cf       	rjmp	.-4      	; 0xd12 <eeprom_read_byte>
 d16:	92 bd       	out	0x22, r25	; 34
 d18:	81 bd       	out	0x21, r24	; 33
 d1a:	f8 9a       	sbi	0x1f, 0	; 31
 d1c:	99 27       	eor	r25, r25
 d1e:	80 b5       	in	r24, 0x20	; 32
 d20:	08 95       	ret

00000d22 <eeprom_write_byte>:
 d22:	26 2f       	mov	r18, r22

00000d24 <eeprom_write_r18>:
 d24:	f9 99       	sbic	0x1f, 1	; 31
 d26:	fe cf       	rjmp	.-4      	; 0xd24 <eeprom_write_r18>
 d28:	1f ba       	out	0x1f, r1	; 31
 d2a:	92 bd       	out	0x22, r25	; 34
 d2c:	81 bd       	out	0x21, r24	; 33
 d2e:	20 bd       	out	0x20, r18	; 32
 d30:	0f b6       	in	r0, 0x3f	; 63
 d32:	f8 94       	cli
 d34:	fa 9a       	sbi	0x1f, 2	; 31
 d36:	f9 9a       	sbi	0x1f, 1	; 31
 d38:	0f be       	out	0x3f, r0	; 63
 d3a:	01 96       	adiw	r24, 0x01	; 1
 d3c:	08 95       	ret

00000d3e <_exit>:
 d3e:	f8 94       	cli

00000d40 <__stop_program>:
 d40:	ff cf       	rjmp	.-2      	; 0xd40 <__stop_program>
