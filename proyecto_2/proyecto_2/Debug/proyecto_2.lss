
proyecto_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  00000dba  00000e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008001c8  008001c8  00000f16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e0  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0b  00000000  00000000  00002a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00003648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004de  00000000  00000000  00003d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3c       	cpi	r26, 0xC8	; 200
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ec       	ldi	r26, 0xC8	; 200
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3d       	cpi	r26, 0xD9	; 217
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
uint8_t switch_pot=0;
uint8_t mem_flag=0;

//CONFIGURACIONES
void setup(void){
	cli();
  a6:	f8 94       	cli
	DDRC=0b00000000;
  a8:	17 b8       	out	0x07, r1	; 7
	EICRA=0;
  aa:	e9 e6       	ldi	r30, 0x69	; 105
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	EICRA|=(1<<ISC01);
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	EIMSK=0,
  b6:	1d ba       	out	0x1d, r1	; 29
	EIMSK|=(1<<INT0);
  b8:	8d b3       	in	r24, 0x1d	; 29
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8d bb       	out	0x1d, r24	; 29
	PCICR=0;
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	PCICR |=(1<<PCIE1);
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);
  ca:	ec e6       	ldi	r30, 0x6C	; 108
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8f 60       	ori	r24, 0x0F	; 15
  d2:	80 83       	st	Z, r24
	sei();
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <init_adc>:
}

void init_adc(void){
	ADMUX = 0;
  d8:	ac e7       	ldi	r26, 0x7C	; 124
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	1c 92       	st	X, r1
	ADCSRA=0;
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
	
	// VCC=5V
	ADMUX |=(1<<REFS0);
  e4:	8c 91       	ld	r24, X
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	8c 93       	st	X, r24
	
	// Entrada 0 de MUX ADC0 para el prelab entonces no se cambian los bits de mux
	ADMUX |=(1<<ADLAR);
  ea:	8c 91       	ld	r24, X
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	8c 93       	st	X, r24
	
	//Encender ADC y  habilitar isr adc
	ADCSRA=0;
  f0:	10 82       	st	Z, r1
	ADCSRA|=(1<<ADEN)|(1<<ADIE);
  f2:	80 81       	ld	r24, Z
  f4:	88 68       	ori	r24, 0x88	; 136
  f6:	80 83       	st	Z, r24
	
	// preescaler = 16M/128=125k
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  f8:	80 81       	ld	r24, Z
  fa:	87 60       	ori	r24, 0x07	; 7
  fc:	80 83       	st	Z, r24
	
	//no se utilizara el estado B
	ADCSRB=0;
  fe:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 102:	08 95       	ret

00000104 <initUART9600>:
	//DIDRO=0;
}

void initUART9600(void){
	//configurar pines tx y rx
	DDRD &=~(1<<DDD0);//entrada
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD1);//salida Tx
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	8a b9       	out	0x0a, r24	; 10
	
	//configurar registro A modo fast u2x0 en 1
	UCSR0A=0;
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
	UCSR0A|=(1<<U2X0);
 116:	80 81       	ld	r24, Z
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	80 83       	st	Z, r24
	
	//configurar registro B, habilotar isr rx, bits para habilitar RX y TX
	UCSR0B=0;
 11c:	e1 ec       	ldi	r30, 0xC1	; 193
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
	UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 122:	80 81       	ld	r24, Z
 124:	88 69       	ori	r24, 0x98	; 152
 126:	80 83       	st	Z, r24
	
	//Configurar registro C<Frame asincrono 8 bits de datos sin pariedad, 1 bit de stop
	UCSR0C=0;
 128:	e2 ec       	ldi	r30, 0xC2	; 194
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	10 82       	st	Z, r1
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 12e:	80 81       	ld	r24, Z
 130:	86 60       	ori	r24, 0x06	; 6
 132:	80 83       	st	Z, r24
	
	//baudrate = 207 con % de error igual a 0.16% con 9600
	UBRR0=207;
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 140:	08 95       	ret

00000142 <writetxtUART>:
	
}

void writetxtUART(char* texto){
 142:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	07 c0       	rjmp	.+14     	; 0x156 <writetxtUART+0x14>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
 148:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	95 ff       	sbrs	r25, 5
 14e:	fc cf       	rjmp	.-8      	; 0x148 <writetxtUART+0x6>
		UDR0=texto[i];//cuando i nulo se acaba
 150:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}

void writetxtUART(char* texto){
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	fa 01       	movw	r30, r20
 158:	e2 0f       	add	r30, r18
 15a:	f1 1d       	adc	r31, r1
 15c:	30 81       	ld	r19, Z
 15e:	31 11       	cpse	r19, r1
 160:	f3 cf       	rjmp	.-26     	; 0x148 <writetxtUART+0x6>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
		UDR0=texto[i];//cuando i nulo se acaba
	}
}
 162:	08 95       	ret

00000164 <main>:

//MAIN LOOP

int main(void){	
	CLKPR=(1<<CLKPCE);
 164:	e1 e6       	ldi	r30, 0x61	; 97
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24
	CLKPR=(1<<CLKPS0);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
	cli();
 170:	f8 94       	cli
	initUART9600();
 172:	0e 94 82 00 	call	0x104	; 0x104 <initUART9600>
	initPWM0(0,1024);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	74 e0       	ldi	r23, 0x04	; 4
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 1a 04 	call	0x834	; 0x834 <initPWM0>
	initPWM1(0,1024);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	74 e0       	ldi	r23, 0x04	; 4
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 8d 04 	call	0x91a	; 0x91a <initPWM1>
	//initPWM2(0,1024);
	init_adc();
 18a:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_adc>
	setup();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	sei();
 192:	78 94       	sei
	EECR=0;
 194:	1f ba       	out	0x1f, r1	; 31
    /* Replace with your application code */
    while (1) 
    {	
		ADCSRA|=(1<<ADSC);
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	80 83       	st	Z, r24
		//int servos[4]={valor_pot1,valor_pot2,valor_pot3,valor_pot4};
		if (modo==0){
 1a0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <modo>
 1a4:	81 11       	cpse	r24, r1
 1a6:	19 c0       	rjmp	.+50     	; 0x1da <main+0x76>
			//aquí se pueden mover los pots libremente
			PORTD&=~(1<<PORTD3);
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD4);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	8b b9       	out	0x0b, r24	; 11
			updateDC1(valor_pot1,valor_pot2);
 1b4:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <valor_pot2>
 1b8:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <valor_pot1>
 1bc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <updateDC1>
			updateDC0(valor_pot3,valor_pot4);
 1c0:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <valor_pot4>
 1c4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <valor_pot3>
 1c8:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <updateDC0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	8f e3       	ldi	r24, 0x3F	; 63
 1ce:	9c e9       	ldi	r25, 0x9C	; 156
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x6c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x72>
 1d6:	00 00       	nop
 1d8:	de cf       	rjmp	.-68     	; 0x196 <main+0x32>
			_delay_ms(10);
		}else if (modo==1){
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	39 f4       	brne	.+14     	; 0x1ec <main+0x88>
			//se guardan los valores de los pots a la eeprom (escribir)
			PORTD|=(1<<PORTD4);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD3);
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	87 7f       	andi	r24, 0xF7	; 247
 1e8:	8b b9       	out	0x0b, r24	; 11
 1ea:	d5 cf       	rjmp	.-86     	; 0x196 <main+0x32>
		}else if(modo==2){
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	c9 f4       	brne	.+50     	; 0x222 <main+0xbe>
			//modo leer eeprom
			PORTD|=(1<<PORTD3);
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	8b b9       	out	0x0b, r24	; 11
			PORTD&=~(1<<PORTD4);
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	8b b9       	out	0x0b, r24	; 11
			updateDC1(valor_pot1_esc,valor_pot2_esc);
 1fc:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <valor_pot2_esc>
 200:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <valor_pot1_esc>
 204:	0e 94 ee 04 	call	0x9dc	; 0x9dc <updateDC1>
			updateDC0(valor_pot3_esc,valor_pot4_esc);
 208:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <valor_pot4_esc>
 20c:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <valor_pot3_esc>
 210:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <updateDC0>
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	9c e9       	ldi	r25, 0x9C	; 156
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0xb4>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0xba>
 21e:	00 00       	nop
 220:	ba cf       	rjmp	.-140    	; 0x196 <main+0x32>
			_delay_ms(10);
		}else if (modo==3){
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	09 f0       	breq	.+2      	; 0x228 <main+0xc4>
 226:	b7 cf       	rjmp	.-146    	; 0x196 <main+0x32>
			//modo=2, aquí se conecta con adafruit
			PORTD|=(1<<PORTD3)|(1<<PORTD4);
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	88 61       	ori	r24, 0x18	; 24
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	b3 cf       	rjmp	.-154    	; 0x196 <main+0x32>

00000230 <__vector_1>:
    }
}


//INTERRUPCIONES
ISR(INT0_vect){
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	8f 93       	push	r24
	modo++;
 23c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <modo>
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <modo>
	if (modo>=4){
 246:	84 30       	cpi	r24, 0x04	; 4
 248:	10 f0       	brcs	.+4      	; 0x24e <__vector_1+0x1e>
		modo=0;
 24a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <modo>
	}
}
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_4>:

ISR(PCINT1_vect){
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
	//revisa si es la primera o segunda interrupción
	valor_pc=PINC;
 280:	86 b1       	in	r24, 0x06	; 6
	valor_pc=(valor_pc&0b00001111);
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <valor_pc>
	if (pulsador==0){
 288:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <pulsador>
 28c:	91 11       	cpse	r25, r1
 28e:	72 c2       	rjmp	.+1252   	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
		if ((modo==1)|(modo==2)){
 290:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <modo>
 294:	91 50       	subi	r25, 0x01	; 1
 296:	92 30       	cpi	r25, 0x02	; 2
 298:	b8 f5       	brcc	.+110    	; 0x308 <__vector_4+0xae>
			if (valor_pc==0b00001110){
 29a:	8e 30       	cpi	r24, 0x0E	; 14
 29c:	61 f4       	brne	.+24     	; 0x2b6 <__vector_4+0x5c>
				PORTD|=(1<<PORTD7);
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	80 68       	ori	r24, 0x80	; 128
 2a2:	8b b9       	out	0x0b, r24	; 11
				posicion=1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <posicion>
				pulsador++;
 2aa:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <pulsador>
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <pulsador>
 2b4:	29 c0       	rjmp	.+82     	; 0x308 <__vector_4+0xae>
			}else if(valor_pc==0b00001101){
 2b6:	8d 30       	cpi	r24, 0x0D	; 13
 2b8:	61 f4       	brne	.+24     	; 0x2d2 <__vector_4+0x78>
				PORTD&=~(1<<PORTD7);
 2ba:	8b b1       	in	r24, 0x0b	; 11
 2bc:	8f 77       	andi	r24, 0x7F	; 127
 2be:	8b b9       	out	0x0b, r24	; 11
				posicion=2;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <posicion>
				pulsador++;
 2c6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <pulsador>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <pulsador>
 2d0:	1b c0       	rjmp	.+54     	; 0x308 <__vector_4+0xae>
			}else if(valor_pc==0b00001011){
 2d2:	8b 30       	cpi	r24, 0x0B	; 11
 2d4:	61 f4       	brne	.+24     	; 0x2ee <__vector_4+0x94>
				PORTB|=(1<<PORTB0);
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	85 b9       	out	0x05, r24	; 5
				posicion=3;
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <posicion>
				pulsador++;
 2e2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <pulsador>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <pulsador>
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <__vector_4+0xae>
			}else if(valor_pc==0b00000111){
 2ee:	87 30       	cpi	r24, 0x07	; 7
 2f0:	59 f4       	brne	.+22     	; 0x308 <__vector_4+0xae>
				PORTB&=~(1<<PORTB0);
 2f2:	85 b1       	in	r24, 0x05	; 5
 2f4:	8e 7f       	andi	r24, 0xFE	; 254
 2f6:	85 b9       	out	0x05, r24	; 5
				posicion=4;
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <posicion>
				pulsador++;
 2fe:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <pulsador>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <pulsador>
			}
		}
		if (modo==1){
 308:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <modo>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	09 f0       	breq	.+2      	; 0x312 <__vector_4+0xb8>
 310:	26 c1       	rjmp	.+588    	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
			cli();
 312:	f8 94       	cli
			switch(posicion){
 314:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <posicion>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	09 f4       	brne	.+2      	; 0x31e <__vector_4+0xc4>
 31c:	51 c0       	rjmp	.+162    	; 0x3c0 <__vector_4+0x166>
 31e:	18 f4       	brcc	.+6      	; 0x326 <__vector_4+0xcc>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	41 f0       	breq	.+16     	; 0x334 <__vector_4+0xda>
 324:	29 c2       	rjmp	.+1106   	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	09 f4       	brne	.+2      	; 0x32c <__vector_4+0xd2>
 32a:	93 c0       	rjmp	.+294    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	09 f4       	brne	.+2      	; 0x332 <__vector_4+0xd8>
 330:	d9 c0       	rjmp	.+434    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 332:	22 c2       	rjmp	.+1092   	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
				case 1:
					adr=0;
 334:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 338:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot1);
 33c:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <valor_pot1>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 348:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 34c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 356:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot2);
 35a:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <valor_pot2>
 35e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 362:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 366:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 370:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot3);
 374:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <valor_pot3>
 378:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 37c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 380:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 38a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot4);
 38e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <valor_pot4>
 392:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr=0;
 396:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 39a:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					writetxtUART("Se guardo la posicion 1\n");
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 a1 00 	call	0x142	; 0x142 <writetxtUART>
					break;
 3a6:	e8 c1       	rjmp	.+976    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
				case 2:
					for (int i=0;i<5;i++){
						adr++;
 3a8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 3ac:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 3b6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					writetxtUART("Se guardo la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 3ba:	2f 5f       	subi	r18, 0xFF	; 255
 3bc:	3f 4f       	sbci	r19, 0xFF	; 255
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <__vector_4+0x16a>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					writetxtUART("Se guardo la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 3c4:	25 30       	cpi	r18, 0x05	; 5
 3c6:	31 05       	cpc	r19, r1
 3c8:	7c f3       	brlt	.-34     	; 0x3a8 <__vector_4+0x14e>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 3ca:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <valor_pot1>
 3ce:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 3d2:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 3d6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 3da:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 3de:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 3e8:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot2);
 3ec:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <valor_pot2>
 3f0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 3f4:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 3f8:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 402:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot3);
 406:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <valor_pot3>
 40a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 40e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 412:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 41c:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot4);
 420:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <valor_pot4>
 424:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr=0;
 428:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 42c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					writetxtUART("Se guardo la posicion 2\n");
 430:	89 e1       	ldi	r24, 0x19	; 25
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 a1 00 	call	0x142	; 0x142 <writetxtUART>
					break;
 438:	9f c1       	rjmp	.+830    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
				case 3:
					for (int i=0;i<9;i++){
						adr++;
 43a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 43e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 448:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					writetxtUART("Se guardo la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 44c:	2f 5f       	subi	r18, 0xFF	; 255
 44e:	3f 4f       	sbci	r19, 0xFF	; 255
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					writetxtUART("Se guardo la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 456:	29 30       	cpi	r18, 0x09	; 9
 458:	31 05       	cpc	r19, r1
 45a:	7c f3       	brlt	.-34     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 45c:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <valor_pot1>
 460:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 464:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 468:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 46c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 470:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 47a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot2);
 47e:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <valor_pot2>
 482:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 486:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 48a:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 494:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot3);
 498:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <valor_pot3>
 49c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 4a0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 4a4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 4ae:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot4);
 4b2:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <valor_pot4>
 4b6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr=0;
 4ba:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 4be:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					writetxtUART("Se guardo la posicion 3\n");
 4c2:	82 e3       	ldi	r24, 0x32	; 50
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 a1 00 	call	0x142	; 0x142 <writetxtUART>
					break;
 4ca:	56 c1       	rjmp	.+684    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
				case 4:
					for (int i=0;i<13;i++){
						adr++;
 4cc:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 4d0:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 4da:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					writetxtUART("Se guardo la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 4de:	2f 5f       	subi	r18, 0xFF	; 255
 4e0:	3f 4f       	sbci	r19, 0xFF	; 255
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
				pulsador++;
			}
		}
		if (modo==1){
			cli();
			switch(posicion){
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
					eeprom_write_byte(adr,valor_pot4);
					adr=0;
					writetxtUART("Se guardo la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 4e8:	2d 30       	cpi	r18, 0x0D	; 13
 4ea:	31 05       	cpc	r19, r1
 4ec:	7c f3       	brlt	.-34     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
						adr++;
					}
					eeprom_write_byte(adr,valor_pot1);
 4ee:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <valor_pot1>
 4f2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 4f6:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 4fa:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 4fe:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 502:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 50c:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot2);
 510:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <valor_pot2>
 514:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 518:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 51c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 526:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot3);
 52a:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <valor_pot3>
 52e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr++;
 532:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 536:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 540:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					eeprom_write_byte(adr,valor_pot4);
 544:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <valor_pot4>
 548:	0e 94 cd 06 	call	0xd9a	; 0xd9a <eeprom_write_byte>
					adr=0;
 54c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 550:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					writetxtUART("Se guardo la posicion 4\n");
 554:	8b e4       	ldi	r24, 0x4B	; 75
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	0e 94 a1 00 	call	0x142	; 0x142 <writetxtUART>
					break;
 55c:	0d c1       	rjmp	.+538    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
				sei();
			posicion=0;
			}
		}else if(modo==2){
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	09 f0       	breq	.+2      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 562:	0a c1       	rjmp	.+532    	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
			cli();
 564:	f8 94       	cli
			switch(posicion){
 566:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <posicion>
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	09 f4       	brne	.+2      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 56e:	48 c0       	rjmp	.+144    	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
 570:	18 f4       	brcc	.+6      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	41 f0       	breq	.+16     	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 576:	fa c0       	rjmp	.+500    	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	09 f4       	brne	.+2      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
 57c:	82 c0       	rjmp	.+260    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
 57e:	84 30       	cpi	r24, 0x04	; 4
 580:	09 f4       	brne	.+2      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 582:	c0 c0       	rjmp	.+384    	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
 584:	f3 c0       	rjmp	.+486    	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
				case 1:
					adr=0;
 586:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 58a:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					valor_pot1_esc=eeprom_read_byte(adr);
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 596:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <valor_pot1_esc>
					adr++;
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 5a2:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 5a6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 5aa:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <valor_pot2_esc>
					adr++;
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 5b6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 5ba:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 5be:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <valor_pot3_esc>
					adr++;
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 5ca:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 5ce:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 5d2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <valor_pot4_esc>
					adr=0;
 5d6:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 5da:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					writetxtUART("Mostrando la posicion 1\n");
 5de:	84 e6       	ldi	r24, 0x64	; 100
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 a1 00 	call	0x142	; 0x142 <writetxtUART>
					break;
 5e6:	c2 c0       	rjmp	.+388    	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
				case 2:
					for (int i=0;i<5;i++){
						adr++;
 5e8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 5ec:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 5f6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					writetxtUART("Mostrando la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 5fa:	2f 5f       	subi	r18, 0xFF	; 255
 5fc:	3f 4f       	sbci	r19, 0xFF	; 255
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 600:	20 e0       	ldi	r18, 0x00	; 0
 602:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					writetxtUART("Mostrando la posicion 1\n");
					break;
				case 2:
					for (int i=0;i<5;i++){
 604:	25 30       	cpi	r18, 0x05	; 5
 606:	31 05       	cpc	r19, r1
 608:	7c f3       	brlt	.-34     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 60a:	c0 91 ce 01 	lds	r28, 0x01CE	; 0x8001ce <adr>
 60e:	d0 91 cf 01 	lds	r29, 0x01CF	; 0x8001cf <adr+0x1>
 612:	ce 01       	movw	r24, r28
 614:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 618:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <valor_pot1_esc>
					adr++;
 61c:	21 96       	adiw	r28, 0x01	; 1
 61e:	d0 93 cf 01 	sts	0x01CF, r29	; 0x8001cf <adr+0x1>
 622:	c0 93 ce 01 	sts	0x01CE, r28	; 0x8001ce <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 626:	ce 01       	movw	r24, r28
 628:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 62c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <valor_pot2_esc>
					adr++;
 630:	21 96       	adiw	r28, 0x01	; 1
 632:	d0 93 cf 01 	sts	0x01CF, r29	; 0x8001cf <adr+0x1>
 636:	c0 93 ce 01 	sts	0x01CE, r28	; 0x8001ce <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 63a:	ce 01       	movw	r24, r28
 63c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 640:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <valor_pot3_esc>
					adr++;
 644:	ce 01       	movw	r24, r28
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 64c:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 650:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 654:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <valor_pot4_esc>
					adr=0;
 658:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 65c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					writetxtUART("Mostrando la posicion 2\n");
 660:	8d e7       	ldi	r24, 0x7D	; 125
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	0e 94 a1 00 	call	0x142	; 0x142 <writetxtUART>
					break;
 668:	81 c0       	rjmp	.+258    	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
				case 3:
					for (int i=0;i<9;i++){
						adr++;
 66a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 66e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 678:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					writetxtUART("Mostrando la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 67c:	2f 5f       	subi	r18, 0xFF	; 255
 67e:	3f 4f       	sbci	r19, 0xFF	; 255
 680:	02 c0       	rjmp	.+4      	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					writetxtUART("Mostrando la posicion 2\n");
					break;
				case 3:
					for (int i=0;i<9;i++){
 686:	29 30       	cpi	r18, 0x09	; 9
 688:	31 05       	cpc	r19, r1
 68a:	7c f3       	brlt	.-34     	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 68c:	c0 91 ce 01 	lds	r28, 0x01CE	; 0x8001ce <adr>
 690:	d0 91 cf 01 	lds	r29, 0x01CF	; 0x8001cf <adr+0x1>
 694:	ce 01       	movw	r24, r28
 696:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 69a:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <valor_pot1_esc>
					adr++;
 69e:	21 96       	adiw	r28, 0x01	; 1
 6a0:	d0 93 cf 01 	sts	0x01CF, r29	; 0x8001cf <adr+0x1>
 6a4:	c0 93 ce 01 	sts	0x01CE, r28	; 0x8001ce <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 6a8:	ce 01       	movw	r24, r28
 6aa:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 6ae:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <valor_pot2_esc>
					adr++;
 6b2:	21 96       	adiw	r28, 0x01	; 1
 6b4:	d0 93 cf 01 	sts	0x01CF, r29	; 0x8001cf <adr+0x1>
 6b8:	c0 93 ce 01 	sts	0x01CE, r28	; 0x8001ce <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 6bc:	ce 01       	movw	r24, r28
 6be:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 6c2:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <valor_pot3_esc>
					adr++;
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 6ce:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 6d2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 6d6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <valor_pot4_esc>
					adr=0;
 6da:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 6de:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					writetxtUART("Mostrando la posicion 3\n");
 6e2:	86 e9       	ldi	r24, 0x96	; 150
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	0e 94 a1 00 	call	0x142	; 0x142 <writetxtUART>
					break;
 6ea:	40 c0       	rjmp	.+128    	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
				case 4:
					for (int i=0;i<13;i++){
						adr++;
 6ec:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <adr>
 6f0:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <adr+0x1>
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 6fa:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					writetxtUART("Mostrando la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 6fe:	2f 5f       	subi	r18, 0xFF	; 255
 700:	3f 4f       	sbci	r19, 0xFF	; 255
 702:	02 c0       	rjmp	.+4      	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
				sei();
			posicion=0;
			}
		}else if(modo==2){
			cli();
			switch(posicion){
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
					valor_pot4_esc=eeprom_read_byte(adr);
					adr=0;
					writetxtUART("Mostrando la posicion 3\n");
					break;
				case 4:
					for (int i=0;i<13;i++){
 708:	2d 30       	cpi	r18, 0x0D	; 13
 70a:	31 05       	cpc	r19, r1
 70c:	7c f3       	brlt	.-34     	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
						adr++;
					}
					valor_pot1_esc=eeprom_read_byte(adr);
 70e:	c0 91 ce 01 	lds	r28, 0x01CE	; 0x8001ce <adr>
 712:	d0 91 cf 01 	lds	r29, 0x01CF	; 0x8001cf <adr+0x1>
 716:	ce 01       	movw	r24, r28
 718:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 71c:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <valor_pot1_esc>
					adr++;
 720:	21 96       	adiw	r28, 0x01	; 1
 722:	d0 93 cf 01 	sts	0x01CF, r29	; 0x8001cf <adr+0x1>
 726:	c0 93 ce 01 	sts	0x01CE, r28	; 0x8001ce <adr>
					valor_pot2_esc=eeprom_read_byte(adr);
 72a:	ce 01       	movw	r24, r28
 72c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 730:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <valor_pot2_esc>
					adr++;
 734:	21 96       	adiw	r28, 0x01	; 1
 736:	d0 93 cf 01 	sts	0x01CF, r29	; 0x8001cf <adr+0x1>
 73a:	c0 93 ce 01 	sts	0x01CE, r28	; 0x8001ce <adr>
					valor_pot3_esc=eeprom_read_byte(adr);
 73e:	ce 01       	movw	r24, r28
 740:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 744:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <valor_pot3_esc>
					adr++;
 748:	ce 01       	movw	r24, r28
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <adr+0x1>
 750:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <adr>
					valor_pot4_esc=eeprom_read_byte(adr);
 754:	0e 94 c5 06 	call	0xd8a	; 0xd8a <eeprom_read_byte>
 758:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <valor_pot4_esc>
					adr=0;
 75c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <adr+0x1>
 760:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <adr>
					writetxtUART("Mostrando la posicion 4\n");
 764:	8f ea       	ldi	r24, 0xAF	; 175
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	0e 94 a1 00 	call	0x142	; 0x142 <writetxtUART>
					break;
			}
			sei();
 76c:	78 94       	sei
			posicion=0;
 76e:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <posicion>
 772:	02 c0       	rjmp	.+4      	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
		}
		//terminan if de modos	
	}else{
	pulsador=0;}
 774:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <pulsador>
}
 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti

0000079e <__vector_21>:

ISR(ADC_vect){
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	8f 93       	push	r24
 7aa:	ef 93       	push	r30
 7ac:	ff 93       	push	r31
		switch_pot=(ADMUX&0x0F);
 7ae:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 7b2:	8f 70       	andi	r24, 0x0F	; 15
 7b4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end>
		
		if(switch_pot==7){
 7b8:	87 30       	cpi	r24, 0x07	; 7
 7ba:	59 f4       	brne	.+22     	; 0x7d2 <__vector_21+0x34>
			valor_pot1=ADCH;
 7bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 7c0:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <valor_pot1>
			ADMUX=((ADMUX&0xF0)|6);
 7c4:	ec e7       	ldi	r30, 0x7C	; 124
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	80 7f       	andi	r24, 0xF0	; 240
 7cc:	86 60       	ori	r24, 0x06	; 6
 7ce:	80 83       	st	Z, r24
 7d0:	24 c0       	rjmp	.+72     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			} else if(switch_pot==6){
 7d2:	86 30       	cpi	r24, 0x06	; 6
 7d4:	59 f4       	brne	.+22     	; 0x7ec <__vector_21+0x4e>
			valor_pot2=ADCH;
 7d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 7da:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <valor_pot2>
			ADMUX=((ADMUX&0xF0)|5);
 7de:	ec e7       	ldi	r30, 0x7C	; 124
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	80 7f       	andi	r24, 0xF0	; 240
 7e6:	85 60       	ori	r24, 0x05	; 5
 7e8:	80 83       	st	Z, r24
 7ea:	17 c0       	rjmp	.+46     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			}else if(switch_pot==5){
 7ec:	85 30       	cpi	r24, 0x05	; 5
 7ee:	59 f4       	brne	.+22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
			valor_pot3=ADCH;
 7f0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 7f4:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <valor_pot3>
			ADMUX=((ADMUX&0xF0)|4);
 7f8:	ec e7       	ldi	r30, 0x7C	; 124
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	80 7f       	andi	r24, 0xF0	; 240
 800:	84 60       	ori	r24, 0x04	; 4
 802:	80 83       	st	Z, r24
 804:	0a c0       	rjmp	.+20     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			}else{
			valor_pot4=ADCH;
 806:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 80a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <valor_pot4>
			ADMUX=((ADMUX&0xF0)|7);
 80e:	ec e7       	ldi	r30, 0x7C	; 124
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	80 7f       	andi	r24, 0xF0	; 240
 816:	87 60       	ori	r24, 0x07	; 7
 818:	80 83       	st	Z, r24
		}
		
		ADCSRA|=(1<<ADIF);//apagar bandera
 81a:	ea e7       	ldi	r30, 0x7A	; 122
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	80 61       	ori	r24, 0x10	; 16
 822:	80 83       	st	Z, r24
}
 824:	ff 91       	pop	r31
 826:	ef 91       	pop	r30
 828:	8f 91       	pop	r24
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <initPWM0>:
#include "pwm_0.h"
#include <avr/io.h>
#include <stdint.h>

void initPWM0(uint8_t invertido, uint16_t preescaler){
	DDRD|=(1<<DDD6)|(1<<DDD5);
 834:	9a b1       	in	r25, 0x0a	; 10
 836:	90 66       	ori	r25, 0x60	; 96
 838:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0A=0;
 83a:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0;
 83c:	15 bc       	out	0x25, r1	; 37
	
	if (invertido==1){
 83e:	81 30       	cpi	r24, 0x01	; 1
 840:	39 f4       	brne	.+14     	; 0x850 <initPWM0+0x1c>
		TCCR0A|=(1<<COM0A1)|(1<<COM0A0);
 842:	84 b5       	in	r24, 0x24	; 36
 844:	80 6c       	ori	r24, 0xC0	; 192
 846:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<COM0B1)|(1<<COM0B0);
 848:	84 b5       	in	r24, 0x24	; 36
 84a:	80 63       	ori	r24, 0x30	; 48
 84c:	84 bd       	out	0x24, r24	; 36
 84e:	06 c0       	rjmp	.+12     	; 0x85c <initPWM0+0x28>
		}else{
		TCCR0A|=(1<<COM0A1);
 850:	84 b5       	in	r24, 0x24	; 36
 852:	80 68       	ori	r24, 0x80	; 128
 854:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<COM0B1);
 856:	84 b5       	in	r24, 0x24	; 36
 858:	80 62       	ori	r24, 0x20	; 32
 85a:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |=(1<<WGM00)|(1<<WGM01);
 85c:	84 b5       	in	r24, 0x24	; 36
 85e:	83 60       	ori	r24, 0x03	; 3
 860:	84 bd       	out	0x24, r24	; 36
	
	switch (preescaler){
 862:	60 34       	cpi	r22, 0x40	; 64
 864:	71 05       	cpc	r23, r1
 866:	c1 f0       	breq	.+48     	; 0x898 <initPWM0+0x64>
 868:	38 f4       	brcc	.+14     	; 0x878 <initPWM0+0x44>
 86a:	61 15       	cp	r22, r1
 86c:	71 05       	cpc	r23, r1
 86e:	61 f0       	breq	.+24     	; 0x888 <initPWM0+0x54>
 870:	68 30       	cpi	r22, 0x08	; 8
 872:	71 05       	cpc	r23, r1
 874:	69 f0       	breq	.+26     	; 0x890 <initPWM0+0x5c>
 876:	1c c0       	rjmp	.+56     	; 0x8b0 <initPWM0+0x7c>
 878:	61 15       	cp	r22, r1
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	78 07       	cpc	r23, r24
 87e:	81 f0       	breq	.+32     	; 0x8a0 <initPWM0+0x6c>
 880:	61 15       	cp	r22, r1
 882:	74 40       	sbci	r23, 0x04	; 4
 884:	89 f0       	breq	.+34     	; 0x8a8 <initPWM0+0x74>
 886:	14 c0       	rjmp	.+40     	; 0x8b0 <initPWM0+0x7c>
		case 0:
		TCCR0B |=(1<<CS00);
 888:	85 b5       	in	r24, 0x25	; 37
 88a:	81 60       	ori	r24, 0x01	; 1
 88c:	85 bd       	out	0x25, r24	; 37
		break;
 88e:	08 95       	ret
		case 8:
		TCCR0B |=(1<<CS01);
 890:	85 b5       	in	r24, 0x25	; 37
 892:	82 60       	ori	r24, 0x02	; 2
 894:	85 bd       	out	0x25, r24	; 37
		break;
 896:	08 95       	ret
		case 64:
		TCCR0B |=(1<<CS00)|(1<<CS01);
 898:	85 b5       	in	r24, 0x25	; 37
 89a:	83 60       	ori	r24, 0x03	; 3
 89c:	85 bd       	out	0x25, r24	; 37
		break;
 89e:	08 95       	ret
		case 256:
		TCCR0B |=(1<<CS02);
 8a0:	85 b5       	in	r24, 0x25	; 37
 8a2:	84 60       	ori	r24, 0x04	; 4
 8a4:	85 bd       	out	0x25, r24	; 37
		break;
 8a6:	08 95       	ret
		case 1024:
		TCCR0B |=(1<<CS00)|(1<<CS02); //preescaler de 1024 para un periodo máximo de 4 segundos
 8a8:	85 b5       	in	r24, 0x25	; 37
 8aa:	85 60       	ori	r24, 0x05	; 5
 8ac:	85 bd       	out	0x25, r24	; 37
		break;
 8ae:	08 95       	ret
		default:
		TCCR0B|=(1<<CS00);
 8b0:	85 b5       	in	r24, 0x25	; 37
 8b2:	81 60       	ori	r24, 0x01	; 1
 8b4:	85 bd       	out	0x25, r24	; 37
 8b6:	08 95       	ret

000008b8 <updateDC0>:
	}
	
}

void updateDC0(uint8_t duty_cycle,uint8_t duty_cycle2){
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	c6 2f       	mov	r28, r22
	uint8_t a;
	uint8_t a2;
	a=((0.05*duty_cycle)+8);
 8be:	68 2f       	mov	r22, r24
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
 8ca:	2d ec       	ldi	r18, 0xCD	; 205
 8cc:	3c ec       	ldi	r19, 0xCC	; 204
 8ce:	4c e4       	ldi	r20, 0x4C	; 76
 8d0:	5d e3       	ldi	r21, 0x3D	; 61
 8d2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
 8d6:	20 e0       	ldi	r18, 0x00	; 0
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	40 e0       	ldi	r20, 0x00	; 0
 8dc:	51 e4       	ldi	r21, 0x41	; 65
 8de:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__addsf3>
 8e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fixunssfsi>
 8e6:	d6 2f       	mov	r29, r22
	a2=((0.05*duty_cycle2)+8);
 8e8:	6c 2f       	mov	r22, r28
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
 8f4:	2d ec       	ldi	r18, 0xCD	; 205
 8f6:	3c ec       	ldi	r19, 0xCC	; 204
 8f8:	4c e4       	ldi	r20, 0x4C	; 76
 8fa:	5d e3       	ldi	r21, 0x3D	; 61
 8fc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
 900:	20 e0       	ldi	r18, 0x00	; 0
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	40 e0       	ldi	r20, 0x00	; 0
 906:	51 e4       	ldi	r21, 0x41	; 65
 908:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__addsf3>
 90c:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fixunssfsi>
	//pot2--> eyeballs
	OCR0A=a;
 910:	d7 bd       	out	0x27, r29	; 39
	//pot1--> boca
	OCR0B=a2;
 912:	68 bd       	out	0x28, r22	; 40
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <initPWM1>:

#include "pwm_1.h"
uint8_t y=0;
uint8_t y2=0;
void initPWM1(uint8_t invertido, uint16_t preescaler){
	DDRB |=(1<<DDB1)|(1<<DDB2);
 91a:	94 b1       	in	r25, 0x04	; 4
 91c:	96 60       	ori	r25, 0x06	; 6
 91e:	94 b9       	out	0x04, r25	; 4
	TCCR1A=0;
 920:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0;
 924:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	if (invertido==1){
 928:	81 30       	cpi	r24, 0x01	; 1
 92a:	49 f4       	brne	.+18     	; 0x93e <initPWM1+0x24>
		TCCR1A |=(1<<COM1A1)|(1<<COM1A0);//high
 92c:	e0 e8       	ldi	r30, 0x80	; 128
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	80 81       	ld	r24, Z
 932:	80 6c       	ori	r24, 0xC0	; 192
 934:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1B1)|(1<<COM1B0);
 936:	80 81       	ld	r24, Z
 938:	80 63       	ori	r24, 0x30	; 48
 93a:	80 83       	st	Z, r24
 93c:	08 c0       	rjmp	.+16     	; 0x94e <initPWM1+0x34>
		} else{
		TCCR1A |=(1<<COM1A1); //low
 93e:	e0 e8       	ldi	r30, 0x80	; 128
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	80 68       	ori	r24, 0x80	; 128
 946:	80 83       	st	Z, r24
		TCCR1A|=(1<<COM1B1);
 948:	80 81       	ld	r24, Z
 94a:	80 62       	ori	r24, 0x20	; 32
 94c:	80 83       	st	Z, r24
	}
	
	switch(preescaler){
 94e:	60 34       	cpi	r22, 0x40	; 64
 950:	71 05       	cpc	r23, r1
 952:	e1 f0       	breq	.+56     	; 0x98c <initPWM1+0x72>
 954:	38 f4       	brcc	.+14     	; 0x964 <initPWM1+0x4a>
 956:	61 15       	cp	r22, r1
 958:	71 05       	cpc	r23, r1
 95a:	61 f0       	breq	.+24     	; 0x974 <initPWM1+0x5a>
 95c:	68 30       	cpi	r22, 0x08	; 8
 95e:	71 05       	cpc	r23, r1
 960:	79 f0       	breq	.+30     	; 0x980 <initPWM1+0x66>
 962:	26 c0       	rjmp	.+76     	; 0x9b0 <initPWM1+0x96>
 964:	61 15       	cp	r22, r1
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	78 07       	cpc	r23, r24
 96a:	b1 f0       	breq	.+44     	; 0x998 <initPWM1+0x7e>
 96c:	61 15       	cp	r22, r1
 96e:	74 40       	sbci	r23, 0x04	; 4
 970:	c9 f0       	breq	.+50     	; 0x9a4 <initPWM1+0x8a>
 972:	1e c0       	rjmp	.+60     	; 0x9b0 <initPWM1+0x96>
		case 0:
		TCCR1B |=(1<<CS10);
 974:	e1 e8       	ldi	r30, 0x81	; 129
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	81 60       	ori	r24, 0x01	; 1
 97c:	80 83       	st	Z, r24
		break;
 97e:	1d c0       	rjmp	.+58     	; 0x9ba <initPWM1+0xa0>
		case 8:
		TCCR1B |=(1<<CS11);
 980:	e1 e8       	ldi	r30, 0x81	; 129
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	82 60       	ori	r24, 0x02	; 2
 988:	80 83       	st	Z, r24
		break;
 98a:	17 c0       	rjmp	.+46     	; 0x9ba <initPWM1+0xa0>
		case 64:
		TCCR1B |=(1<<CS10)|(1<<CS11);
 98c:	e1 e8       	ldi	r30, 0x81	; 129
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	80 81       	ld	r24, Z
 992:	83 60       	ori	r24, 0x03	; 3
 994:	80 83       	st	Z, r24
		break;
 996:	11 c0       	rjmp	.+34     	; 0x9ba <initPWM1+0xa0>
		case 256:
		TCCR1B |=(1<<CS12);
 998:	e1 e8       	ldi	r30, 0x81	; 129
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	84 60       	ori	r24, 0x04	; 4
 9a0:	80 83       	st	Z, r24
		break;
 9a2:	0b c0       	rjmp	.+22     	; 0x9ba <initPWM1+0xa0>
		case 1024:
		TCCR1B |=(1<<CS12)|(1<<CS10); //preescaler de 1024 para un periodo máximo de 4 segundos
 9a4:	e1 e8       	ldi	r30, 0x81	; 129
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	85 60       	ori	r24, 0x05	; 5
 9ac:	80 83       	st	Z, r24
		break;
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <initPWM1+0xa0>
		default:
		TCCR1B|=(1<<CS10);
 9b0:	e1 e8       	ldi	r30, 0x81	; 129
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	80 81       	ld	r24, Z
 9b6:	81 60       	ori	r24, 0x01	; 1
 9b8:	80 83       	st	Z, r24
	}
	
	//FAST PWM 8 bits
	TCCR1A |=(1<<WGM11);
 9ba:	e0 e8       	ldi	r30, 0x80	; 128
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	82 60       	ori	r24, 0x02	; 2
 9c2:	80 83       	st	Z, r24
	TCCR1B |=(1<<WGM12)|(1<<WGM12);
 9c4:	e1 e8       	ldi	r30, 0x81	; 129
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
 9ca:	88 60       	ori	r24, 0x08	; 8
 9cc:	80 83       	st	Z, r24
	
	ICR1=160;
 9ce:	80 ea       	ldi	r24, 0xA0	; 160
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 9d6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 9da:	08 95       	ret

000009dc <updateDC1>:
	
	
}


void updateDC1(uint8_t prc_duty, uint8_t prc_duty2){
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	d6 2f       	mov	r29, r22
	y=((0.05*prc_duty)+4.66);
 9e2:	68 2f       	mov	r22, r24
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
 9ee:	2d ec       	ldi	r18, 0xCD	; 205
 9f0:	3c ec       	ldi	r19, 0xCC	; 204
 9f2:	4c e4       	ldi	r20, 0x4C	; 76
 9f4:	5d e3       	ldi	r21, 0x3D	; 61
 9f6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
 9fa:	28 eb       	ldi	r18, 0xB8	; 184
 9fc:	3e e1       	ldi	r19, 0x1E	; 30
 9fe:	45 e9       	ldi	r20, 0x95	; 149
 a00:	50 e4       	ldi	r21, 0x40	; 64
 a02:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__addsf3>
 a06:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fixunssfsi>
 a0a:	c6 2f       	mov	r28, r22
 a0c:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <y>
	y2=((0.05*prc_duty2)+4.66);
 a10:	6d 2f       	mov	r22, r29
 a12:	70 e0       	ldi	r23, 0x00	; 0
 a14:	80 e0       	ldi	r24, 0x00	; 0
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatsisf>
 a1c:	2d ec       	ldi	r18, 0xCD	; 205
 a1e:	3c ec       	ldi	r19, 0xCC	; 204
 a20:	4c e4       	ldi	r20, 0x4C	; 76
 a22:	5d e3       	ldi	r21, 0x3D	; 61
 a24:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
 a28:	28 eb       	ldi	r18, 0xB8	; 184
 a2a:	3e e1       	ldi	r19, 0x1E	; 30
 a2c:	45 e9       	ldi	r20, 0x95	; 149
 a2e:	50 e4       	ldi	r21, 0x40	; 64
 a30:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__addsf3>
 a34:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fixunssfsi>
 a38:	60 93 d7 01 	sts	0x01D7, r22	; 0x8001d7 <y2>
	//OCR1A-->pot4 eyelid derecha
	OCR1A=y;
 a3c:	6c 2f       	mov	r22, r28
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 a44:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	//OCR1B-->pot3 eyelid izquierda
	OCR1B=y2;
 a48:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <y2>
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 a52:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	08 95       	ret

00000a5c <__subsf3>:
 a5c:	50 58       	subi	r21, 0x80	; 128

00000a5e <__addsf3>:
 a5e:	bb 27       	eor	r27, r27
 a60:	aa 27       	eor	r26, r26
 a62:	0e 94 46 05 	call	0xa8c	; 0xa8c <__addsf3x>
 a66:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_round>
 a6a:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_pscA>
 a6e:	38 f0       	brcs	.+14     	; 0xa7e <__addsf3+0x20>
 a70:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fp_pscB>
 a74:	20 f0       	brcs	.+8      	; 0xa7e <__addsf3+0x20>
 a76:	39 f4       	brne	.+14     	; 0xa86 <__addsf3+0x28>
 a78:	9f 3f       	cpi	r25, 0xFF	; 255
 a7a:	19 f4       	brne	.+6      	; 0xa82 <__addsf3+0x24>
 a7c:	26 f4       	brtc	.+8      	; 0xa86 <__addsf3+0x28>
 a7e:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_nan>
 a82:	0e f4       	brtc	.+2      	; 0xa86 <__addsf3+0x28>
 a84:	e0 95       	com	r30
 a86:	e7 fb       	bst	r30, 7
 a88:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_inf>

00000a8c <__addsf3x>:
 a8c:	e9 2f       	mov	r30, r25
 a8e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fp_split3>
 a92:	58 f3       	brcs	.-42     	; 0xa6a <__addsf3+0xc>
 a94:	ba 17       	cp	r27, r26
 a96:	62 07       	cpc	r22, r18
 a98:	73 07       	cpc	r23, r19
 a9a:	84 07       	cpc	r24, r20
 a9c:	95 07       	cpc	r25, r21
 a9e:	20 f0       	brcs	.+8      	; 0xaa8 <__addsf3x+0x1c>
 aa0:	79 f4       	brne	.+30     	; 0xac0 <__addsf3x+0x34>
 aa2:	a6 f5       	brtc	.+104    	; 0xb0c <__addsf3x+0x80>
 aa4:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_zero>
 aa8:	0e f4       	brtc	.+2      	; 0xaac <__addsf3x+0x20>
 aaa:	e0 95       	com	r30
 aac:	0b 2e       	mov	r0, r27
 aae:	ba 2f       	mov	r27, r26
 ab0:	a0 2d       	mov	r26, r0
 ab2:	0b 01       	movw	r0, r22
 ab4:	b9 01       	movw	r22, r18
 ab6:	90 01       	movw	r18, r0
 ab8:	0c 01       	movw	r0, r24
 aba:	ca 01       	movw	r24, r20
 abc:	a0 01       	movw	r20, r0
 abe:	11 24       	eor	r1, r1
 ac0:	ff 27       	eor	r31, r31
 ac2:	59 1b       	sub	r21, r25
 ac4:	99 f0       	breq	.+38     	; 0xaec <__addsf3x+0x60>
 ac6:	59 3f       	cpi	r21, 0xF9	; 249
 ac8:	50 f4       	brcc	.+20     	; 0xade <__addsf3x+0x52>
 aca:	50 3e       	cpi	r21, 0xE0	; 224
 acc:	68 f1       	brcs	.+90     	; 0xb28 <__addsf3x+0x9c>
 ace:	1a 16       	cp	r1, r26
 ad0:	f0 40       	sbci	r31, 0x00	; 0
 ad2:	a2 2f       	mov	r26, r18
 ad4:	23 2f       	mov	r18, r19
 ad6:	34 2f       	mov	r19, r20
 ad8:	44 27       	eor	r20, r20
 ada:	58 5f       	subi	r21, 0xF8	; 248
 adc:	f3 cf       	rjmp	.-26     	; 0xac4 <__addsf3x+0x38>
 ade:	46 95       	lsr	r20
 ae0:	37 95       	ror	r19
 ae2:	27 95       	ror	r18
 ae4:	a7 95       	ror	r26
 ae6:	f0 40       	sbci	r31, 0x00	; 0
 ae8:	53 95       	inc	r21
 aea:	c9 f7       	brne	.-14     	; 0xade <__addsf3x+0x52>
 aec:	7e f4       	brtc	.+30     	; 0xb0c <__addsf3x+0x80>
 aee:	1f 16       	cp	r1, r31
 af0:	ba 0b       	sbc	r27, r26
 af2:	62 0b       	sbc	r22, r18
 af4:	73 0b       	sbc	r23, r19
 af6:	84 0b       	sbc	r24, r20
 af8:	ba f0       	brmi	.+46     	; 0xb28 <__addsf3x+0x9c>
 afa:	91 50       	subi	r25, 0x01	; 1
 afc:	a1 f0       	breq	.+40     	; 0xb26 <__addsf3x+0x9a>
 afe:	ff 0f       	add	r31, r31
 b00:	bb 1f       	adc	r27, r27
 b02:	66 1f       	adc	r22, r22
 b04:	77 1f       	adc	r23, r23
 b06:	88 1f       	adc	r24, r24
 b08:	c2 f7       	brpl	.-16     	; 0xafa <__addsf3x+0x6e>
 b0a:	0e c0       	rjmp	.+28     	; 0xb28 <__addsf3x+0x9c>
 b0c:	ba 0f       	add	r27, r26
 b0e:	62 1f       	adc	r22, r18
 b10:	73 1f       	adc	r23, r19
 b12:	84 1f       	adc	r24, r20
 b14:	48 f4       	brcc	.+18     	; 0xb28 <__addsf3x+0x9c>
 b16:	87 95       	ror	r24
 b18:	77 95       	ror	r23
 b1a:	67 95       	ror	r22
 b1c:	b7 95       	ror	r27
 b1e:	f7 95       	ror	r31
 b20:	9e 3f       	cpi	r25, 0xFE	; 254
 b22:	08 f0       	brcs	.+2      	; 0xb26 <__addsf3x+0x9a>
 b24:	b0 cf       	rjmp	.-160    	; 0xa86 <__addsf3+0x28>
 b26:	93 95       	inc	r25
 b28:	88 0f       	add	r24, r24
 b2a:	08 f0       	brcs	.+2      	; 0xb2e <__addsf3x+0xa2>
 b2c:	99 27       	eor	r25, r25
 b2e:	ee 0f       	add	r30, r30
 b30:	97 95       	ror	r25
 b32:	87 95       	ror	r24
 b34:	08 95       	ret

00000b36 <__fixunssfsi>:
 b36:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_splitA>
 b3a:	88 f0       	brcs	.+34     	; 0xb5e <__fixunssfsi+0x28>
 b3c:	9f 57       	subi	r25, 0x7F	; 127
 b3e:	98 f0       	brcs	.+38     	; 0xb66 <__fixunssfsi+0x30>
 b40:	b9 2f       	mov	r27, r25
 b42:	99 27       	eor	r25, r25
 b44:	b7 51       	subi	r27, 0x17	; 23
 b46:	b0 f0       	brcs	.+44     	; 0xb74 <__fixunssfsi+0x3e>
 b48:	e1 f0       	breq	.+56     	; 0xb82 <__fixunssfsi+0x4c>
 b4a:	66 0f       	add	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	1a f0       	brmi	.+6      	; 0xb5a <__fixunssfsi+0x24>
 b54:	ba 95       	dec	r27
 b56:	c9 f7       	brne	.-14     	; 0xb4a <__fixunssfsi+0x14>
 b58:	14 c0       	rjmp	.+40     	; 0xb82 <__fixunssfsi+0x4c>
 b5a:	b1 30       	cpi	r27, 0x01	; 1
 b5c:	91 f0       	breq	.+36     	; 0xb82 <__fixunssfsi+0x4c>
 b5e:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_zero>
 b62:	b1 e0       	ldi	r27, 0x01	; 1
 b64:	08 95       	ret
 b66:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_zero>
 b6a:	67 2f       	mov	r22, r23
 b6c:	78 2f       	mov	r23, r24
 b6e:	88 27       	eor	r24, r24
 b70:	b8 5f       	subi	r27, 0xF8	; 248
 b72:	39 f0       	breq	.+14     	; 0xb82 <__fixunssfsi+0x4c>
 b74:	b9 3f       	cpi	r27, 0xF9	; 249
 b76:	cc f3       	brlt	.-14     	; 0xb6a <__fixunssfsi+0x34>
 b78:	86 95       	lsr	r24
 b7a:	77 95       	ror	r23
 b7c:	67 95       	ror	r22
 b7e:	b3 95       	inc	r27
 b80:	d9 f7       	brne	.-10     	; 0xb78 <__fixunssfsi+0x42>
 b82:	3e f4       	brtc	.+14     	; 0xb92 <__fixunssfsi+0x5c>
 b84:	90 95       	com	r25
 b86:	80 95       	com	r24
 b88:	70 95       	com	r23
 b8a:	61 95       	neg	r22
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	08 95       	ret

00000b94 <__floatunsisf>:
 b94:	e8 94       	clt
 b96:	09 c0       	rjmp	.+18     	; 0xbaa <__floatsisf+0x12>

00000b98 <__floatsisf>:
 b98:	97 fb       	bst	r25, 7
 b9a:	3e f4       	brtc	.+14     	; 0xbaa <__floatsisf+0x12>
 b9c:	90 95       	com	r25
 b9e:	80 95       	com	r24
 ba0:	70 95       	com	r23
 ba2:	61 95       	neg	r22
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	99 23       	and	r25, r25
 bac:	a9 f0       	breq	.+42     	; 0xbd8 <__floatsisf+0x40>
 bae:	f9 2f       	mov	r31, r25
 bb0:	96 e9       	ldi	r25, 0x96	; 150
 bb2:	bb 27       	eor	r27, r27
 bb4:	93 95       	inc	r25
 bb6:	f6 95       	lsr	r31
 bb8:	87 95       	ror	r24
 bba:	77 95       	ror	r23
 bbc:	67 95       	ror	r22
 bbe:	b7 95       	ror	r27
 bc0:	f1 11       	cpse	r31, r1
 bc2:	f8 cf       	rjmp	.-16     	; 0xbb4 <__floatsisf+0x1c>
 bc4:	fa f4       	brpl	.+62     	; 0xc04 <__floatsisf+0x6c>
 bc6:	bb 0f       	add	r27, r27
 bc8:	11 f4       	brne	.+4      	; 0xbce <__floatsisf+0x36>
 bca:	60 ff       	sbrs	r22, 0
 bcc:	1b c0       	rjmp	.+54     	; 0xc04 <__floatsisf+0x6c>
 bce:	6f 5f       	subi	r22, 0xFF	; 255
 bd0:	7f 4f       	sbci	r23, 0xFF	; 255
 bd2:	8f 4f       	sbci	r24, 0xFF	; 255
 bd4:	9f 4f       	sbci	r25, 0xFF	; 255
 bd6:	16 c0       	rjmp	.+44     	; 0xc04 <__floatsisf+0x6c>
 bd8:	88 23       	and	r24, r24
 bda:	11 f0       	breq	.+4      	; 0xbe0 <__floatsisf+0x48>
 bdc:	96 e9       	ldi	r25, 0x96	; 150
 bde:	11 c0       	rjmp	.+34     	; 0xc02 <__floatsisf+0x6a>
 be0:	77 23       	and	r23, r23
 be2:	21 f0       	breq	.+8      	; 0xbec <__floatsisf+0x54>
 be4:	9e e8       	ldi	r25, 0x8E	; 142
 be6:	87 2f       	mov	r24, r23
 be8:	76 2f       	mov	r23, r22
 bea:	05 c0       	rjmp	.+10     	; 0xbf6 <__floatsisf+0x5e>
 bec:	66 23       	and	r22, r22
 bee:	71 f0       	breq	.+28     	; 0xc0c <__floatsisf+0x74>
 bf0:	96 e8       	ldi	r25, 0x86	; 134
 bf2:	86 2f       	mov	r24, r22
 bf4:	70 e0       	ldi	r23, 0x00	; 0
 bf6:	60 e0       	ldi	r22, 0x00	; 0
 bf8:	2a f0       	brmi	.+10     	; 0xc04 <__floatsisf+0x6c>
 bfa:	9a 95       	dec	r25
 bfc:	66 0f       	add	r22, r22
 bfe:	77 1f       	adc	r23, r23
 c00:	88 1f       	adc	r24, r24
 c02:	da f7       	brpl	.-10     	; 0xbfa <__floatsisf+0x62>
 c04:	88 0f       	add	r24, r24
 c06:	96 95       	lsr	r25
 c08:	87 95       	ror	r24
 c0a:	97 f9       	bld	r25, 7
 c0c:	08 95       	ret

00000c0e <__fp_inf>:
 c0e:	97 f9       	bld	r25, 7
 c10:	9f 67       	ori	r25, 0x7F	; 127
 c12:	80 e8       	ldi	r24, 0x80	; 128
 c14:	70 e0       	ldi	r23, 0x00	; 0
 c16:	60 e0       	ldi	r22, 0x00	; 0
 c18:	08 95       	ret

00000c1a <__fp_nan>:
 c1a:	9f ef       	ldi	r25, 0xFF	; 255
 c1c:	80 ec       	ldi	r24, 0xC0	; 192
 c1e:	08 95       	ret

00000c20 <__fp_pscA>:
 c20:	00 24       	eor	r0, r0
 c22:	0a 94       	dec	r0
 c24:	16 16       	cp	r1, r22
 c26:	17 06       	cpc	r1, r23
 c28:	18 06       	cpc	r1, r24
 c2a:	09 06       	cpc	r0, r25
 c2c:	08 95       	ret

00000c2e <__fp_pscB>:
 c2e:	00 24       	eor	r0, r0
 c30:	0a 94       	dec	r0
 c32:	12 16       	cp	r1, r18
 c34:	13 06       	cpc	r1, r19
 c36:	14 06       	cpc	r1, r20
 c38:	05 06       	cpc	r0, r21
 c3a:	08 95       	ret

00000c3c <__fp_round>:
 c3c:	09 2e       	mov	r0, r25
 c3e:	03 94       	inc	r0
 c40:	00 0c       	add	r0, r0
 c42:	11 f4       	brne	.+4      	; 0xc48 <__fp_round+0xc>
 c44:	88 23       	and	r24, r24
 c46:	52 f0       	brmi	.+20     	; 0xc5c <__fp_round+0x20>
 c48:	bb 0f       	add	r27, r27
 c4a:	40 f4       	brcc	.+16     	; 0xc5c <__fp_round+0x20>
 c4c:	bf 2b       	or	r27, r31
 c4e:	11 f4       	brne	.+4      	; 0xc54 <__fp_round+0x18>
 c50:	60 ff       	sbrs	r22, 0
 c52:	04 c0       	rjmp	.+8      	; 0xc5c <__fp_round+0x20>
 c54:	6f 5f       	subi	r22, 0xFF	; 255
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	08 95       	ret

00000c5e <__fp_split3>:
 c5e:	57 fd       	sbrc	r21, 7
 c60:	90 58       	subi	r25, 0x80	; 128
 c62:	44 0f       	add	r20, r20
 c64:	55 1f       	adc	r21, r21
 c66:	59 f0       	breq	.+22     	; 0xc7e <__fp_splitA+0x10>
 c68:	5f 3f       	cpi	r21, 0xFF	; 255
 c6a:	71 f0       	breq	.+28     	; 0xc88 <__fp_splitA+0x1a>
 c6c:	47 95       	ror	r20

00000c6e <__fp_splitA>:
 c6e:	88 0f       	add	r24, r24
 c70:	97 fb       	bst	r25, 7
 c72:	99 1f       	adc	r25, r25
 c74:	61 f0       	breq	.+24     	; 0xc8e <__fp_splitA+0x20>
 c76:	9f 3f       	cpi	r25, 0xFF	; 255
 c78:	79 f0       	breq	.+30     	; 0xc98 <__fp_splitA+0x2a>
 c7a:	87 95       	ror	r24
 c7c:	08 95       	ret
 c7e:	12 16       	cp	r1, r18
 c80:	13 06       	cpc	r1, r19
 c82:	14 06       	cpc	r1, r20
 c84:	55 1f       	adc	r21, r21
 c86:	f2 cf       	rjmp	.-28     	; 0xc6c <__fp_split3+0xe>
 c88:	46 95       	lsr	r20
 c8a:	f1 df       	rcall	.-30     	; 0xc6e <__fp_splitA>
 c8c:	08 c0       	rjmp	.+16     	; 0xc9e <__fp_splitA+0x30>
 c8e:	16 16       	cp	r1, r22
 c90:	17 06       	cpc	r1, r23
 c92:	18 06       	cpc	r1, r24
 c94:	99 1f       	adc	r25, r25
 c96:	f1 cf       	rjmp	.-30     	; 0xc7a <__fp_splitA+0xc>
 c98:	86 95       	lsr	r24
 c9a:	71 05       	cpc	r23, r1
 c9c:	61 05       	cpc	r22, r1
 c9e:	08 94       	sec
 ca0:	08 95       	ret

00000ca2 <__fp_zero>:
 ca2:	e8 94       	clt

00000ca4 <__fp_szero>:
 ca4:	bb 27       	eor	r27, r27
 ca6:	66 27       	eor	r22, r22
 ca8:	77 27       	eor	r23, r23
 caa:	cb 01       	movw	r24, r22
 cac:	97 f9       	bld	r25, 7
 cae:	08 95       	ret

00000cb0 <__mulsf3>:
 cb0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__mulsf3x>
 cb4:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_round>
 cb8:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_pscA>
 cbc:	38 f0       	brcs	.+14     	; 0xccc <__mulsf3+0x1c>
 cbe:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fp_pscB>
 cc2:	20 f0       	brcs	.+8      	; 0xccc <__mulsf3+0x1c>
 cc4:	95 23       	and	r25, r21
 cc6:	11 f0       	breq	.+4      	; 0xccc <__mulsf3+0x1c>
 cc8:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_inf>
 ccc:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_nan>
 cd0:	11 24       	eor	r1, r1
 cd2:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_szero>

00000cd6 <__mulsf3x>:
 cd6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fp_split3>
 cda:	70 f3       	brcs	.-36     	; 0xcb8 <__mulsf3+0x8>

00000cdc <__mulsf3_pse>:
 cdc:	95 9f       	mul	r25, r21
 cde:	c1 f3       	breq	.-16     	; 0xcd0 <__mulsf3+0x20>
 ce0:	95 0f       	add	r25, r21
 ce2:	50 e0       	ldi	r21, 0x00	; 0
 ce4:	55 1f       	adc	r21, r21
 ce6:	62 9f       	mul	r22, r18
 ce8:	f0 01       	movw	r30, r0
 cea:	72 9f       	mul	r23, r18
 cec:	bb 27       	eor	r27, r27
 cee:	f0 0d       	add	r31, r0
 cf0:	b1 1d       	adc	r27, r1
 cf2:	63 9f       	mul	r22, r19
 cf4:	aa 27       	eor	r26, r26
 cf6:	f0 0d       	add	r31, r0
 cf8:	b1 1d       	adc	r27, r1
 cfa:	aa 1f       	adc	r26, r26
 cfc:	64 9f       	mul	r22, r20
 cfe:	66 27       	eor	r22, r22
 d00:	b0 0d       	add	r27, r0
 d02:	a1 1d       	adc	r26, r1
 d04:	66 1f       	adc	r22, r22
 d06:	82 9f       	mul	r24, r18
 d08:	22 27       	eor	r18, r18
 d0a:	b0 0d       	add	r27, r0
 d0c:	a1 1d       	adc	r26, r1
 d0e:	62 1f       	adc	r22, r18
 d10:	73 9f       	mul	r23, r19
 d12:	b0 0d       	add	r27, r0
 d14:	a1 1d       	adc	r26, r1
 d16:	62 1f       	adc	r22, r18
 d18:	83 9f       	mul	r24, r19
 d1a:	a0 0d       	add	r26, r0
 d1c:	61 1d       	adc	r22, r1
 d1e:	22 1f       	adc	r18, r18
 d20:	74 9f       	mul	r23, r20
 d22:	33 27       	eor	r19, r19
 d24:	a0 0d       	add	r26, r0
 d26:	61 1d       	adc	r22, r1
 d28:	23 1f       	adc	r18, r19
 d2a:	84 9f       	mul	r24, r20
 d2c:	60 0d       	add	r22, r0
 d2e:	21 1d       	adc	r18, r1
 d30:	82 2f       	mov	r24, r18
 d32:	76 2f       	mov	r23, r22
 d34:	6a 2f       	mov	r22, r26
 d36:	11 24       	eor	r1, r1
 d38:	9f 57       	subi	r25, 0x7F	; 127
 d3a:	50 40       	sbci	r21, 0x00	; 0
 d3c:	9a f0       	brmi	.+38     	; 0xd64 <__mulsf3_pse+0x88>
 d3e:	f1 f0       	breq	.+60     	; 0xd7c <__mulsf3_pse+0xa0>
 d40:	88 23       	and	r24, r24
 d42:	4a f0       	brmi	.+18     	; 0xd56 <__mulsf3_pse+0x7a>
 d44:	ee 0f       	add	r30, r30
 d46:	ff 1f       	adc	r31, r31
 d48:	bb 1f       	adc	r27, r27
 d4a:	66 1f       	adc	r22, r22
 d4c:	77 1f       	adc	r23, r23
 d4e:	88 1f       	adc	r24, r24
 d50:	91 50       	subi	r25, 0x01	; 1
 d52:	50 40       	sbci	r21, 0x00	; 0
 d54:	a9 f7       	brne	.-22     	; 0xd40 <__mulsf3_pse+0x64>
 d56:	9e 3f       	cpi	r25, 0xFE	; 254
 d58:	51 05       	cpc	r21, r1
 d5a:	80 f0       	brcs	.+32     	; 0xd7c <__mulsf3_pse+0xa0>
 d5c:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_inf>
 d60:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_szero>
 d64:	5f 3f       	cpi	r21, 0xFF	; 255
 d66:	e4 f3       	brlt	.-8      	; 0xd60 <__mulsf3_pse+0x84>
 d68:	98 3e       	cpi	r25, 0xE8	; 232
 d6a:	d4 f3       	brlt	.-12     	; 0xd60 <__mulsf3_pse+0x84>
 d6c:	86 95       	lsr	r24
 d6e:	77 95       	ror	r23
 d70:	67 95       	ror	r22
 d72:	b7 95       	ror	r27
 d74:	f7 95       	ror	r31
 d76:	e7 95       	ror	r30
 d78:	9f 5f       	subi	r25, 0xFF	; 255
 d7a:	c1 f7       	brne	.-16     	; 0xd6c <__mulsf3_pse+0x90>
 d7c:	fe 2b       	or	r31, r30
 d7e:	88 0f       	add	r24, r24
 d80:	91 1d       	adc	r25, r1
 d82:	96 95       	lsr	r25
 d84:	87 95       	ror	r24
 d86:	97 f9       	bld	r25, 7
 d88:	08 95       	ret

00000d8a <eeprom_read_byte>:
 d8a:	f9 99       	sbic	0x1f, 1	; 31
 d8c:	fe cf       	rjmp	.-4      	; 0xd8a <eeprom_read_byte>
 d8e:	92 bd       	out	0x22, r25	; 34
 d90:	81 bd       	out	0x21, r24	; 33
 d92:	f8 9a       	sbi	0x1f, 0	; 31
 d94:	99 27       	eor	r25, r25
 d96:	80 b5       	in	r24, 0x20	; 32
 d98:	08 95       	ret

00000d9a <eeprom_write_byte>:
 d9a:	26 2f       	mov	r18, r22

00000d9c <eeprom_write_r18>:
 d9c:	f9 99       	sbic	0x1f, 1	; 31
 d9e:	fe cf       	rjmp	.-4      	; 0xd9c <eeprom_write_r18>
 da0:	1f ba       	out	0x1f, r1	; 31
 da2:	92 bd       	out	0x22, r25	; 34
 da4:	81 bd       	out	0x21, r24	; 33
 da6:	20 bd       	out	0x20, r18	; 32
 da8:	0f b6       	in	r0, 0x3f	; 63
 daa:	f8 94       	cli
 dac:	fa 9a       	sbi	0x1f, 2	; 31
 dae:	f9 9a       	sbi	0x1f, 1	; 31
 db0:	0f be       	out	0x3f, r0	; 63
 db2:	01 96       	adiw	r24, 0x01	; 1
 db4:	08 95       	ret

00000db6 <_exit>:
 db6:	f8 94       	cli

00000db8 <__stop_program>:
 db8:	ff cf       	rjmp	.-2      	; 0xdb8 <__stop_program>
